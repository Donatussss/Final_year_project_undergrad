
oxygen_harvester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd8  080089e0  080089e0  000099e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b8  080095b8  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080095b8  080095b8  0000a5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c0  080095c0  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c0  080095c0  0000a5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c4  080095c4  0000a5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080095c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001dc  080097a4  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  080097a4  0000ba68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ece0  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a9  00000000  00000000  00019eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0001c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a00  00000000  00000000  0001d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f55  00000000  00000000  0001dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e2f  00000000  00000000  00036ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097312  00000000  00000000  00048b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfe2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  000dfe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000e44b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089c8 	.word	0x080089c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080089c8 	.word	0x080089c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <check_buf>:
uint32_t gasPressureBitBuffer[1];
GAS_t gas1;
char oled_buf2[200];

int check_buf(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
	for (int i = 0; i < GASRXBUFSIZE; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e019      	b.n	8000f88 <check_buf+0x40>
	{
		if ((gasRxBuffer[i] == 0x16) && (gasRxBuffer[i + 1] == 0x09) && (gasRxBuffer[i + 2] == 0x01))
 8000f54:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <check_buf+0x58>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b16      	cmp	r3, #22
 8000f5e:	d10d      	bne.n	8000f7c <check_buf+0x34>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <check_buf+0x58>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d107      	bne.n	8000f7c <check_buf+0x34>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <check_buf+0x58>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <check_buf+0x34>
			return 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e00b      	b.n	8000f94 <check_buf+0x4c>
		if (i > 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dc06      	bgt.n	8000f90 <check_buf+0x48>
	for (int i = 0; i < GASRXBUFSIZE; i++)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b0b      	cmp	r3, #11
 8000f8c:	dde2      	ble.n	8000f54 <check_buf+0xc>
 8000f8e:	e000      	b.n	8000f92 <check_buf+0x4a>
			break;
 8000f90:	bf00      	nop
	}

	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	20000200 	.word	0x20000200

08000fa4 <get_oxygen_params>:


void get_oxygen_params(void)
{
 8000fa4:	b598      	push	{r3, r4, r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	gas_counter = 0;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <get_oxygen_params+0xb0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
	gas_counter2 = 3;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	601a      	str	r2, [r3, #0]

	if (check_buf())
 8000fb4:	f7ff ffc8 	bl	8000f48 <check_buf>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d041      	beq.n	8001042 <get_oxygen_params+0x9e>
	{
		while (gas_counter < 3)
 8000fbe:	e02e      	b.n	800101e <get_oxygen_params+0x7a>
		{
			gas1.gas_params[gas_counter] = (gasRxBuffer[gas_counter2 + gas_counter] * 256 + gasRxBuffer[(++gas_counter2) + gas_counter])/10.0;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <get_oxygen_params+0xb0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a24      	ldr	r2, [pc, #144]	@ (800105c <get_oxygen_params+0xb8>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	3201      	adds	r2, #1
 8000fd6:	4920      	ldr	r1, [pc, #128]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fd8:	600a      	str	r2, [r1, #0]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fdc:	6811      	ldr	r1, [r2, #0]
 8000fde:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <get_oxygen_params+0xb0>)
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	440a      	add	r2, r1
 8000fe4:	491d      	ldr	r1, [pc, #116]	@ (800105c <get_oxygen_params+0xb8>)
 8000fe6:	5c8a      	ldrb	r2, [r1, r2]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff faa2 	bl	8000534 <__aeabi_i2d>
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <get_oxygen_params+0xbc>)
 8000ff6:	f7ff fc31 	bl	800085c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4915      	ldr	r1, [pc, #84]	@ (8001054 <get_oxygen_params+0xb0>)
 8001000:	680c      	ldr	r4, [r1, #0]
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fdd7 	bl	8000bb8 <__aeabi_d2f>
 800100a:	4602      	mov	r2, r0
 800100c:	4915      	ldr	r1, [pc, #84]	@ (8001064 <get_oxygen_params+0xc0>)
 800100e:	00a3      	lsls	r3, r4, #2
 8001010:	440b      	add	r3, r1
 8001012:	601a      	str	r2, [r3, #0]
			gas_counter++;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <get_oxygen_params+0xb0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <get_oxygen_params+0xb0>)
 800101c:	6013      	str	r3, [r2, #0]
		while (gas_counter < 3)
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <get_oxygen_params+0xb0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	ddcc      	ble.n	8000fc0 <get_oxygen_params+0x1c>
 8001026:	e010      	b.n	800104a <get_oxygen_params+0xa6>

	else
	{
		while (gas_counter < 3)
		{
			gas1.gas_params[gas_counter] = 0;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <get_oxygen_params+0xb0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <get_oxygen_params+0xc0>)
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
			gas_counter++;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <get_oxygen_params+0xb0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <get_oxygen_params+0xb0>)
 8001040:	6013      	str	r3, [r2, #0]
		while (gas_counter < 3)
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <get_oxygen_params+0xb0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b02      	cmp	r3, #2
 8001048:	ddee      	ble.n	8001028 <get_oxygen_params+0x84>
		}
	}
	gas_bit_to_bar();
 800104a:	f000 f80d 	bl	8001068 <gas_bit_to_bar>
}
 800104e:	bf00      	nop
 8001050:	bd98      	pop	{r3, r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	200001f8 	.word	0x200001f8
 8001058:	200001fc 	.word	0x200001fc
 800105c:	20000200 	.word	0x20000200
 8001060:	40240000 	.word	0x40240000
 8001064:	20000210 	.word	0x20000210

08001068 <gas_bit_to_bar>:


void gas_bit_to_bar(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	 * adc int to voltage -> voltage = int * 3.3/4096
	 * Using a resistance r:
	 * 	0bar is 4ma*r -> 4ma * 150R = 0.6V
	 * 	16bar is 20ma*r -> 20ma * 150R = 3V
	 */
	HAL_ADC_Start(&hadc1);
 800106c:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <gas_bit_to_bar+0x68>)
 800106e:	f001 fa17 	bl	80024a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001072:	210a      	movs	r1, #10
 8001074:	4816      	ldr	r0, [pc, #88]	@ (80010d0 <gas_bit_to_bar+0x68>)
 8001076:	f001 fac7 	bl	8002608 <HAL_ADC_PollForConversion>
	*gasPressureBitBuffer = HAL_ADC_GetValue(&hadc1);
 800107a:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <gas_bit_to_bar+0x68>)
 800107c:	f001 fb4f 	bl	800271e <HAL_ADC_GetValue>
 8001080:	4603      	mov	r3, r0
 8001082:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <gas_bit_to_bar+0x6c>)
 8001084:	6013      	str	r3, [r2, #0]
	gas1.gas_pressure = ((*gasPressureBitBuffer) * (3.3 / 4096.0)) / (PRESSURE_R_DROP / 3.0);
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <gas_bit_to_bar+0x6c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa42 	bl	8000514 <__aeabi_ui2d>
 8001090:	a30d      	add	r3, pc, #52	@ (adr r3, 80010c8 <gas_bit_to_bar+0x60>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fab7 	bl	8000608 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <gas_bit_to_bar+0x70>)
 80010a8:	f7ff fbd8 	bl	800085c <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fd80 	bl	8000bb8 <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <gas_bit_to_bar+0x74>)
 80010bc:	60d3      	str	r3, [r2, #12]
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	66666666 	.word	0x66666666
 80010cc:	3f4a6666 	.word	0x3f4a6666
 80010d0:	200002e8 	.word	0x200002e8
 80010d4:	2000020c 	.word	0x2000020c
 80010d8:	40490000 	.word	0x40490000
 80010dc:	20000210 	.word	0x20000210

080010e0 <power_electrodes>:

void power_electrodes(int power_direction, int *electrode_power_status)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Electrode1_Output_GPIO_Port, Electrode1_Output_Pin, power_direction);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <power_electrodes+0x48>)
 80010f6:	f002 fbfd 	bl	80038f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Electrode2_Output_GPIO_Port, Electrode2_Output_Pin, power_direction);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <power_electrodes+0x48>)
 8001106:	f002 fbf5 	bl	80038f4 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(Electrode3_Output_GPIO_Port, Electrode3_Output_Pin, power_direction);
	HAL_GPIO_WritePin(Electrode4_Output_GPIO_Port, Electrode4_Output_Pin, power_direction);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	2110      	movs	r1, #16
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <power_electrodes+0x4c>)
 8001114:	f002 fbee 	bl	80038f4 <HAL_GPIO_WritePin>
	*electrode_power_status = 1;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400

08001130 <display_gas_parameters>:
	}

}

void display_gas_parameters(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fb31 	bl	800179c <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800113a:	2100      	movs	r1, #0
 800113c:	2000      	movs	r0, #0
 800113e:	f000 fc81 	bl	8001a44 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 8001142:	22c8      	movs	r2, #200	@ 0xc8
 8001144:	2100      	movs	r1, #0
 8001146:	4833      	ldr	r0, [pc, #204]	@ (8001214 <display_gas_parameters+0xe4>)
 8001148:	f005 fb8f 	bl	800686a <memset>
	sprintf(oled_buf2, "P: %.4fbar", gas1.gas_pressure);
 800114c:	4b32      	ldr	r3, [pc, #200]	@ (8001218 <display_gas_parameters+0xe8>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa01 	bl	8000558 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4930      	ldr	r1, [pc, #192]	@ (800121c <display_gas_parameters+0xec>)
 800115c:	482d      	ldr	r0, [pc, #180]	@ (8001214 <display_gas_parameters+0xe4>)
 800115e:	f005 fb07 	bl	8006770 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 8001162:	4a2f      	ldr	r2, [pc, #188]	@ (8001220 <display_gas_parameters+0xf0>)
 8001164:	2301      	movs	r3, #1
 8001166:	ca06      	ldmia	r2, {r1, r2}
 8001168:	482a      	ldr	r0, [pc, #168]	@ (8001214 <display_gas_parameters+0xe4>)
 800116a:	f000 fc45 	bl	80019f8 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 10);
 800116e:	210a      	movs	r1, #10
 8001170:	2000      	movs	r0, #0
 8001172:	f000 fc67 	bl	8001a44 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 8001176:	22c8      	movs	r2, #200	@ 0xc8
 8001178:	2100      	movs	r1, #0
 800117a:	4826      	ldr	r0, [pc, #152]	@ (8001214 <display_gas_parameters+0xe4>)
 800117c:	f005 fb75 	bl	800686a <memset>
	sprintf(oled_buf2, "Conc: %.2f%%", gas1.gas_concentration);
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <display_gas_parameters+0xe8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9e7 	bl	8000558 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4925      	ldr	r1, [pc, #148]	@ (8001224 <display_gas_parameters+0xf4>)
 8001190:	4820      	ldr	r0, [pc, #128]	@ (8001214 <display_gas_parameters+0xe4>)
 8001192:	f005 faed 	bl	8006770 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 8001196:	4a22      	ldr	r2, [pc, #136]	@ (8001220 <display_gas_parameters+0xf0>)
 8001198:	2301      	movs	r3, #1
 800119a:	ca06      	ldmia	r2, {r1, r2}
 800119c:	481d      	ldr	r0, [pc, #116]	@ (8001214 <display_gas_parameters+0xe4>)
 800119e:	f000 fc2b 	bl	80019f8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 80011a2:	2114      	movs	r1, #20
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 fc4d 	bl	8001a44 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 80011aa:	22c8      	movs	r2, #200	@ 0xc8
 80011ac:	2100      	movs	r1, #0
 80011ae:	4819      	ldr	r0, [pc, #100]	@ (8001214 <display_gas_parameters+0xe4>)
 80011b0:	f005 fb5b 	bl	800686a <memset>
	sprintf(oled_buf2, "Flow: %.2fL/min", gas1.gas_flowrate);
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <display_gas_parameters+0xe8>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9cd 	bl	8000558 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4919      	ldr	r1, [pc, #100]	@ (8001228 <display_gas_parameters+0xf8>)
 80011c4:	4813      	ldr	r0, [pc, #76]	@ (8001214 <display_gas_parameters+0xe4>)
 80011c6:	f005 fad3 	bl	8006770 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <display_gas_parameters+0xf0>)
 80011cc:	2301      	movs	r3, #1
 80011ce:	ca06      	ldmia	r2, {r1, r2}
 80011d0:	4810      	ldr	r0, [pc, #64]	@ (8001214 <display_gas_parameters+0xe4>)
 80011d2:	f000 fc11 	bl	80019f8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 80011d6:	211e      	movs	r1, #30
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 fc33 	bl	8001a44 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 80011de:	22c8      	movs	r2, #200	@ 0xc8
 80011e0:	2100      	movs	r1, #0
 80011e2:	480c      	ldr	r0, [pc, #48]	@ (8001214 <display_gas_parameters+0xe4>)
 80011e4:	f005 fb41 	bl	800686a <memset>
	sprintf(oled_buf2, "Temp: %.2fdegC", gas1.gas_temperature);
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <display_gas_parameters+0xe8>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <display_gas_parameters+0xfc>)
 80011f8:	4806      	ldr	r0, [pc, #24]	@ (8001214 <display_gas_parameters+0xe4>)
 80011fa:	f005 fab9 	bl	8006770 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <display_gas_parameters+0xf0>)
 8001200:	2301      	movs	r3, #1
 8001202:	ca06      	ldmia	r2, {r1, r2}
 8001204:	4803      	ldr	r0, [pc, #12]	@ (8001214 <display_gas_parameters+0xe4>)
 8001206:	f000 fbf7 	bl	80019f8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800120a:	f000 fadf 	bl	80017cc <ssd1306_UpdateScreen>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000220 	.word	0x20000220
 8001218:	20000210 	.word	0x20000210
 800121c:	08008a3c 	.word	0x08008a3c
 8001220:	20000000 	.word	0x20000000
 8001224:	08008a48 	.word	0x08008a48
 8001228:	08008a58 	.word	0x08008a58
 800122c:	08008a68 	.word	0x08008a68

08001230 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* GAS CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <HAL_UART_RxCpltCallback+0x34>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10c      	bne.n	800125c <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_DMA(huart, gasRxBuffer, GASRXBUFSIZE);
 8001242:	220c      	movs	r2, #12
 8001244:	4908      	ldr	r1, [pc, #32]	@ (8001268 <HAL_UART_RxCpltCallback+0x38>)
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f003 fcc4 	bl	8004bd4 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <HAL_UART_RxCpltCallback+0x3c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_UART_RxCpltCallback+0x3c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0208 	bic.w	r2, r2, #8
 800125a:	601a      	str	r2, [r3, #0]
	}
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40004400 	.word	0x40004400
 8001268:	20000200 	.word	0x20000200
 800126c:	200003cc 	.word	0x200003cc

08001270 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001274:	f001 f83a 	bl	80022ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001278:	f000 f830 	bl	80012dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800127c:	f000 f960 	bl	8001540 <MX_GPIO_Init>
	MX_DMA_Init();
 8001280:	f000 f93e 	bl	8001500 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001284:	f000 f912 	bl	80014ac <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001288:	f000 f890 	bl	80013ac <MX_ADC1_Init>
	MX_I2C2_Init();
 800128c:	f000 f8e0 	bl	8001450 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1500);
 8001290:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001294:	f001 f89c 	bl	80023d0 <HAL_Delay>
	ssd1306_Init();
 8001298:	f000 fa16 	bl	80016c8 <ssd1306_Init>
	/* GAS CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, gasRxBuffer, GASRXBUFSIZE);
 800129c:	220c      	movs	r2, #12
 800129e:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <main+0x60>)
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <main+0x64>)
 80012a2:	f003 fc97 	bl	8004bd4 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <main+0x68>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <main+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0208 	bic.w	r2, r2, #8
 80012b4:	601a      	str	r2, [r3, #0]
	/* GAS CODE END 2 */
	/* WATER CODE BEGIN 2 */
	waterInitialization();
 80012b6:	f000 fec7 	bl	8002048 <waterInitialization>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* GAS CODE BEGIN WHILE */
		waterManagement();
 80012ba:	f000 ff4f 	bl	800215c <waterManagement>
		get_oxygen_params();
 80012be:	f7ff fe71 	bl	8000fa4 <get_oxygen_params>
		//		manage_chambers();
		display_gas_parameters();
 80012c2:	f7ff ff35 	bl	8001130 <display_gas_parameters>
		HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	@ 0x64
 80012c8:	f001 f882 	bl	80023d0 <HAL_Delay>
		waterManagement();
 80012cc:	bf00      	nop
 80012ce:	e7f4      	b.n	80012ba <main+0x4a>
 80012d0:	20000200 	.word	0x20000200
 80012d4:	20000384 	.word	0x20000384
 80012d8:	200003cc 	.word	0x200003cc

080012dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	@ 0x50
 80012e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	2230      	movs	r2, #48	@ 0x30
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fabd 	bl	800686a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <SystemClock_Config+0xc8>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	4a26      	ldr	r2, [pc, #152]	@ (80013a4 <SystemClock_Config+0xc8>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <SystemClock_Config+0xc8>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <SystemClock_Config+0xcc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <SystemClock_Config+0xcc>)
 8001326:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <SystemClock_Config+0xcc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001342:	2302      	movs	r3, #2
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001346:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800134c:	2319      	movs	r3, #25
 800134e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001350:	23c0      	movs	r3, #192	@ 0xc0
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001358:	2304      	movs	r3, #4
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4618      	mov	r0, r3
 8001362:	f002 ff8f 	bl	8004284 <HAL_RCC_OscConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800136c:	f000 f96c 	bl	8001648 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
 8001372:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001374:	2302      	movs	r3, #2
 8001376:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001380:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2103      	movs	r1, #3
 800138c:	4618      	mov	r0, r3
 800138e:	f003 f9f1 	bl	8004774 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001398:	f000 f956 	bl	8001648 <Error_Handler>
	}
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	@ 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013c0:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <MX_ADC1_Init+0x9c>)
 80013c2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ca:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <MX_ADC1_Init+0xa0>)
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_ADC1_Init+0x98>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_ADC1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_ADC1_Init+0x98>)
 8001408:	2201      	movs	r2, #1
 800140a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800140c:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_ADC1_Init+0x98>)
 800140e:	f001 f803 	bl	8002418 <HAL_ADC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001418:	f000 f916 	bl	8001648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800141c:	2309      	movs	r3, #9
 800141e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_ADC1_Init+0x98>)
 800142e:	f001 f983 	bl	8002738 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001438:	f000 f906 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002e8 	.word	0x200002e8
 8001448:	40012000 	.word	0x40012000
 800144c:	0f000001 	.word	0x0f000001

08001450 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001456:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <MX_I2C2_Init+0x54>)
 8001458:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800145c:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <MX_I2C2_Init+0x58>)
 800145e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800146e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001472:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800148e:	f002 fa4b 	bl	8003928 <HAL_I2C_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8001498:	f000 f8d6 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000330 	.word	0x20000330
 80014a4:	40005800 	.word	0x40005800
 80014a8:	00061a80 	.word	0x00061a80

080014ac <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <MX_USART2_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f003 fb26 	bl	8004b34 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80014ee:	f000 f8ab 	bl	8001648 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000384 	.word	0x20000384
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_DMA_Init+0x3c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <MX_DMA_Init+0x3c>)
 8001510:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_DMA_Init+0x3c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2010      	movs	r0, #16
 8001528:	f001 fc0f 	bl	8002d4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800152c:	2010      	movs	r0, #16
 800152e:	f001 fc28 	bl	8002d82 <HAL_NVIC_EnableIRQ>

}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b38      	ldr	r3, [pc, #224]	@ (800163c <MX_GPIO_Init+0xfc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a37      	ldr	r2, [pc, #220]	@ (800163c <MX_GPIO_Init+0xfc>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b35      	ldr	r3, [pc, #212]	@ (800163c <MX_GPIO_Init+0xfc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b31      	ldr	r3, [pc, #196]	@ (800163c <MX_GPIO_Init+0xfc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a30      	ldr	r2, [pc, #192]	@ (800163c <MX_GPIO_Init+0xfc>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <MX_GPIO_Init+0xfc>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <MX_GPIO_Init+0xfc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a29      	ldr	r2, [pc, #164]	@ (800163c <MX_GPIO_Init+0xfc>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <MX_GPIO_Init+0xfc>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, Electrode1_Output_Pin|Electrode2_Output_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80015b0:	4823      	ldr	r0, [pc, #140]	@ (8001640 <MX_GPIO_Init+0x100>)
 80015b2:	f002 f99f 	bl	80038f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Electrode3_Output_Pin|Electrode4_Output_Pin|Solenoid1_Output_Pin|Solenoid2_Output_Pin
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 80015bc:	4821      	ldr	r0, [pc, #132]	@ (8001644 <MX_GPIO_Init+0x104>)
 80015be:	f002 f999 	bl	80038f4 <HAL_GPIO_WritePin>
			|Solenoid3_Output_Pin|Solenoid4_Output_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : Float_Chamber1_min_Pin Float_Chamber1_max_Pin Float_Chamber2_min_Pin Float_Chamber2_max_Pin */
	GPIO_InitStruct.Pin = Float_Chamber1_min_Pin|Float_Chamber1_max_Pin|Float_Chamber2_min_Pin|Float_Chamber2_max_Pin;
 80015c2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80015c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	481b      	ldr	r0, [pc, #108]	@ (8001644 <MX_GPIO_Init+0x104>)
 80015d8:	f001 fff0 	bl	80035bc <HAL_GPIO_Init>

	/*Configure GPIO pins : Float_Chamber3_min_Pin Float_Chamber3_max_Pin Float_Chamber4_min_Pin Float_Chamber4_max_Pin */
	GPIO_InitStruct.Pin = Float_Chamber3_min_Pin|Float_Chamber3_max_Pin|Float_Chamber4_min_Pin|Float_Chamber4_max_Pin;
 80015dc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80015e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	4813      	ldr	r0, [pc, #76]	@ (8001640 <MX_GPIO_Init+0x100>)
 80015f2:	f001 ffe3 	bl	80035bc <HAL_GPIO_Init>

	/*Configure GPIO pins : Electrode1_Output_Pin Electrode2_Output_Pin */
	GPIO_InitStruct.Pin = Electrode1_Output_Pin|Electrode2_Output_Pin;
 80015f6:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80015fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	480c      	ldr	r0, [pc, #48]	@ (8001640 <MX_GPIO_Init+0x100>)
 8001610:	f001 ffd4 	bl	80035bc <HAL_GPIO_Init>

	/*Configure GPIO pins : Electrode3_Output_Pin Electrode4_Output_Pin Solenoid1_Output_Pin Solenoid2_Output_Pin
                           Solenoid3_Output_Pin Solenoid4_Output_Pin */
	GPIO_InitStruct.Pin = Electrode3_Output_Pin|Electrode4_Output_Pin|Solenoid1_Output_Pin|Solenoid2_Output_Pin
 8001614:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8001618:	60fb      	str	r3, [r7, #12]
			|Solenoid3_Output_Pin|Solenoid4_Output_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_GPIO_Init+0x104>)
 800162e:	f001 ffc5 	bl	80035bc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001632:	bf00      	nop
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400

08001648 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <Error_Handler+0x8>

08001654 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af04      	add	r7, sp, #16
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2301      	movs	r3, #1
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	2200      	movs	r2, #0
 8001680:	2178      	movs	r1, #120	@ 0x78
 8001682:	4803      	ldr	r0, [pc, #12]	@ (8001690 <ssd1306_WriteCommand+0x2c>)
 8001684:	f002 fa94 	bl	8003bb0 <HAL_I2C_Mem_Write>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000330 	.word	0x20000330

08001694 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af04      	add	r7, sp, #16
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	f04f 32ff 	mov.w	r2, #4294967295
 80016a6:	9202      	str	r2, [sp, #8]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2240      	movs	r2, #64	@ 0x40
 80016b2:	2178      	movs	r1, #120	@ 0x78
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <ssd1306_WriteData+0x30>)
 80016b6:	f002 fa7b 	bl	8003bb0 <HAL_I2C_Mem_Write>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000330 	.word	0x20000330

080016c8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80016cc:	f7ff ffc2 	bl	8001654 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80016d0:	2064      	movs	r0, #100	@ 0x64
 80016d2:	f000 fe7d 	bl	80023d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f9e0 	bl	8001a9c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80016dc:	2020      	movs	r0, #32
 80016de:	f7ff ffc1 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff ffbe 	bl	8001664 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016e8:	20b0      	movs	r0, #176	@ 0xb0
 80016ea:	f7ff ffbb 	bl	8001664 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80016ee:	20c8      	movs	r0, #200	@ 0xc8
 80016f0:	f7ff ffb8 	bl	8001664 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff ffb5 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80016fa:	2010      	movs	r0, #16
 80016fc:	f7ff ffb2 	bl	8001664 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001700:	2040      	movs	r0, #64	@ 0x40
 8001702:	f7ff ffaf 	bl	8001664 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001706:	20ff      	movs	r0, #255	@ 0xff
 8001708:	f000 f9b4 	bl	8001a74 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800170c:	20a1      	movs	r0, #161	@ 0xa1
 800170e:	f7ff ffa9 	bl	8001664 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001712:	20a6      	movs	r0, #166	@ 0xa6
 8001714:	f7ff ffa6 	bl	8001664 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001718:	20a8      	movs	r0, #168	@ 0xa8
 800171a:	f7ff ffa3 	bl	8001664 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800171e:	203f      	movs	r0, #63	@ 0x3f
 8001720:	f7ff ffa0 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001724:	20a4      	movs	r0, #164	@ 0xa4
 8001726:	f7ff ff9d 	bl	8001664 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800172a:	20d3      	movs	r0, #211	@ 0xd3
 800172c:	f7ff ff9a 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff ff97 	bl	8001664 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001736:	20d5      	movs	r0, #213	@ 0xd5
 8001738:	f7ff ff94 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800173c:	20f0      	movs	r0, #240	@ 0xf0
 800173e:	f7ff ff91 	bl	8001664 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001742:	20d9      	movs	r0, #217	@ 0xd9
 8001744:	f7ff ff8e 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001748:	2022      	movs	r0, #34	@ 0x22
 800174a:	f7ff ff8b 	bl	8001664 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800174e:	20da      	movs	r0, #218	@ 0xda
 8001750:	f7ff ff88 	bl	8001664 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001754:	2012      	movs	r0, #18
 8001756:	f7ff ff85 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800175a:	20db      	movs	r0, #219	@ 0xdb
 800175c:	f7ff ff82 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001760:	2020      	movs	r0, #32
 8001762:	f7ff ff7f 	bl	8001664 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001766:	208d      	movs	r0, #141	@ 0x8d
 8001768:	f7ff ff7c 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800176c:	2014      	movs	r0, #20
 800176e:	f7ff ff79 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001772:	2001      	movs	r0, #1
 8001774:	f000 f992 	bl	8001a9c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001778:	2000      	movs	r0, #0
 800177a:	f000 f80f 	bl	800179c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800177e:	f000 f825 	bl	80017cc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001782:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <ssd1306_Init+0xd0>)
 8001784:	2200      	movs	r2, #0
 8001786:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <ssd1306_Init+0xd0>)
 800178a:	2200      	movs	r2, #0
 800178c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800178e:	4b02      	ldr	r3, [pc, #8]	@ (8001798 <ssd1306_Init+0xd0>)
 8001790:	2201      	movs	r2, #1
 8001792:	711a      	strb	r2, [r3, #4]
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000083c 	.word	0x2000083c

0800179c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <ssd1306_Fill+0x14>
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <ssd1306_Fill+0x16>
 80017b0:	23ff      	movs	r3, #255	@ 0xff
 80017b2:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 80017b6:	4619      	mov	r1, r3
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <ssd1306_Fill+0x2c>)
 80017ba:	f005 f856 	bl	800686a <memset>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000042c 	.word	0x2000042c

080017cc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	e01a      	b.n	800180e <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	3b50      	subs	r3, #80	@ 0x50
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff40 	bl	8001664 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff3d 	bl	8001664 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80017ea:	2010      	movs	r0, #16
 80017ec:	f7ff ff3a 	bl	8001664 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_DISP_WIDTH *i],SSD1306_DISP_WIDTH);
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	4613      	mov	r3, r2
 80017f4:	019b      	lsls	r3, r3, #6
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <ssd1306_UpdateScreen+0x54>)
 80017fe:	4413      	add	r3, r2
 8001800:	2182      	movs	r1, #130	@ 0x82
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff46 	bl	8001694 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	3301      	adds	r3, #1
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b07      	cmp	r3, #7
 8001812:	d9e1      	bls.n	80017d8 <ssd1306_UpdateScreen+0xc>
    }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000042c 	.word	0x2000042c

08001824 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001824:	b490      	push	{r4, r7}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	460b      	mov	r3, r1
 8001830:	71bb      	strb	r3, [r7, #6]
 8001832:	4613      	mov	r3, r2
 8001834:	717b      	strb	r3, [r7, #5]
    if((x + SSD1306_X_SC_OFFSET) >= SSD1306_DISP_WIDTH  || y >= SSD1306_HEIGHT) {
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db4d      	blt.n	80018da <ssd1306_DrawPixel+0xb6>
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b3f      	cmp	r3, #63	@ 0x3f
 8001842:	d84a      	bhi.n	80018da <ssd1306_DrawPixel+0xb6>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001844:	797b      	ldrb	r3, [r7, #5]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d122      	bne.n	8001890 <ssd1306_DrawPixel+0x6c>
        SSD1306_Buffer[(x + SSD1306_X_SC_OFFSET) + (y / 8) * SSD1306_DISP_WIDTH ] |= 1 << (y % 8);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	1c9a      	adds	r2, r3, #2
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	b2d8      	uxtb	r0, r3
 8001854:	4601      	mov	r1, r0
 8001856:	460b      	mov	r3, r1
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	440b      	add	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	4a20      	ldr	r2, [pc, #128]	@ (80018e4 <ssd1306_DrawPixel+0xc0>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	b25a      	sxtb	r2, r3
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	b25b      	sxtb	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b25c      	sxtb	r4, r3
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	1c9a      	adds	r2, r3, #2
 800187c:	4601      	mov	r1, r0
 800187e:	460b      	mov	r3, r1
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	440b      	add	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	b2e1      	uxtb	r1, r4
 800188a:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <ssd1306_DrawPixel+0xc0>)
 800188c:	54d1      	strb	r1, [r2, r3]
 800188e:	e025      	b.n	80018dc <ssd1306_DrawPixel+0xb8>
    } else { 
        SSD1306_Buffer[(x + SSD1306_X_SC_OFFSET) + (y / 8) * SSD1306_DISP_WIDTH ] &= ~(1 << (y % 8));
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	1c9a      	adds	r2, r3, #2
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	b2d8      	uxtb	r0, r3
 800189a:	4601      	mov	r1, r0
 800189c:	460b      	mov	r3, r1
 800189e:	019b      	lsls	r3, r3, #6
 80018a0:	440b      	add	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	4a0f      	ldr	r2, [pc, #60]	@ (80018e4 <ssd1306_DrawPixel+0xc0>)
 80018a8:	5cd3      	ldrb	r3, [r2, r3]
 80018aa:	b25a      	sxtb	r2, r3
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	4013      	ands	r3, r2
 80018c0:	b25c      	sxtb	r4, r3
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	1c9a      	adds	r2, r3, #2
 80018c6:	4601      	mov	r1, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	019b      	lsls	r3, r3, #6
 80018cc:	440b      	add	r3, r1
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	b2e1      	uxtb	r1, r4
 80018d4:	4a03      	ldr	r2, [pc, #12]	@ (80018e4 <ssd1306_DrawPixel+0xc0>)
 80018d6:	54d1      	strb	r1, [r2, r3]
 80018d8:	e000      	b.n	80018dc <ssd1306_DrawPixel+0xb8>
        return;
 80018da:	bf00      	nop
    }
}
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc90      	pop	{r4, r7}
 80018e2:	4770      	bx	lr
 80018e4:	2000042c 	.word	0x2000042c

080018e8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4604      	mov	r4, r0
 80018f0:	1d38      	adds	r0, r7, #4
 80018f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80018f6:	461a      	mov	r2, r3
 80018f8:	4623      	mov	r3, r4
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	4613      	mov	r3, r2
 80018fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b1f      	cmp	r3, #31
 8001904:	d902      	bls.n	800190c <ssd1306_WriteChar+0x24>
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b7e      	cmp	r3, #126	@ 0x7e
 800190a:	d901      	bls.n	8001910 <ssd1306_WriteChar+0x28>
        return 0;
 800190c:	2300      	movs	r3, #0
 800190e:	e06c      	b.n	80019ea <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001910:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	793b      	ldrb	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	2b80      	cmp	r3, #128	@ 0x80
 800191c:	dc06      	bgt.n	800192c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800191e:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 8001920:	885b      	ldrh	r3, [r3, #2]
 8001922:	461a      	mov	r2, r3
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001928:	2b40      	cmp	r3, #64	@ 0x40
 800192a:	dd01      	ble.n	8001930 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800192c:	2300      	movs	r3, #0
 800192e:	e05c      	b.n	80019ea <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e04c      	b.n	80019d0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3b20      	subs	r3, #32
 800193c:	7979      	ldrb	r1, [r7, #5]
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4619      	mov	r1, r3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	440b      	add	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	e034      	b.n	80019c0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d012      	beq.n	800198c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001966:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	b2d8      	uxtb	r0, r3
 8001974:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	7bba      	ldrb	r2, [r7, #14]
 8001984:	4619      	mov	r1, r3
 8001986:	f7ff ff4d 	bl	8001824 <ssd1306_DrawPixel>
 800198a:	e016      	b.n	80019ba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4413      	add	r3, r2
 8001998:	b2d8      	uxtb	r0, r3
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 800199c:	885b      	ldrh	r3, [r3, #2]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	b2d9      	uxtb	r1, r3
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	f7ff ff35 	bl	8001824 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	3301      	adds	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	793b      	ldrb	r3, [r7, #4]
 80019c2:	461a      	mov	r2, r3
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d3c5      	bcc.n	8001956 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	797b      	ldrb	r3, [r7, #5]
 80019d2:	461a      	mov	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d3ad      	bcc.n	8001936 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	793a      	ldrb	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <ssd1306_WriteChar+0x10c>)
 80019e6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000083c 	.word	0x2000083c

080019f8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	1d38      	adds	r0, r7, #4
 8001a02:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a06:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001a08:	e012      	b.n	8001a30 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	7818      	ldrb	r0, [r3, #0]
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	1d3a      	adds	r2, r7, #4
 8001a12:	ca06      	ldmia	r2, {r1, r2}
 8001a14:	f7ff ff68 	bl	80018e8 <ssd1306_WriteChar>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d002      	beq.n	8001a2a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	e008      	b.n	8001a3c <ssd1306_WriteString+0x44>
        }
        str++;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e8      	bne.n	8001a0a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	4613      	mov	r3, r2
 8001a52:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <ssd1306_SetCursor+0x2c>)
 8001a5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <ssd1306_SetCursor+0x2c>)
 8001a62:	805a      	strh	r2, [r3, #2]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	2000083c 	.word	0x2000083c

08001a74 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a7e:	2381      	movs	r3, #129	@ 0x81
 8001a80:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fded 	bl	8001664 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fde9 	bl	8001664 <ssd1306_WriteCommand>
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001aac:	23af      	movs	r3, #175	@ 0xaf
 8001aae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <ssd1306_SetDisplayOn+0x38>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	715a      	strb	r2, [r3, #5]
 8001ab6:	e004      	b.n	8001ac2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ab8:	23ae      	movs	r3, #174	@ 0xae
 8001aba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <ssd1306_SetDisplayOn+0x38>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fdcd 	bl	8001664 <ssd1306_WriteCommand>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000083c 	.word	0x2000083c

08001ad8 <display_message>:
#include "ssd1306.h"

Display_t display1;

void display_message(char *message)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	ssd1306_SetCursor(display1.cur_x, display1.cur_y);
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <display_message+0x3c>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b14 <display_message+0x3c>)
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ffaa 	bl	8001a44 <ssd1306_SetCursor>
	sprintf(display1.oled_buf, "%s", message);
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4909      	ldr	r1, [pc, #36]	@ (8001b18 <display_message+0x40>)
 8001af4:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <display_message+0x44>)
 8001af6:	f004 fe3b 	bl	8006770 <siprintf>
    ssd1306_WriteString(display1.oled_buf, Font_7x10, White);
 8001afa:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <display_message+0x48>)
 8001afc:	2301      	movs	r3, #1
 8001afe:	ca06      	ldmia	r2, {r1, r2}
 8001b00:	4806      	ldr	r0, [pc, #24]	@ (8001b1c <display_message+0x44>)
 8001b02:	f7ff ff79 	bl	80019f8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001b06:	f7ff fe61 	bl	80017cc <ssd1306_UpdateScreen>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000844 	.word	0x20000844
 8001b18:	08008a78 	.word	0x08008a78
 8001b1c:	20000846 	.word	0x20000846
 8001b20:	20000000 	.word	0x20000000

08001b24 <display_message_overwrite>:

void display_message_overwrite(char *message)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fe35 	bl	800179c <ssd1306_Fill>
	display1.cur_y = 0;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <display_message_overwrite+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
	display1.cur_x = 0;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <display_message_overwrite+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	705a      	strb	r2, [r3, #1]
	ssd1306_SetCursor(display1.cur_x, display1.cur_y);
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <display_message_overwrite+0x4c>)
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <display_message_overwrite+0x4c>)
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff7b 	bl	8001a44 <ssd1306_SetCursor>
	sprintf(display1.oled_buf, "%s", message);
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4908      	ldr	r1, [pc, #32]	@ (8001b74 <display_message_overwrite+0x50>)
 8001b52:	4809      	ldr	r0, [pc, #36]	@ (8001b78 <display_message_overwrite+0x54>)
 8001b54:	f004 fe0c 	bl	8006770 <siprintf>
    ssd1306_WriteString(display1.oled_buf, Font_7x10, White);
 8001b58:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <display_message_overwrite+0x58>)
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	ca06      	ldmia	r2, {r1, r2}
 8001b5e:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <display_message_overwrite+0x54>)
 8001b60:	f7ff ff4a 	bl	80019f8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001b64:	f7ff fe32 	bl	80017cc <ssd1306_UpdateScreen>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000844 	.word	0x20000844
 8001b74:	08008a78 	.word	0x08008a78
 8001b78:	20000846 	.word	0x20000846
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_ADC_MspInit+0x7c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d127      	bne.n	8001c42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_ADC_MspInit+0x80>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	4a15      	ldr	r2, [pc, #84]	@ (8001c50 <HAL_ADC_MspInit+0x80>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Gas_Pressure_Pin;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Gas_Pressure_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <HAL_ADC_MspInit+0x84>)
 8001c3e:	f001 fcbd 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40012000 	.word	0x40012000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a22      	ldr	r2, [pc, #136]	@ (8001d00 <HAL_I2C_MspInit+0xa8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d13d      	bne.n	8001cf6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <HAL_I2C_MspInit+0xac>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a20      	ldr	r2, [pc, #128]	@ (8001d04 <HAL_I2C_MspInit+0xac>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <HAL_I2C_MspInit+0xac>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4815      	ldr	r0, [pc, #84]	@ (8001d08 <HAL_I2C_MspInit+0xb0>)
 8001cb4:	f001 fc82 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001cca:	2309      	movs	r3, #9
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <HAL_I2C_MspInit+0xb0>)
 8001cd6:	f001 fc71 	bl	80035bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_I2C_MspInit+0xac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a08      	ldr	r2, [pc, #32]	@ (8001d04 <HAL_I2C_MspInit+0xac>)
 8001ce4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_I2C_MspInit+0xac>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	@ 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40005800 	.word	0x40005800
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020400 	.word	0x40020400

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a34      	ldr	r2, [pc, #208]	@ (8001dfc <HAL_UART_MspInit+0xf0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d162      	bne.n	8001df4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <HAL_UART_MspInit+0xf4>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a32      	ldr	r2, [pc, #200]	@ (8001e00 <HAL_UART_MspInit+0xf4>)
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_UART_MspInit+0xf4>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <HAL_UART_MspInit+0xf4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a2b      	ldr	r2, [pc, #172]	@ (8001e00 <HAL_UART_MspInit+0xf4>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_UART_MspInit+0xf4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d66:	230c      	movs	r3, #12
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d76:	2307      	movs	r3, #7
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4820      	ldr	r0, [pc, #128]	@ (8001e04 <HAL_UART_MspInit+0xf8>)
 8001d82:	f001 fc1b 	bl	80035bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001d88:	4a20      	ldr	r2, [pc, #128]	@ (8001e0c <HAL_UART_MspInit+0x100>)
 8001d8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001d8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d92:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001da2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da8:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dae:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001dc8:	480f      	ldr	r0, [pc, #60]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001dca:	f000 fff5 	bl	8002db8 <HAL_DMA_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001dd4:	f7ff fc38 	bl	8001648 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <HAL_UART_MspInit+0xfc>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2026      	movs	r0, #38	@ 0x26
 8001dea:	f000 ffae 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dee:	2026      	movs	r0, #38	@ 0x26
 8001df0:	f000 ffc7 	bl	8002d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001df4:	bf00      	nop
 8001df6:	3728      	adds	r7, #40	@ 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40004400 	.word	0x40004400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	200003cc 	.word	0x200003cc
 8001e0c:	40026088 	.word	0x40026088

08001e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <NMI_Handler+0x4>

08001e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <MemManage_Handler+0x4>

08001e28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <BusFault_Handler+0x4>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <UsageFault_Handler+0x4>

08001e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e66:	f000 fa93 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <DMA1_Stream5_IRQHandler+0x10>)
 8001e76:	f001 f937 	bl	80030e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200003cc 	.word	0x200003cc

08001e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <USART2_IRQHandler+0x10>)
 8001e8a:	f002 fec9 	bl	8004c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000384 	.word	0x20000384

08001e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_kill>:

int _kill(int pid, int sig)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eb2:	f004 fd2d 	bl	8006910 <__errno>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2216      	movs	r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
  return -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_exit>:

void _exit (int status)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe7 	bl	8001ea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eda:	bf00      	nop
 8001edc:	e7fd      	b.n	8001eda <_exit+0x12>

08001ede <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e00a      	b.n	8001f06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ef0:	f3af 8000 	nop.w
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	60ba      	str	r2, [r7, #8]
 8001efc:	b2ca      	uxtb	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbf0      	blt.n	8001ef0 <_read+0x12>
  }

  return len;
 8001f0e:	687b      	ldr	r3, [r7, #4]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e009      	b.n	8001f3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	60ba      	str	r2, [r7, #8]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dbf1      	blt.n	8001f2a <_write+0x12>
  }
  return len;
 8001f46:	687b      	ldr	r3, [r7, #4]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_close>:

int _close(int file)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f78:	605a      	str	r2, [r3, #4]
  return 0;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_isatty>:

int _isatty(int file)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	@ (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f004 fc92 	bl	8006910 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20020000 	.word	0x20020000
 8002018:	00000400 	.word	0x00000400
 800201c:	20000910 	.word	0x20000910
 8002020:	20000a68 	.word	0x20000a68

08002024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <waterInitialization>:
#include "gas.h"
#include "ssd1306_funcs.h"

int *electrode_power_status;

void waterInitialization(){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
	display_message_overwrite("Starting");
 800204e:	483b      	ldr	r0, [pc, #236]	@ (800213c <waterInitialization+0xf4>)
 8002050:	f7ff fd68 	bl	8001b24 <display_message_overwrite>
	display1.cur_y += 10;
 8002054:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <waterInitialization+0xf8>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	330a      	adds	r3, #10
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <waterInitialization+0xf8>)
 800205e:	701a      	strb	r2, [r3, #0]
	display_message("Initialization...");
 8002060:	4838      	ldr	r0, [pc, #224]	@ (8002144 <waterInitialization+0xfc>)
 8002062:	f7ff fd39 	bl	8001ad8 <display_message>
	HAL_Delay(1000);
 8002066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800206a:	f000 f9b1 	bl	80023d0 <HAL_Delay>
	while(1){
		int initial_min_1 = HAL_GPIO_ReadPin(Float_Chamber1_min_GPIO_Port, Float_Chamber1_min_Pin);
 800206e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002072:	4835      	ldr	r0, [pc, #212]	@ (8002148 <waterInitialization+0x100>)
 8002074:	f001 fc26 	bl	80038c4 <HAL_GPIO_ReadPin>
 8002078:	4603      	mov	r3, r0
 800207a:	617b      	str	r3, [r7, #20]
		int initial_max_1 = HAL_GPIO_ReadPin(Float_Chamber1_max_GPIO_Port, Float_Chamber1_max_Pin);
 800207c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002080:	4831      	ldr	r0, [pc, #196]	@ (8002148 <waterInitialization+0x100>)
 8002082:	f001 fc1f 	bl	80038c4 <HAL_GPIO_ReadPin>
 8002086:	4603      	mov	r3, r0
 8002088:	613b      	str	r3, [r7, #16]
		int initial_min_2 = HAL_GPIO_ReadPin(Float_Chamber2_min_GPIO_Port, Float_Chamber2_min_Pin);
 800208a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800208e:	482e      	ldr	r0, [pc, #184]	@ (8002148 <waterInitialization+0x100>)
 8002090:	f001 fc18 	bl	80038c4 <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
		int initial_max_2 = HAL_GPIO_ReadPin(Float_Chamber2_max_GPIO_Port, Float_Chamber2_max_Pin);
 8002098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800209c:	482a      	ldr	r0, [pc, #168]	@ (8002148 <waterInitialization+0x100>)
 800209e:	f001 fc11 	bl	80038c4 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	60bb      	str	r3, [r7, #8]
		//		int initial_min_3 = HAL_GPIO_ReadPin(Float_Chamber3_min_GPIO_Port, Float_Chamber3_min_Pin);
		//		int initial_max_3 = HAL_GPIO_ReadPin(Float_Chamber3_max_GPIO_Port, Float_Chamber3_max_Pin);
		int initial_min_4 = HAL_GPIO_ReadPin(Float_Chamber4_min_GPIO_Port, Float_Chamber4_min_Pin);
 80020a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020aa:	4828      	ldr	r0, [pc, #160]	@ (800214c <waterInitialization+0x104>)
 80020ac:	f001 fc0a 	bl	80038c4 <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	607b      	str	r3, [r7, #4]
		int initial_max_4 = HAL_GPIO_ReadPin(Float_Chamber4_max_GPIO_Port, Float_Chamber4_max_Pin);
 80020b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020b8:	4824      	ldr	r0, [pc, #144]	@ (800214c <waterInitialization+0x104>)
 80020ba:	f001 fc03 	bl	80038c4 <HAL_GPIO_ReadPin>
 80020be:	4603      	mov	r3, r0
 80020c0:	603b      	str	r3, [r7, #0]

		waterLevel_Chamber_1(initial_min_1, initial_max_1);
 80020c2:	6939      	ldr	r1, [r7, #16]
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f000 f88b 	bl	80021e0 <waterLevel_Chamber_1>
		waterLevel_Chamber_2(initial_min_2, initial_max_2);
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f8a5 	bl	800221c <waterLevel_Chamber_2>
		//		waterLevel_Chamber_3(initial_min_3, initial_max_3);
		waterLevel_Chamber_4(initial_min_4, initial_max_4);
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8bf 	bl	8002258 <waterLevel_Chamber_4>

		if (initial_max_1 == 1 && initial_max_2 == 1 && initial_max_4) {
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d1c6      	bne.n	800206e <waterInitialization+0x26>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d1c3      	bne.n	800206e <waterInitialization+0x26>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0c0      	beq.n	800206e <waterInitialization+0x26>
			display_message_overwrite("Done");
 80020ec:	4818      	ldr	r0, [pc, #96]	@ (8002150 <waterInitialization+0x108>)
 80020ee:	f7ff fd19 	bl	8001b24 <display_message_overwrite>
			display1.cur_y += 10;
 80020f2:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <waterInitialization+0xf8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	330a      	adds	r3, #10
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <waterInitialization+0xf8>)
 80020fc:	701a      	strb	r2, [r3, #0]
			display_message("Initialization...");
 80020fe:	4811      	ldr	r0, [pc, #68]	@ (8002144 <waterInitialization+0xfc>)
 8002100:	f7ff fcea 	bl	8001ad8 <display_message>
			HAL_Delay(250);
 8002104:	20fa      	movs	r0, #250	@ 0xfa
 8002106:	f000 f963 	bl	80023d0 <HAL_Delay>
			display1.cur_y += 20;
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <waterInitialization+0xf8>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	3314      	adds	r3, #20
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <waterInitialization+0xf8>)
 8002114:	701a      	strb	r2, [r3, #0]
			display_message("System Starting...");
 8002116:	480f      	ldr	r0, [pc, #60]	@ (8002154 <waterInitialization+0x10c>)
 8002118:	f7ff fcde 	bl	8001ad8 <display_message>
			HAL_Delay(1000);
 800211c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002120:	f000 f956 	bl	80023d0 <HAL_Delay>
			break;
 8002124:	bf00      	nop
		}
	}
	power_electrodes(1, electrode_power_status);
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <waterInitialization+0x110>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4619      	mov	r1, r3
 800212c:	2001      	movs	r0, #1
 800212e:	f7fe ffd7 	bl	80010e0 <power_electrodes>
}
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	08008a7c 	.word	0x08008a7c
 8002140:	20000844 	.word	0x20000844
 8002144:	08008a88 	.word	0x08008a88
 8002148:	40020400 	.word	0x40020400
 800214c:	40020000 	.word	0x40020000
 8002150:	08008a9c 	.word	0x08008a9c
 8002154:	08008aa4 	.word	0x08008aa4
 8002158:	20000914 	.word	0x20000914

0800215c <waterManagement>:

void waterManagement(){
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
	int current_min_1 = HAL_GPIO_ReadPin(Float_Chamber1_min_GPIO_Port, Float_Chamber1_min_Pin);
 8002162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002166:	481c      	ldr	r0, [pc, #112]	@ (80021d8 <waterManagement+0x7c>)
 8002168:	f001 fbac 	bl	80038c4 <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	617b      	str	r3, [r7, #20]
	int current_max_1 = HAL_GPIO_ReadPin(Float_Chamber1_max_GPIO_Port, Float_Chamber1_max_Pin);
 8002170:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002174:	4818      	ldr	r0, [pc, #96]	@ (80021d8 <waterManagement+0x7c>)
 8002176:	f001 fba5 	bl	80038c4 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	613b      	str	r3, [r7, #16]
	int current_min_2 = HAL_GPIO_ReadPin(Float_Chamber2_min_GPIO_Port, Float_Chamber2_min_Pin);
 800217e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002182:	4815      	ldr	r0, [pc, #84]	@ (80021d8 <waterManagement+0x7c>)
 8002184:	f001 fb9e 	bl	80038c4 <HAL_GPIO_ReadPin>
 8002188:	4603      	mov	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
	int current_max_2 = HAL_GPIO_ReadPin(Float_Chamber2_max_GPIO_Port, Float_Chamber2_max_Pin);
 800218c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002190:	4811      	ldr	r0, [pc, #68]	@ (80021d8 <waterManagement+0x7c>)
 8002192:	f001 fb97 	bl	80038c4 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	60bb      	str	r3, [r7, #8]
	//	int current_min_3 = HAL_GPIO_ReadPin(Float_Chamber3_min_GPIO_Port, Float_Chamber3_min_Pin);
	//	int current_max_3 = HAL_GPIO_ReadPin(Float_Chamber3_max_GPIO_Port, Float_Chamber3_max_Pin);
	int current_min_4 = HAL_GPIO_ReadPin(Float_Chamber4_min_GPIO_Port, Float_Chamber4_min_Pin);
 800219a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800219e:	480f      	ldr	r0, [pc, #60]	@ (80021dc <waterManagement+0x80>)
 80021a0:	f001 fb90 	bl	80038c4 <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	607b      	str	r3, [r7, #4]
	int current_max_4 = HAL_GPIO_ReadPin(Float_Chamber4_max_GPIO_Port, Float_Chamber4_max_Pin);
 80021a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021ac:	480b      	ldr	r0, [pc, #44]	@ (80021dc <waterManagement+0x80>)
 80021ae:	f001 fb89 	bl	80038c4 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	603b      	str	r3, [r7, #0]

	waterLevel_Chamber_1(current_min_1, current_max_1);
 80021b6:	6939      	ldr	r1, [r7, #16]
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f000 f811 	bl	80021e0 <waterLevel_Chamber_1>
	waterLevel_Chamber_2(current_min_2, current_max_2);
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f82b 	bl	800221c <waterLevel_Chamber_2>
	//	waterLevel_Chamber_3(current_min_3, current_max_3);
	waterLevel_Chamber_4(current_min_4, current_max_4);
 80021c6:	6839      	ldr	r1, [r7, #0]
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f845 	bl	8002258 <waterLevel_Chamber_4>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40020400 	.word	0x40020400
 80021dc:	40020000 	.word	0x40020000

080021e0 <waterLevel_Chamber_1>:

void waterLevel_Chamber_1(int chamberMin, int chamberMax){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	if(chamberMin == 0 && chamberMax == 0){
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <waterLevel_Chamber_1+0x20>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d104      	bne.n	8002200 <waterLevel_Chamber_1+0x20>
		HAL_GPIO_WritePin(Solenoid1_Output_GPIO_Port, Solenoid1_Output_Pin, 1);
 80021f6:	2201      	movs	r2, #1
 80021f8:	2120      	movs	r1, #32
 80021fa:	4807      	ldr	r0, [pc, #28]	@ (8002218 <waterLevel_Chamber_1+0x38>)
 80021fc:	f001 fb7a 	bl	80038f4 <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d104      	bne.n	8002210 <waterLevel_Chamber_1+0x30>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid1_Output_GPIO_Port, Solenoid1_Output_Pin, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2120      	movs	r1, #32
 800220a:	4803      	ldr	r0, [pc, #12]	@ (8002218 <waterLevel_Chamber_1+0x38>)
 800220c:	f001 fb72 	bl	80038f4 <HAL_GPIO_WritePin>
	}
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40020400 	.word	0x40020400

0800221c <waterLevel_Chamber_2>:

void waterLevel_Chamber_2(int chamberMin, int chamberMax){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	if(chamberMin == 0 && chamberMax == 0){
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <waterLevel_Chamber_2+0x20>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d104      	bne.n	800223c <waterLevel_Chamber_2+0x20>
		HAL_GPIO_WritePin(Solenoid2_Output_GPIO_Port, Solenoid2_Output_Pin, 1);
 8002232:	2201      	movs	r2, #1
 8002234:	2140      	movs	r1, #64	@ 0x40
 8002236:	4807      	ldr	r0, [pc, #28]	@ (8002254 <waterLevel_Chamber_2+0x38>)
 8002238:	f001 fb5c 	bl	80038f4 <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d104      	bne.n	800224c <waterLevel_Chamber_2+0x30>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid2_Output_GPIO_Port, Solenoid2_Output_Pin, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2140      	movs	r1, #64	@ 0x40
 8002246:	4803      	ldr	r0, [pc, #12]	@ (8002254 <waterLevel_Chamber_2+0x38>)
 8002248:	f001 fb54 	bl	80038f4 <HAL_GPIO_WritePin>
	}
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40020400 	.word	0x40020400

08002258 <waterLevel_Chamber_4>:
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid3_Output_GPIO_Port, Solenoid3_Output_Pin, 0);
	}
}

void waterLevel_Chamber_4(int chamberMin, int chamberMax){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	if(chamberMin == 0 && chamberMax == 0){
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <waterLevel_Chamber_4+0x22>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <waterLevel_Chamber_4+0x22>
		HAL_GPIO_WritePin(Solenoid4_Output_GPIO_Port, Solenoid4_Output_Pin, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002274:	4807      	ldr	r0, [pc, #28]	@ (8002294 <waterLevel_Chamber_4+0x3c>)
 8002276:	f001 fb3d 	bl	80038f4 <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <waterLevel_Chamber_4+0x34>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid4_Output_GPIO_Port, Solenoid4_Output_Pin, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002286:	4803      	ldr	r0, [pc, #12]	@ (8002294 <waterLevel_Chamber_4+0x3c>)
 8002288:	f001 fb34 	bl	80038f4 <HAL_GPIO_WritePin>
	}
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40020400 	.word	0x40020400

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800229c:	f7ff fec2 	bl	8002024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480c      	ldr	r0, [pc, #48]	@ (80022d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a2:	490d      	ldr	r1, [pc, #52]	@ (80022d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a4:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b8:	4c0a      	ldr	r4, [pc, #40]	@ (80022e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022c6:	f004 fb29 	bl	800691c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7fe ffd1 	bl	8001270 <main>
  bx  lr    
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022dc:	080095c8 	.word	0x080095c8
  ldr r2, =_sbss
 80022e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022e4:	20000a68 	.word	0x20000a68

080022e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_Init+0x40>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <HAL_Init+0x40>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	@ (800232c <HAL_Init+0x40>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 fd0d 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	200f      	movs	r0, #15
 800231c:	f000 f808 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff fc2e 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002338:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_InitTick+0x54>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_InitTick+0x58>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fd25 	bl	8002d9e <HAL_SYSTICK_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00e      	b.n	800237c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d80a      	bhi.n	800237a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f000 fced 	bl	8002d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002370:	4a06      	ldr	r2, [pc, #24]	@ (800238c <HAL_InitTick+0x5c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000008 	.word	0x20000008
 8002388:	20000010 	.word	0x20000010
 800238c:	2000000c 	.word	0x2000000c

08002390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_IncTick+0x20>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x24>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_IncTick+0x24>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000010 	.word	0x20000010
 80023b4:	20000918 	.word	0x20000918

080023b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_GetTick+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000918 	.word	0x20000918

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffde 	bl	80023b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000010 	.word	0x20000010

08002418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e033      	b.n	8002496 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fbca 	bl	8001bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	f043 0202 	orr.w	r2, r3, #2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fa96 	bl	800299c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
 8002486:	e001      	b.n	800248c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Start+0x1a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e097      	b.n	80025ea <HAL_ADC_Start+0x14a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d018      	beq.n	8002502 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e0:	4b45      	ldr	r3, [pc, #276]	@ (80025f8 <HAL_ADC_Start+0x158>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a45      	ldr	r2, [pc, #276]	@ (80025fc <HAL_ADC_Start+0x15c>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9a      	lsrs	r2, r3, #18
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d15f      	bne.n	80025d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800253a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254e:	d106      	bne.n	800255e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	f023 0206 	bic.w	r2, r3, #6
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44
 800255c:	e002      	b.n	8002564 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256c:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_ADC_Start+0x160>)
 800256e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002578:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d129      	bne.n	80025e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e020      	b.n	80025e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a16      	ldr	r2, [pc, #88]	@ (8002604 <HAL_ADC_Start+0x164>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d11b      	bne.n	80025e8 <HAL_ADC_Start+0x148>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d114      	bne.n	80025e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	e00b      	b.n	80025e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f043 0210 	orr.w	r2, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000008 	.word	0x20000008
 80025fc:	431bde83 	.word	0x431bde83
 8002600:	40012300 	.word	0x40012300
 8002604:	40012000 	.word	0x40012000

08002608 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002624:	d113      	bne.n	800264e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002634:	d10b      	bne.n	800264e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e063      	b.n	8002716 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800264e:	f7ff feb3 	bl	80023b8 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002654:	e021      	b.n	800269a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d01d      	beq.n	800269a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_ADC_PollForConversion+0x6c>
 8002664:	f7ff fea8 	bl	80023b8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d212      	bcs.n	800269a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d00b      	beq.n	800269a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f043 0204 	orr.w	r2, r3, #4
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e03d      	b.n	8002716 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d1d6      	bne.n	8002656 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0212 	mvn.w	r2, #18
 80026b0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d123      	bne.n	8002714 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11f      	bne.n	8002714 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1c>
 8002750:	2302      	movs	r3, #2
 8002752:	e113      	b.n	800297c <HAL_ADC_ConfigChannel+0x244>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b09      	cmp	r3, #9
 8002762:	d925      	bls.n	80027b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	3b1e      	subs	r3, #30
 800277a:	2207      	movs	r2, #7
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43da      	mvns	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	400a      	ands	r2, r1
 8002788:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68d9      	ldr	r1, [r3, #12]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	4603      	mov	r3, r0
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4403      	add	r3, r0
 80027a2:	3b1e      	subs	r3, #30
 80027a4:	409a      	lsls	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	e022      	b.n	80027f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	2207      	movs	r2, #7
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4403      	add	r3, r0
 80027ec:	409a      	lsls	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d824      	bhi.n	8002848 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b05      	subs	r3, #5
 8002810:	221f      	movs	r2, #31
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	400a      	ands	r2, r1
 800281e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	3b05      	subs	r3, #5
 800283a:	fa00 f203 	lsl.w	r2, r0, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	635a      	str	r2, [r3, #52]	@ 0x34
 8002846:	e04c      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d824      	bhi.n	800289a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	3b23      	subs	r3, #35	@ 0x23
 8002862:	221f      	movs	r2, #31
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43da      	mvns	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	400a      	ands	r2, r1
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	4618      	mov	r0, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b23      	subs	r3, #35	@ 0x23
 800288c:	fa00 f203 	lsl.w	r2, r0, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
 8002898:	e023      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	3b41      	subs	r3, #65	@ 0x41
 80028ac:	221f      	movs	r2, #31
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	400a      	ands	r2, r1
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4618      	mov	r0, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3b41      	subs	r3, #65	@ 0x41
 80028d6:	fa00 f203 	lsl.w	r2, r0, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e2:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <HAL_ADC_ConfigChannel+0x250>)
 80028e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a28      	ldr	r2, [pc, #160]	@ (800298c <HAL_ADC_ConfigChannel+0x254>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10f      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1d8>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b12      	cmp	r3, #18
 80028f6:	d10b      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1d      	ldr	r2, [pc, #116]	@ (800298c <HAL_ADC_ConfigChannel+0x254>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d12b      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x23a>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <HAL_ADC_ConfigChannel+0x258>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <HAL_ADC_ConfigChannel+0x1f4>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b11      	cmp	r3, #17
 800292a:	d122      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <HAL_ADC_ConfigChannel+0x258>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d111      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800294e:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <HAL_ADC_ConfigChannel+0x25c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a11      	ldr	r2, [pc, #68]	@ (8002998 <HAL_ADC_ConfigChannel+0x260>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	0c9a      	lsrs	r2, r3, #18
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002964:	e002      	b.n	800296c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3b01      	subs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f9      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40012300 	.word	0x40012300
 800298c:	40012000 	.word	0x40012000
 8002990:	10000012 	.word	0x10000012
 8002994:	20000008 	.word	0x20000008
 8002998:	431bde83 	.word	0x431bde83

0800299c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029a4:	4b79      	ldr	r3, [pc, #484]	@ (8002b8c <ADC_Init+0x1f0>)
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	021a      	lsls	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	4a58      	ldr	r2, [pc, #352]	@ (8002b90 <ADC_Init+0x1f4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6899      	ldr	r1, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e00f      	b.n	8002a9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a98:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0202 	bic.w	r2, r2, #2
 8002aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7e1b      	ldrb	r3, [r3, #24]
 8002ab4:	005a      	lsls	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01b      	beq.n	8002b00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ad6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ae6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	3b01      	subs	r3, #1
 8002af4:	035a      	lsls	r2, r3, #13
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	e007      	b.n	8002b10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b0e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	051a      	lsls	r2, r3, #20
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b52:	025a      	lsls	r2, r3, #9
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6899      	ldr	r1, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	029a      	lsls	r2, r3, #10
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40012300 	.word	0x40012300
 8002b90:	0f000001 	.word	0x0f000001

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4907      	ldr	r1, [pc, #28]	@ (8002c30 <__NVIC_EnableIRQ+0x38>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	@ (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	@ (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	@ 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff29 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5c:	f7ff ff3e 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7ff ff8e 	bl	8002c88 <NVIC_EncodePriority>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5d 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff31 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffa2 	bl	8002cf0 <SysTick_Config>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff faf8 	bl	80023b8 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e099      	b.n	8002f08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df4:	e00f      	b.n	8002e16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df6:	f7ff fadf 	bl	80023b8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d908      	bls.n	8002e16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e078      	b.n	8002f08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e8      	bne.n	8002df6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4b38      	ldr	r3, [pc, #224]	@ (8002f10 <HAL_DMA_Init+0x158>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d107      	bne.n	8002e80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0307 	bic.w	r3, r3, #7
 8002e96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d117      	bne.n	8002eda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fb01 	bl	80034c4 <DMA_CheckFifoParam>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e016      	b.n	8002f08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fab8 	bl	8003458 <DMA_CalcBaseAndBitshift>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef0:	223f      	movs	r2, #63	@ 0x3f
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	f010803f 	.word	0xf010803f

08002f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_DMA_Start_IT+0x26>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e040      	b.n	8002fbc <HAL_DMA_Start_IT+0xa8>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d12f      	bne.n	8002fae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fa4a 	bl	80033fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	223f      	movs	r2, #63	@ 0x3f
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0216 	orr.w	r2, r2, #22
 8002f82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0208 	orr.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e005      	b.n	8002fba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fd2:	f7ff f9f1 	bl	80023b8 <HAL_GetTick>
 8002fd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d008      	beq.n	8002ff6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2280      	movs	r2, #128	@ 0x80
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e052      	b.n	800309c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0216 	bic.w	r2, r2, #22
 8003004:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003014:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <HAL_DMA_Abort+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0208 	bic.w	r2, r2, #8
 8003034:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003046:	e013      	b.n	8003070 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003048:	f7ff f9b6 	bl	80023b8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b05      	cmp	r3, #5
 8003054:	d90c      	bls.n	8003070 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2203      	movs	r2, #3
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e015      	b.n	800309c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e4      	bne.n	8003048 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003082:	223f      	movs	r2, #63	@ 0x3f
 8003084:	409a      	lsls	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	@ 0x80
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00c      	b.n	80030dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2205      	movs	r2, #5
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003330 <HAL_DMA_IRQHandler+0x248>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003334 <HAL_DMA_IRQHandler+0x24c>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0a9b      	lsrs	r3, r3, #10
 8003100:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	2208      	movs	r2, #8
 8003114:	409a      	lsls	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01a      	beq.n	8003154 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	2208      	movs	r2, #8
 8003142:	409a      	lsls	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	2201      	movs	r2, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d012      	beq.n	800318a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2201      	movs	r2, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0202 	orr.w	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	2204      	movs	r2, #4
 8003190:	409a      	lsls	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d012      	beq.n	80031c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	2204      	movs	r2, #4
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f043 0204 	orr.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	2210      	movs	r2, #16
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d043      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d03c      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	2210      	movs	r2, #16
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d018      	beq.n	800322a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d024      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
 8003216:	e01f      	b.n	8003258 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
 8003228:	e016      	b.n	8003258 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0208 	bic.w	r2, r2, #8
 8003246:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	2220      	movs	r2, #32
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 808f 	beq.w	8003388 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8087 	beq.w	8003388 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	2220      	movs	r2, #32
 8003280:	409a      	lsls	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b05      	cmp	r3, #5
 8003290:	d136      	bne.n	8003300 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0216 	bic.w	r2, r2, #22
 80032a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <HAL_DMA_IRQHandler+0x1da>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0208 	bic.w	r2, r2, #8
 80032d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	223f      	movs	r2, #63	@ 0x3f
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d07e      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
        }
        return;
 80032fe:	e079      	b.n	80033f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01d      	beq.n	800334a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	2b00      	cmp	r3, #0
 8003322:	d031      	beq.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
 800332c:	e02c      	b.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
 800332e:	bf00      	nop
 8003330:	20000008 	.word	0x20000008
 8003334:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d023      	beq.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
 8003348:	e01e      	b.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10f      	bne.n	8003378 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0210 	bic.w	r2, r2, #16
 8003366:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338c:	2b00      	cmp	r3, #0
 800338e:	d032      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2205      	movs	r2, #5
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d307      	bcc.n	80033d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f2      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x2cc>
 80033ce:	e000      	b.n	80033d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
 80033f2:	e000      	b.n	80033f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033f4:	bf00      	nop
    }
  }
}
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b40      	cmp	r3, #64	@ 0x40
 8003428:	d108      	bne.n	800343c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800343a:	e007      	b.n	800344c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3b10      	subs	r3, #16
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <DMA_CalcBaseAndBitshift+0x64>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003472:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d909      	bls.n	800349a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	1d1a      	adds	r2, r3, #4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	659a      	str	r2, [r3, #88]	@ 0x58
 8003498:	e007      	b.n	80034aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	aaaaaaab 	.word	0xaaaaaaab
 80034c0:	0800923c 	.word	0x0800923c

080034c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11f      	bne.n	800351e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d856      	bhi.n	8003592 <DMA_CheckFifoParam+0xce>
 80034e4:	a201      	add	r2, pc, #4	@ (adr r2, 80034ec <DMA_CheckFifoParam+0x28>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	0800350f 	.word	0x0800350f
 80034f4:	080034fd 	.word	0x080034fd
 80034f8:	08003593 	.word	0x08003593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d046      	beq.n	8003596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e043      	b.n	8003596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003516:	d140      	bne.n	800359a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351c:	e03d      	b.n	800359a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003526:	d121      	bne.n	800356c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d837      	bhi.n	800359e <DMA_CheckFifoParam+0xda>
 800352e:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <DMA_CheckFifoParam+0x70>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003545 	.word	0x08003545
 8003538:	0800354b 	.word	0x0800354b
 800353c:	08003545 	.word	0x08003545
 8003540:	0800355d 	.word	0x0800355d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      break;
 8003548:	e030      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d025      	beq.n	80035a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355a:	e022      	b.n	80035a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003564:	d11f      	bne.n	80035a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800356a:	e01c      	b.n	80035a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d903      	bls.n	800357a <DMA_CheckFifoParam+0xb6>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d003      	beq.n	8003580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003578:	e018      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
      break;
 800357e:	e015      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      break;
 8003590:	e00b      	b.n	80035aa <DMA_CheckFifoParam+0xe6>
      break;
 8003592:	bf00      	nop
 8003594:	e00a      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
 8003598:	e008      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 800359a:	bf00      	nop
 800359c:	e006      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
 80035a0:	e004      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;   
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <DMA_CheckFifoParam+0xe8>
      break;
 80035aa:	bf00      	nop
    }
  } 
  
  return status; 
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	@ 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e159      	b.n	800388c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d8:	2201      	movs	r2, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	f040 8148 	bne.w	8003886 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d005      	beq.n	800360e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800360a:	2b02      	cmp	r3, #2
 800360c:	d130      	bne.n	8003670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 0201 	and.w	r2, r3, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b03      	cmp	r3, #3
 800367a:	d017      	beq.n	80036ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d123      	bne.n	8003700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	08da      	lsrs	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3208      	adds	r2, #8
 80036fa:	69b9      	ldr	r1, [r7, #24]
 80036fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a2 	beq.w	8003886 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b57      	ldr	r3, [pc, #348]	@ (80038a4 <HAL_GPIO_Init+0x2e8>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4a56      	ldr	r2, [pc, #344]	@ (80038a4 <HAL_GPIO_Init+0x2e8>)
 800374c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003750:	6453      	str	r3, [r2, #68]	@ 0x44
 8003752:	4b54      	ldr	r3, [pc, #336]	@ (80038a4 <HAL_GPIO_Init+0x2e8>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800375e:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_GPIO_Init+0x2ec>)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	3302      	adds	r3, #2
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	220f      	movs	r2, #15
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a49      	ldr	r2, [pc, #292]	@ (80038ac <HAL_GPIO_Init+0x2f0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d019      	beq.n	80037be <HAL_GPIO_Init+0x202>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a48      	ldr	r2, [pc, #288]	@ (80038b0 <HAL_GPIO_Init+0x2f4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_GPIO_Init+0x1fe>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a47      	ldr	r2, [pc, #284]	@ (80038b4 <HAL_GPIO_Init+0x2f8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00d      	beq.n	80037b6 <HAL_GPIO_Init+0x1fa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a46      	ldr	r2, [pc, #280]	@ (80038b8 <HAL_GPIO_Init+0x2fc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_GPIO_Init+0x1f6>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a45      	ldr	r2, [pc, #276]	@ (80038bc <HAL_GPIO_Init+0x300>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_GPIO_Init+0x1f2>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e008      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037ae:	2307      	movs	r3, #7
 80037b0:	e006      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037b2:	2303      	movs	r3, #3
 80037b4:	e004      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e002      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_GPIO_Init+0x204>
 80037be:	2300      	movs	r3, #0
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f002 0203 	and.w	r2, r2, #3
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	4093      	lsls	r3, r2
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037d0:	4935      	ldr	r1, [pc, #212]	@ (80038a8 <HAL_GPIO_Init+0x2ec>)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	3302      	adds	r3, #2
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037de:	4b38      	ldr	r3, [pc, #224]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003802:	4a2f      	ldr	r2, [pc, #188]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003808:	4b2d      	ldr	r3, [pc, #180]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800382c:	4a24      	ldr	r2, [pc, #144]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003832:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003856:	4a1a      	ldr	r2, [pc, #104]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003880:	4a0f      	ldr	r2, [pc, #60]	@ (80038c0 <HAL_GPIO_Init+0x304>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3301      	adds	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	f67f aea2 	bls.w	80035d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3724      	adds	r7, #36	@ 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40020000 	.word	0x40020000
 80038b0:	40020400 	.word	0x40020400
 80038b4:	40020800 	.word	0x40020800
 80038b8:	40020c00 	.word	0x40020c00
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	e001      	b.n	80038e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e12b      	b.n	8003b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe f982 	bl	8001c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	@ 0x24
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800397a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800398a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800398c:	f001 f8aa 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8003990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4a81      	ldr	r2, [pc, #516]	@ (8003b9c <HAL_I2C_Init+0x274>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d807      	bhi.n	80039ac <HAL_I2C_Init+0x84>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a80      	ldr	r2, [pc, #512]	@ (8003ba0 <HAL_I2C_Init+0x278>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	bf94      	ite	ls
 80039a4:	2301      	movls	r3, #1
 80039a6:	2300      	movhi	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e006      	b.n	80039ba <HAL_I2C_Init+0x92>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba4 <HAL_I2C_Init+0x27c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	bf94      	ite	ls
 80039b4:	2301      	movls	r3, #1
 80039b6:	2300      	movhi	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0e7      	b.n	8003b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4a78      	ldr	r2, [pc, #480]	@ (8003ba8 <HAL_I2C_Init+0x280>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	0c9b      	lsrs	r3, r3, #18
 80039cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b9c <HAL_I2C_Init+0x274>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d802      	bhi.n	80039fc <HAL_I2C_Init+0xd4>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3301      	adds	r3, #1
 80039fa:	e009      	b.n	8003a10 <HAL_I2C_Init+0xe8>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	4a69      	ldr	r2, [pc, #420]	@ (8003bac <HAL_I2C_Init+0x284>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	3301      	adds	r3, #1
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	495c      	ldr	r1, [pc, #368]	@ (8003b9c <HAL_I2C_Init+0x274>)
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d819      	bhi.n	8003a64 <HAL_I2C_Init+0x13c>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e59      	subs	r1, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a3e:	1c59      	adds	r1, r3, #1
 8003a40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a44:	400b      	ands	r3, r1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_I2C_Init+0x138>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e59      	subs	r1, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	e051      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003a60:	2304      	movs	r3, #4
 8003a62:	e04f      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d111      	bne.n	8003a90 <HAL_I2C_Init+0x168>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e58      	subs	r0, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e012      	b.n	8003ab6 <HAL_I2C_Init+0x18e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	0099      	lsls	r1, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Init+0x196>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e022      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_I2C_Init+0x1bc>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1e58      	subs	r0, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	440b      	add	r3, r1
 8003ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae2:	e00f      	b.n	8003b04 <HAL_I2C_Init+0x1dc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1e58      	subs	r0, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	6809      	ldr	r1, [r1, #0]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6911      	ldr	r1, [r2, #16]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	4311      	orrs	r1, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	000186a0 	.word	0x000186a0
 8003ba0:	001e847f 	.word	0x001e847f
 8003ba4:	003d08ff 	.word	0x003d08ff
 8003ba8:	431bde83 	.word	0x431bde83
 8003bac:	10624dd3 	.word	0x10624dd3

08003bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	817b      	strh	r3, [r7, #10]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	813b      	strh	r3, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bca:	f7fe fbf5 	bl	80023b8 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 80d9 	bne.w	8003d90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2319      	movs	r3, #25
 8003be4:	2201      	movs	r2, #1
 8003be6:	496d      	ldr	r1, [pc, #436]	@ (8003d9c <HAL_I2C_Mem_Write+0x1ec>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f971 	bl	8003ed0 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0cc      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_Mem_Write+0x56>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0c5      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d007      	beq.n	8003c2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2221      	movs	r2, #33	@ 0x21
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	@ 0x40
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8003da0 <HAL_I2C_Mem_Write+0x1f0>)
 8003c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6e:	88f8      	ldrh	r0, [r7, #6]
 8003c70:	893a      	ldrh	r2, [r7, #8]
 8003c72:	8979      	ldrh	r1, [r7, #10]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f890 	bl	8003da4 <I2C_RequestMemoryWrite>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d052      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e081      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa36 	bl	8004104 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d107      	bne.n	8003cb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06b      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d11b      	bne.n	8003d30 <HAL_I2C_Mem_Write+0x180>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1aa      	bne.n	8003c8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fa29 	bl	8004194 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d107      	bne.n	8003d60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e016      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	00100002 	.word	0x00100002
 8003da0:	ffff0000 	.word	0xffff0000

08003da4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	460b      	mov	r3, r1
 8003db8:	813b      	strh	r3, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f878 	bl	8003ed0 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df4:	d103      	bne.n	8003dfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e05f      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	492d      	ldr	r1, [pc, #180]	@ (8003ecc <I2C_RequestMemoryWrite+0x128>)
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f8d3 	bl	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e04c      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e40:	6a39      	ldr	r1, [r7, #32]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f95e 	bl	8004104 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d107      	bne.n	8003e66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e02b      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]
 8003e7a:	e021      	b.n	8003ec0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e7c:	893b      	ldrh	r3, [r7, #8]
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f938 	bl	8004104 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e005      	b.n	8003ec2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb6:	893b      	ldrh	r3, [r7, #8]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	00010002 	.word	0x00010002

08003ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee0:	e048      	b.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d044      	beq.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fa65 	bl	80023b8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d139      	bne.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10d      	bne.n	8003f26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	e00c      	b.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d116      	bne.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e023      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10d      	bne.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	43da      	mvns	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	e00c      	b.n	8003fb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	43da      	mvns	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d093      	beq.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd2:	e071      	b.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe2:	d123      	bne.n	800402c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e067      	b.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d041      	beq.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004034:	f7fe f9c0 	bl	80023b8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d302      	bcc.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d136      	bne.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10c      	bne.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e00b      	b.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e021      	b.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10c      	bne.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	43da      	mvns	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e00b      	b.n	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f47f af6d 	bne.w	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004110:	e034      	b.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f886 	bl	8004224 <I2C_IsAcknowledgeFailed>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e034      	b.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d028      	beq.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fe f945 	bl	80023b8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11d      	bne.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414a:	2b80      	cmp	r3, #128	@ 0x80
 800414c:	d016      	beq.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e007      	b.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	2b80      	cmp	r3, #128	@ 0x80
 8004188:	d1c3      	bne.n	8004112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a0:	e034      	b.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f83e 	bl	8004224 <I2C_IsAcknowledgeFailed>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e034      	b.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d028      	beq.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fe f8fd 	bl	80023b8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d11d      	bne.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d016      	beq.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e007      	b.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d1c3      	bne.n	80041a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423a:	d11b      	bne.n	8004274 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004244:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e267      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d075      	beq.n	800438e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a2:	4b88      	ldr	r3, [pc, #544]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d00c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ae:	4b85      	ldr	r3, [pc, #532]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d112      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ba:	4b82      	ldr	r3, [pc, #520]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4b7e      	ldr	r3, [pc, #504]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05b      	beq.n	800438c <HAL_RCC_OscConfig+0x108>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d157      	bne.n	800438c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e242      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCC_OscConfig+0x74>
 80042ea:	4b76      	ldr	r3, [pc, #472]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a75      	ldr	r2, [pc, #468]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e01d      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x98>
 8004302:	4b70      	ldr	r3, [pc, #448]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6f      	ldr	r2, [pc, #444]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b6d      	ldr	r3, [pc, #436]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6c      	ldr	r2, [pc, #432]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 800431c:	4b69      	ldr	r3, [pc, #420]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a68      	ldr	r2, [pc, #416]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b66      	ldr	r3, [pc, #408]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 800432e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe f83c 	bl	80023b8 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe f838 	bl	80023b8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	@ 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e207      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b5b      	ldr	r3, [pc, #364]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0xc0>
 8004362:	e014      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fe f828 	bl	80023b8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436c:	f7fe f824 	bl	80023b8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	@ 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1f3      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	4b51      	ldr	r3, [pc, #324]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0xe8>
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d063      	beq.n	8004462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439a:	4b4a      	ldr	r3, [pc, #296]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a6:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11c      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b44      	ldr	r3, [pc, #272]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d116      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	4b41      	ldr	r3, [pc, #260]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e1c7      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d6:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4937      	ldr	r1, [pc, #220]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	e03a      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f4:	4b34      	ldr	r3, [pc, #208]	@ (80044c8 <HAL_RCC_OscConfig+0x244>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd ffdd 	bl	80023b8 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004402:	f7fd ffd9 	bl	80023b8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e1a8      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	4b2b      	ldr	r3, [pc, #172]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	4b28      	ldr	r3, [pc, #160]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4925      	ldr	r1, [pc, #148]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
 8004434:	e015      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	4b24      	ldr	r3, [pc, #144]	@ (80044c8 <HAL_RCC_OscConfig+0x244>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd ffbc 	bl	80023b8 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004444:	f7fd ffb8 	bl	80023b8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e187      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d036      	beq.n	80044dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004476:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <HAL_RCC_OscConfig+0x248>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd ff9c 	bl	80023b8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004484:	f7fd ff98 	bl	80023b8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e167      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x200>
 80044a2:	e01b      	b.n	80044dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <HAL_RCC_OscConfig+0x248>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044aa:	f7fd ff85 	bl	80023b8 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	e00e      	b.n	80044d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fd ff81 	bl	80023b8 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d907      	bls.n	80044d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e150      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
 80044c4:	40023800 	.word	0x40023800
 80044c8:	42470000 	.word	0x42470000
 80044cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ea      	bne.n	80044b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8097 	beq.w	8004618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ee:	4b81      	ldr	r3, [pc, #516]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	4b7d      	ldr	r3, [pc, #500]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	4a7c      	ldr	r2, [pc, #496]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004508:	6413      	str	r3, [r2, #64]	@ 0x40
 800450a:	4b7a      	ldr	r3, [pc, #488]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b77      	ldr	r3, [pc, #476]	@ (80046f8 <HAL_RCC_OscConfig+0x474>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004526:	4b74      	ldr	r3, [pc, #464]	@ (80046f8 <HAL_RCC_OscConfig+0x474>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a73      	ldr	r2, [pc, #460]	@ (80046f8 <HAL_RCC_OscConfig+0x474>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fd ff41 	bl	80023b8 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fd ff3d 	bl	80023b8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e10c      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b6a      	ldr	r3, [pc, #424]	@ (80046f8 <HAL_RCC_OscConfig+0x474>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x2ea>
 8004560:	4b64      	ldr	r3, [pc, #400]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	4a63      	ldr	r2, [pc, #396]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	@ 0x70
 800456c:	e01c      	b.n	80045a8 <HAL_RCC_OscConfig+0x324>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b05      	cmp	r3, #5
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x30c>
 8004576:	4b5f      	ldr	r3, [pc, #380]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457a:	4a5e      	ldr	r2, [pc, #376]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	6713      	str	r3, [r2, #112]	@ 0x70
 8004582:	4b5c      	ldr	r3, [pc, #368]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	4a5b      	ldr	r2, [pc, #364]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6713      	str	r3, [r2, #112]	@ 0x70
 800458e:	e00b      	b.n	80045a8 <HAL_RCC_OscConfig+0x324>
 8004590:	4b58      	ldr	r3, [pc, #352]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004594:	4a57      	ldr	r2, [pc, #348]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	@ 0x70
 800459c:	4b55      	ldr	r3, [pc, #340]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a54      	ldr	r2, [pc, #336]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f023 0304 	bic.w	r3, r3, #4
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fd ff02 	bl	80023b8 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b8:	f7fd fefe 	bl	80023b8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e0cb      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ce:	4b49      	ldr	r3, [pc, #292]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ee      	beq.n	80045b8 <HAL_RCC_OscConfig+0x334>
 80045da:	e014      	b.n	8004606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7fd feec 	bl	80023b8 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fd fee8 	bl	80023b8 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0b5      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fa:	4b3e      	ldr	r3, [pc, #248]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ee      	bne.n	80045e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004606:	7dfb      	ldrb	r3, [r7, #23]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460c:	4b39      	ldr	r3, [pc, #228]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	4a38      	ldr	r2, [pc, #224]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a1 	beq.w	8004764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004622:	4b34      	ldr	r3, [pc, #208]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b08      	cmp	r3, #8
 800462c:	d05c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d141      	bne.n	80046ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004636:	4b31      	ldr	r3, [pc, #196]	@ (80046fc <HAL_RCC_OscConfig+0x478>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fd febc 	bl	80023b8 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd feb8 	bl	80023b8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e087      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	019b      	lsls	r3, r3, #6
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	3b01      	subs	r3, #1
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	491b      	ldr	r1, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468c:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <HAL_RCC_OscConfig+0x478>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fd fe91 	bl	80023b8 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469a:	f7fd fe8d 	bl	80023b8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e05c      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ac:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x416>
 80046b8:	e054      	b.n	8004764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b10      	ldr	r3, [pc, #64]	@ (80046fc <HAL_RCC_OscConfig+0x478>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fd fe7a 	bl	80023b8 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd fe76 	bl	80023b8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e045      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_RCC_OscConfig+0x470>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x444>
 80046e6:	e03d      	b.n	8004764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e038      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40007000 	.word	0x40007000
 80046fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004700:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <HAL_RCC_OscConfig+0x4ec>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d028      	beq.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d121      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d11a      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004738:	4293      	cmp	r3, r2
 800473a:	d111      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0cc      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b68      	ldr	r3, [pc, #416]	@ (800492c <HAL_RCC_ClockConfig+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d90c      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b65      	ldr	r3, [pc, #404]	@ (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	@ (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a58      	ldr	r2, [pc, #352]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d044      	beq.n	8004894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d119      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d003      	beq.n	8004832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482e:	2b03      	cmp	r3, #3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b3f      	ldr	r3, [pc, #252]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b3b      	ldr	r3, [pc, #236]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e067      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004852:	4b37      	ldr	r3, [pc, #220]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4934      	ldr	r1, [pc, #208]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fd fda8 	bl	80023b8 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fd fda4 	bl	80023b8 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e04f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2b      	ldr	r3, [pc, #172]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 020c 	and.w	r2, r3, #12
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1eb      	bne.n	800486c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b25      	ldr	r3, [pc, #148]	@ (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d20c      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b22      	ldr	r3, [pc, #136]	@ (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	@ (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e6:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f821 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490a      	ldr	r1, [pc, #40]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fd08 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023c00 	.word	0x40023c00
 8004930:	40023800 	.word	0x40023800
 8004934:	08009224 	.word	0x08009224
 8004938:	20000008 	.word	0x20000008
 800493c:	2000000c 	.word	0x2000000c

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004944:	b090      	sub	sp, #64	@ 0x40
 8004946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
 800494c:	2300      	movs	r3, #0
 800494e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004950:	2300      	movs	r3, #0
 8004952:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004958:	4b59      	ldr	r3, [pc, #356]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b08      	cmp	r3, #8
 8004962:	d00d      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x40>
 8004964:	2b08      	cmp	r3, #8
 8004966:	f200 80a1 	bhi.w	8004aac <HAL_RCC_GetSysClockFreq+0x16c>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x34>
 800496e:	2b04      	cmp	r3, #4
 8004970:	d003      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0x3a>
 8004972:	e09b      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b53      	ldr	r3, [pc, #332]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004976:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004978:	e09b      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497a:	4b53      	ldr	r3, [pc, #332]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800497e:	e098      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004980:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004988:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d028      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004996:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	099b      	lsrs	r3, r3, #6
 800499c:	2200      	movs	r2, #0
 800499e:	623b      	str	r3, [r7, #32]
 80049a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049a8:	2100      	movs	r1, #0
 80049aa:	4b47      	ldr	r3, [pc, #284]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80049ac:	fb03 f201 	mul.w	r2, r3, r1
 80049b0:	2300      	movs	r3, #0
 80049b2:	fb00 f303 	mul.w	r3, r0, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	4a43      	ldr	r2, [pc, #268]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80049ba:	fba0 1202 	umull	r1, r2, r0, r2
 80049be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049c0:	460a      	mov	r2, r1
 80049c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c6:	4413      	add	r3, r2
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049cc:	2200      	movs	r2, #0
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049da:	f7fc f93d 	bl	8000c58 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4613      	mov	r3, r2
 80049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e6:	e053      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e8:	4b35      	ldr	r3, [pc, #212]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	2200      	movs	r2, #0
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	617a      	str	r2, [r7, #20]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049fa:	f04f 0b00 	mov.w	fp, #0
 80049fe:	4652      	mov	r2, sl
 8004a00:	465b      	mov	r3, fp
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	0159      	lsls	r1, r3, #5
 8004a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a10:	0150      	lsls	r0, r2, #5
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	ebb2 080a 	subs.w	r8, r2, sl
 8004a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a32:	ebb2 0408 	subs.w	r4, r2, r8
 8004a36:	eb63 0509 	sbc.w	r5, r3, r9
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	00eb      	lsls	r3, r5, #3
 8004a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a48:	00e2      	lsls	r2, r4, #3
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	461d      	mov	r5, r3
 8004a4e:	eb14 030a 	adds.w	r3, r4, sl
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	eb45 030b 	adc.w	r3, r5, fp
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a66:	4629      	mov	r1, r5
 8004a68:	028b      	lsls	r3, r1, #10
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a70:	4621      	mov	r1, r4
 8004a72:	028a      	lsls	r2, r1, #10
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	60fa      	str	r2, [r7, #12]
 8004a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a84:	f7fc f8e8 	bl	8000c58 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004aa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004aaa:	e002      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aac:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3740      	adds	r7, #64	@ 0x40
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	00f42400 	.word	0x00f42400
 8004ac8:	017d7840 	.word	0x017d7840

08004acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad0:	4b03      	ldr	r3, [pc, #12]	@ (8004ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000008 	.word	0x20000008

08004ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae8:	f7ff fff0 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0a9b      	lsrs	r3, r3, #10
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4903      	ldr	r1, [pc, #12]	@ (8004b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	08009234 	.word	0x08009234

08004b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b10:	f7ff ffdc 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0b5b      	lsrs	r3, r3, #13
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4903      	ldr	r1, [pc, #12]	@ (8004b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b22:	5ccb      	ldrb	r3, [r1, r3]
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	08009234 	.word	0x08009234

08004b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e042      	b.n	8004bcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd f8d6 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	@ 0x24
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fe6b 	bl	8005854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d112      	bne.n	8004c14 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_UART_Receive_DMA+0x26>
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e00b      	b.n	8004c16 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	461a      	mov	r2, r3
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fbc2 	bl	8005394 <UART_Start_Receive_DMA>
 8004c10:	4603      	mov	r3, r0
 8004c12:	e000      	b.n	8004c16 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
  }
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b0ba      	sub	sp, #232	@ 0xe8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_UART_IRQHandler+0x66>
 8004c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fd29 	bl	80056d6 <UART_Receive_IT>
      return;
 8004c84:	e25b      	b.n	800513e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80de 	beq.w	8004e4c <HAL_UART_IRQHandler+0x22c>
 8004c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80d1 	beq.w	8004e4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_UART_IRQHandler+0xae>
 8004cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_UART_IRQHandler+0xd2>
 8004cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	f043 0202 	orr.w	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <HAL_UART_IRQHandler+0xf6>
 8004cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	f043 0204 	orr.w	r2, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d011      	beq.n	8004d46 <HAL_UART_IRQHandler+0x126>
 8004d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d105      	bne.n	8004d3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0208 	orr.w	r2, r3, #8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 81f2 	beq.w	8005134 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_UART_IRQHandler+0x14e>
 8004d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fcb4 	bl	80056d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d78:	2b40      	cmp	r3, #64	@ 0x40
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <HAL_UART_IRQHandler+0x17a>
 8004d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d04f      	beq.n	8004e3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fbbc 	bl	8005518 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d141      	bne.n	8004e32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3314      	adds	r3, #20
 8004db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3314      	adds	r3, #20
 8004dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1d9      	bne.n	8004dae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d013      	beq.n	8004e2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e06:	4a7e      	ldr	r2, [pc, #504]	@ (8005000 <HAL_UART_IRQHandler+0x3e0>)
 8004e08:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe f948 	bl	80030a4 <HAL_DMA_Abort_IT>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e24:	4610      	mov	r0, r2
 8004e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	e00e      	b.n	8004e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f99e 	bl	800516c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e30:	e00a      	b.n	8004e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f99a 	bl	800516c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	e006      	b.n	8004e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f996 	bl	800516c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e46:	e175      	b.n	8005134 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	bf00      	nop
    return;
 8004e4a:	e173      	b.n	8005134 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	f040 814f 	bne.w	80050f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8148 	beq.w	80050f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8141 	beq.w	80050f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e72:	2300      	movs	r3, #0
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e92:	2b40      	cmp	r3, #64	@ 0x40
 8004e94:	f040 80b6 	bne.w	8005004 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8145 	beq.w	8005138 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	f080 813e 	bcs.w	8005138 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ece:	f000 8088 	beq.w	8004fe2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004efe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1d9      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e1      	bne.n	8004f1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3314      	adds	r3, #20
 8004f60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e3      	bne.n	8004f5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb2:	f023 0310 	bic.w	r3, r3, #16
 8004fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fc6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e3      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fd fff1 	bl	8002fc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8c1 	bl	8005180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ffe:	e09b      	b.n	8005138 <HAL_UART_IRQHandler+0x518>
 8005000:	080055df 	.word	0x080055df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800500c:	b29b      	uxth	r3, r3
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 808e 	beq.w	800513c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8089 	beq.w	800513c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800503a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800503c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800504e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005050:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800505c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e3      	bne.n	800502a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3314      	adds	r3, #20
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	623b      	str	r3, [r7, #32]
   return(result);
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3314      	adds	r3, #20
 8005082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005086:	633a      	str	r2, [r7, #48]	@ 0x30
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e3      	bne.n	8005062 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0310 	bic.w	r3, r3, #16
 80050be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050cc:	61fa      	str	r2, [r7, #28]
 80050ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	617b      	str	r3, [r7, #20]
   return(result);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f847 	bl	8005180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050f2:	e023      	b.n	800513c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d009      	beq.n	8005114 <HAL_UART_IRQHandler+0x4f4>
 8005100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fa7a 	bl	8005606 <UART_Transmit_IT>
    return;
 8005112:	e014      	b.n	800513e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00e      	beq.n	800513e <HAL_UART_IRQHandler+0x51e>
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 faba 	bl	80056a6 <UART_EndTransmit_IT>
    return;
 8005132:	e004      	b.n	800513e <HAL_UART_IRQHandler+0x51e>
    return;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <HAL_UART_IRQHandler+0x51e>
      return;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_UART_IRQHandler+0x51e>
      return;
 800513c:	bf00      	nop
  }
}
 800513e:	37e8      	adds	r7, #232	@ 0xe8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b09c      	sub	sp, #112	@ 0x70
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d172      	bne.n	800529a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80051b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051b6:	2200      	movs	r2, #0
 80051b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80051da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e5      	bne.n	80051ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	667b      	str	r3, [r7, #100]	@ 0x64
 8005206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800520e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800521c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e5      	bne.n	80051ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3314      	adds	r3, #20
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	623b      	str	r3, [r7, #32]
   return(result);
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005238:	663b      	str	r3, [r7, #96]	@ 0x60
 800523a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005242:	633a      	str	r2, [r7, #48]	@ 0x30
 8005244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e5      	bne.n	8005222 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005258:	2220      	movs	r2, #32
 800525a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	2b01      	cmp	r3, #1
 8005264:	d119      	bne.n	800529a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	60fb      	str	r3, [r7, #12]
   return(result);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f023 0310 	bic.w	r3, r3, #16
 800527c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800527e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005286:	61fa      	str	r2, [r7, #28]
 8005288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	69b9      	ldr	r1, [r7, #24]
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	617b      	str	r3, [r7, #20]
   return(result);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800529a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800529c:	2200      	movs	r2, #0
 800529e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052ac:	4619      	mov	r1, r3
 80052ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80052b0:	f7ff ff66 	bl	8005180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052b4:	e002      	b.n	80052bc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80052b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80052b8:	f7fb ffba 	bl	8001230 <HAL_UART_RxCpltCallback>
}
 80052bc:	bf00      	nop
 80052be:	3770      	adds	r7, #112	@ 0x70
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d108      	bne.n	80052f2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	4619      	mov	r1, r3
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff ff48 	bl	8005180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052f0:	e002      	b.n	80052f8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff ff30 	bl	8005158 <HAL_UART_RxHalfCpltCallback>
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005310:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531c:	2b80      	cmp	r3, #128	@ 0x80
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b21      	cmp	r3, #33	@ 0x21
 8005332:	d108      	bne.n	8005346 <UART_DMAError+0x46>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005340:	68b8      	ldr	r0, [r7, #8]
 8005342:	f000 f8c1 	bl	80054c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b40      	cmp	r3, #64	@ 0x40
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b22      	cmp	r3, #34	@ 0x22
 8005366:	d108      	bne.n	800537a <UART_DMAError+0x7a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005374:	68b8      	ldr	r0, [r7, #8]
 8005376:	f000 f8cf 	bl	8005518 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537e:	f043 0210 	orr.w	r2, r3, #16
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005386:	68b8      	ldr	r0, [r7, #8]
 8005388:	f7ff fef0 	bl	800516c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b098      	sub	sp, #96	@ 0x60
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2222      	movs	r2, #34	@ 0x22
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c0:	4a3e      	ldr	r2, [pc, #248]	@ (80054bc <UART_Start_Receive_DMA+0x128>)
 80053c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c8:	4a3d      	ldr	r2, [pc, #244]	@ (80054c0 <UART_Start_Receive_DMA+0x12c>)
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	4a3c      	ldr	r2, [pc, #240]	@ (80054c4 <UART_Start_Receive_DMA+0x130>)
 80053d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	2200      	movs	r2, #0
 80053da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	f7fd fd8e 	bl	8002f14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d019      	beq.n	800544a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800542c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005436:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005438:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800543c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800545a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	657b      	str	r3, [r7, #84]	@ 0x54
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800546a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005470:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e5      	bne.n	800544a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3314      	adds	r3, #20
 8005484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	617b      	str	r3, [r7, #20]
   return(result);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005494:	653b      	str	r3, [r7, #80]	@ 0x50
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3314      	adds	r3, #20
 800549c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800549e:	627a      	str	r2, [r7, #36]	@ 0x24
 80054a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6a39      	ldr	r1, [r7, #32]
 80054a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e5      	bne.n	800547e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3760      	adds	r7, #96	@ 0x60
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	08005199 	.word	0x08005199
 80054c0:	080052c5 	.word	0x080052c5
 80054c4:	08005301 	.word	0x08005301

080054c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b089      	sub	sp, #36	@ 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	61ba      	str	r2, [r7, #24]
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	613b      	str	r3, [r7, #16]
   return(result);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800550c:	bf00      	nop
 800550e:	3724      	adds	r7, #36	@ 0x24
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b095      	sub	sp, #84	@ 0x54
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005540:	643a      	str	r2, [r7, #64]	@ 0x40
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005546:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	61fb      	str	r3, [r7, #28]
   return(result);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005574:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800557a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	2b01      	cmp	r3, #1
 800558e:	d119      	bne.n	80055c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0310 	bic.w	r3, r3, #16
 80055a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b0:	61ba      	str	r2, [r7, #24]
 80055b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6979      	ldr	r1, [r7, #20]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	613b      	str	r3, [r7, #16]
   return(result);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055d2:	bf00      	nop
 80055d4:	3754      	adds	r7, #84	@ 0x54
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff fdb7 	bl	800516c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b21      	cmp	r3, #33	@ 0x21
 8005618:	d13e      	bne.n	8005698 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005622:	d114      	bne.n	800564e <UART_Transmit_IT+0x48>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d110      	bne.n	800564e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005640:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	1c9a      	adds	r2, r3, #2
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	621a      	str	r2, [r3, #32]
 800564c:	e008      	b.n	8005660 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6211      	str	r1, [r2, #32]
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29b      	uxth	r3, r3
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4619      	mov	r1, r3
 800566e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10f      	bne.n	8005694 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005682:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005692:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff fd3c 	bl	8005144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b08c      	sub	sp, #48	@ 0x30
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b22      	cmp	r3, #34	@ 0x22
 80056e8:	f040 80ae 	bne.w	8005848 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f4:	d117      	bne.n	8005726 <UART_Receive_IT+0x50>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d113      	bne.n	8005726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005714:	b29a      	uxth	r2, r3
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	@ 0x28
 8005724:	e026      	b.n	8005774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005738:	d007      	beq.n	800574a <UART_Receive_IT+0x74>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <UART_Receive_IT+0x82>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e008      	b.n	800576a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005764:	b2da      	uxtb	r2, r3
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4619      	mov	r1, r3
 8005782:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005784:	2b00      	cmp	r3, #0
 8005786:	d15d      	bne.n	8005844 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0220 	bic.w	r2, r2, #32
 8005796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d135      	bne.n	800583a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	613b      	str	r3, [r7, #16]
   return(result);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f023 0310 	bic.w	r3, r3, #16
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f4:	623a      	str	r2, [r7, #32]
 80057f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	69f9      	ldr	r1, [r7, #28]
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	61bb      	str	r3, [r7, #24]
   return(result);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e5      	bne.n	80057d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b10      	cmp	r3, #16
 8005814:	d10a      	bne.n	800582c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fca4 	bl	8005180 <HAL_UARTEx_RxEventCallback>
 8005838:	e002      	b.n	8005840 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fb fcf8 	bl	8001230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e002      	b.n	800584a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3730      	adds	r7, #48	@ 0x30
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005858:	b0c0      	sub	sp, #256	@ 0x100
 800585a:	af00      	add	r7, sp, #0
 800585c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	68d9      	ldr	r1, [r3, #12]
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	ea40 0301 	orr.w	r3, r0, r1
 800587c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058ac:	f021 010c 	bic.w	r1, r1, #12
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ba:	430b      	orrs	r3, r1
 80058bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ce:	6999      	ldr	r1, [r3, #24]
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	ea40 0301 	orr.w	r3, r0, r1
 80058da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005b20 <UART_SetConfig+0x2cc>)
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d005      	beq.n	80058f4 <UART_SetConfig+0xa0>
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005b24 <UART_SetConfig+0x2d0>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d104      	bne.n	80058fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7ff f90a 	bl	8004b0c <HAL_RCC_GetPCLK2Freq>
 80058f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058fc:	e003      	b.n	8005906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058fe:	f7ff f8f1 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8005902:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005910:	f040 810c 	bne.w	8005b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005918:	2200      	movs	r2, #0
 800591a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800591e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	1891      	adds	r1, r2, r2
 800592c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800592e:	415b      	adcs	r3, r3
 8005930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005936:	4621      	mov	r1, r4
 8005938:	eb12 0801 	adds.w	r8, r2, r1
 800593c:	4629      	mov	r1, r5
 800593e:	eb43 0901 	adc.w	r9, r3, r1
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800594e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005956:	4690      	mov	r8, r2
 8005958:	4699      	mov	r9, r3
 800595a:	4623      	mov	r3, r4
 800595c:	eb18 0303 	adds.w	r3, r8, r3
 8005960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005964:	462b      	mov	r3, r5
 8005966:	eb49 0303 	adc.w	r3, r9, r3
 800596a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800597a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800597e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005982:	460b      	mov	r3, r1
 8005984:	18db      	adds	r3, r3, r3
 8005986:	653b      	str	r3, [r7, #80]	@ 0x50
 8005988:	4613      	mov	r3, r2
 800598a:	eb42 0303 	adc.w	r3, r2, r3
 800598e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005998:	f7fb f95e 	bl	8000c58 <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4b61      	ldr	r3, [pc, #388]	@ (8005b28 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2302 	umull	r2, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	011c      	lsls	r4, r3, #4
 80059aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059c4:	415b      	adcs	r3, r3
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059cc:	4641      	mov	r1, r8
 80059ce:	eb12 0a01 	adds.w	sl, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0b01 	adc.w	fp, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ec:	4692      	mov	sl, r2
 80059ee:	469b      	mov	fp, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	eb1a 0303 	adds.w	r3, sl, r3
 80059f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059fa:	464b      	mov	r3, r9
 80059fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005a00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a2e:	f7fb f913 	bl	8000c58 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	4b3b      	ldr	r3, [pc, #236]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2264      	movs	r2, #100	@ 0x64
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	1acb      	subs	r3, r1, r3
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a4e:	4b36      	ldr	r3, [pc, #216]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005a50:	fba3 2302 	umull	r2, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a5c:	441c      	add	r4, r3
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005acc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	18db      	adds	r3, r3, r3
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ada:	4613      	mov	r3, r2
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aea:	f7fb f8b5 	bl	8000c58 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005af4:	fba3 1302 	umull	r1, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	2164      	movs	r1, #100	@ 0x64
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	3332      	adds	r3, #50	@ 0x32
 8005b06:	4a08      	ldr	r2, [pc, #32]	@ (8005b28 <UART_SetConfig+0x2d4>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f003 0207 	and.w	r2, r3, #7
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4422      	add	r2, r4
 8005b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b1c:	e106      	b.n	8005d2c <UART_SetConfig+0x4d8>
 8005b1e:	bf00      	nop
 8005b20:	40011000 	.word	0x40011000
 8005b24:	40011400 	.word	0x40011400
 8005b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	1891      	adds	r1, r2, r2
 8005b44:	6239      	str	r1, [r7, #32]
 8005b46:	415b      	adcs	r3, r3
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b4e:	4641      	mov	r1, r8
 8005b50:	1854      	adds	r4, r2, r1
 8005b52:	4649      	mov	r1, r9
 8005b54:	eb43 0501 	adc.w	r5, r3, r1
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	00eb      	lsls	r3, r5, #3
 8005b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b66:	00e2      	lsls	r2, r4, #3
 8005b68:	4614      	mov	r4, r2
 8005b6a:	461d      	mov	r5, r3
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	18e3      	adds	r3, r4, r3
 8005b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b74:	464b      	mov	r3, r9
 8005b76:	eb45 0303 	adc.w	r3, r5, r3
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	008b      	lsls	r3, r1, #2
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	008a      	lsls	r2, r1, #2
 8005ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bac:	f7fb f854 	bl	8000c58 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4b60      	ldr	r3, [pc, #384]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	011c      	lsls	r4, r3, #4
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	61b9      	str	r1, [r7, #24]
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be0:	4641      	mov	r1, r8
 8005be2:	1851      	adds	r1, r2, r1
 8005be4:	6139      	str	r1, [r7, #16]
 8005be6:	4649      	mov	r1, r9
 8005be8:	414b      	adcs	r3, r1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	00cb      	lsls	r3, r1, #3
 8005bfc:	4651      	mov	r1, sl
 8005bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c02:	4651      	mov	r1, sl
 8005c04:	00ca      	lsls	r2, r1, #3
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c14:	464b      	mov	r3, r9
 8005c16:	460a      	mov	r2, r1
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c38:	4649      	mov	r1, r9
 8005c3a:	008b      	lsls	r3, r1, #2
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c42:	4641      	mov	r1, r8
 8005c44:	008a      	lsls	r2, r1, #2
 8005c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c4a:	f7fb f805 	bl	8000c58 <__aeabi_uldivmod>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	4b38      	ldr	r3, [pc, #224]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005c56:	fba3 2301 	umull	r2, r3, r3, r1
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	2264      	movs	r2, #100	@ 0x64
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
 8005c62:	1acb      	subs	r3, r1, r3
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	3332      	adds	r3, #50	@ 0x32
 8005c68:	4a33      	ldr	r2, [pc, #204]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c74:	441c      	add	r4, r3
 8005c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c94:	4641      	mov	r1, r8
 8005c96:	1851      	adds	r1, r2, r1
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	414b      	adcs	r3, r1
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cac:	4659      	mov	r1, fp
 8005cae:	00cb      	lsls	r3, r1, #3
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	00ca      	lsls	r2, r1, #3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	460a      	mov	r2, r1
 8005cca:	eb42 0303 	adc.w	r3, r2, r3
 8005cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cda:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ce8:	4649      	mov	r1, r9
 8005cea:	008b      	lsls	r3, r1, #2
 8005cec:	4641      	mov	r1, r8
 8005cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	008a      	lsls	r2, r1, #2
 8005cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cfa:	f7fa ffad 	bl	8000c58 <__aeabi_uldivmod>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005d04:	fba3 1302 	umull	r1, r3, r3, r2
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	2164      	movs	r1, #100	@ 0x64
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	3332      	adds	r3, #50	@ 0x32
 8005d16:	4a08      	ldr	r2, [pc, #32]	@ (8005d38 <UART_SetConfig+0x4e4>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	f003 020f 	and.w	r2, r3, #15
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4422      	add	r2, r4
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d32:	46bd      	mov	sp, r7
 8005d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d38:	51eb851f 	.word	0x51eb851f

08005d3c <__cvt>:
 8005d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	ec57 6b10 	vmov	r6, r7, d0
 8005d44:	2f00      	cmp	r7, #0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4619      	mov	r1, r3
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	bfbb      	ittet	lt
 8005d4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d52:	461f      	movlt	r7, r3
 8005d54:	2300      	movge	r3, #0
 8005d56:	232d      	movlt	r3, #45	@ 0x2d
 8005d58:	700b      	strb	r3, [r1, #0]
 8005d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d60:	4691      	mov	r9, r2
 8005d62:	f023 0820 	bic.w	r8, r3, #32
 8005d66:	bfbc      	itt	lt
 8005d68:	4632      	movlt	r2, r6
 8005d6a:	4616      	movlt	r6, r2
 8005d6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d70:	d005      	beq.n	8005d7e <__cvt+0x42>
 8005d72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d76:	d100      	bne.n	8005d7a <__cvt+0x3e>
 8005d78:	3401      	adds	r4, #1
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	e000      	b.n	8005d80 <__cvt+0x44>
 8005d7e:	2103      	movs	r1, #3
 8005d80:	ab03      	add	r3, sp, #12
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	ab02      	add	r3, sp, #8
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	ec47 6b10 	vmov	d0, r6, r7
 8005d8c:	4653      	mov	r3, sl
 8005d8e:	4622      	mov	r2, r4
 8005d90:	f000 fe82 	bl	8006a98 <_dtoa_r>
 8005d94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d98:	4605      	mov	r5, r0
 8005d9a:	d119      	bne.n	8005dd0 <__cvt+0x94>
 8005d9c:	f019 0f01 	tst.w	r9, #1
 8005da0:	d00e      	beq.n	8005dc0 <__cvt+0x84>
 8005da2:	eb00 0904 	add.w	r9, r0, r4
 8005da6:	2200      	movs	r2, #0
 8005da8:	2300      	movs	r3, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	4639      	mov	r1, r7
 8005dae:	f7fa fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db2:	b108      	cbz	r0, 8005db8 <__cvt+0x7c>
 8005db4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005db8:	2230      	movs	r2, #48	@ 0x30
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	454b      	cmp	r3, r9
 8005dbe:	d31e      	bcc.n	8005dfe <__cvt+0xc2>
 8005dc0:	9b03      	ldr	r3, [sp, #12]
 8005dc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dc4:	1b5b      	subs	r3, r3, r5
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	b004      	add	sp, #16
 8005dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dd4:	eb00 0904 	add.w	r9, r0, r4
 8005dd8:	d1e5      	bne.n	8005da6 <__cvt+0x6a>
 8005dda:	7803      	ldrb	r3, [r0, #0]
 8005ddc:	2b30      	cmp	r3, #48	@ 0x30
 8005dde:	d10a      	bne.n	8005df6 <__cvt+0xba>
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dec:	b918      	cbnz	r0, 8005df6 <__cvt+0xba>
 8005dee:	f1c4 0401 	rsb	r4, r4, #1
 8005df2:	f8ca 4000 	str.w	r4, [sl]
 8005df6:	f8da 3000 	ldr.w	r3, [sl]
 8005dfa:	4499      	add	r9, r3
 8005dfc:	e7d3      	b.n	8005da6 <__cvt+0x6a>
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	9103      	str	r1, [sp, #12]
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e7d9      	b.n	8005dba <__cvt+0x7e>

08005e06 <__exponent>:
 8005e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bfba      	itte	lt
 8005e0c:	4249      	neglt	r1, r1
 8005e0e:	232d      	movlt	r3, #45	@ 0x2d
 8005e10:	232b      	movge	r3, #43	@ 0x2b
 8005e12:	2909      	cmp	r1, #9
 8005e14:	7002      	strb	r2, [r0, #0]
 8005e16:	7043      	strb	r3, [r0, #1]
 8005e18:	dd29      	ble.n	8005e6e <__exponent+0x68>
 8005e1a:	f10d 0307 	add.w	r3, sp, #7
 8005e1e:	461d      	mov	r5, r3
 8005e20:	270a      	movs	r7, #10
 8005e22:	461a      	mov	r2, r3
 8005e24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e28:	fb07 1416 	mls	r4, r7, r6, r1
 8005e2c:	3430      	adds	r4, #48	@ 0x30
 8005e2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e32:	460c      	mov	r4, r1
 8005e34:	2c63      	cmp	r4, #99	@ 0x63
 8005e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	dcf1      	bgt.n	8005e22 <__exponent+0x1c>
 8005e3e:	3130      	adds	r1, #48	@ 0x30
 8005e40:	1e94      	subs	r4, r2, #2
 8005e42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e46:	1c41      	adds	r1, r0, #1
 8005e48:	4623      	mov	r3, r4
 8005e4a:	42ab      	cmp	r3, r5
 8005e4c:	d30a      	bcc.n	8005e64 <__exponent+0x5e>
 8005e4e:	f10d 0309 	add.w	r3, sp, #9
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ac      	cmp	r4, r5
 8005e56:	bf88      	it	hi
 8005e58:	2300      	movhi	r3, #0
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	4403      	add	r3, r0
 8005e5e:	1a18      	subs	r0, r3, r0
 8005e60:	b003      	add	sp, #12
 8005e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e6c:	e7ed      	b.n	8005e4a <__exponent+0x44>
 8005e6e:	2330      	movs	r3, #48	@ 0x30
 8005e70:	3130      	adds	r1, #48	@ 0x30
 8005e72:	7083      	strb	r3, [r0, #2]
 8005e74:	70c1      	strb	r1, [r0, #3]
 8005e76:	1d03      	adds	r3, r0, #4
 8005e78:	e7f1      	b.n	8005e5e <__exponent+0x58>
	...

08005e7c <_printf_float>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	b08d      	sub	sp, #52	@ 0x34
 8005e82:	460c      	mov	r4, r1
 8005e84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e88:	4616      	mov	r6, r2
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	f000 fcf5 	bl	800687c <_localeconv_r>
 8005e92:	6803      	ldr	r3, [r0, #0]
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa f9f2 	bl	8000280 <strlen>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea4:	9005      	str	r0, [sp, #20]
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	f103 0208 	add.w	r2, r3, #8
 8005eb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005eb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005eb8:	f8c8 2000 	str.w	r2, [r8]
 8005ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ec0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8006144 <_printf_float+0x2c8>)
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	f7fa fe30 	bl	8000b3c <__aeabi_dcmpun>
 8005edc:	bb70      	cbnz	r0, 8005f3c <_printf_float+0xc0>
 8005ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee2:	4b98      	ldr	r3, [pc, #608]	@ (8006144 <_printf_float+0x2c8>)
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	f7fa fe0a 	bl	8000b00 <__aeabi_dcmple>
 8005eec:	bb30      	cbnz	r0, 8005f3c <_printf_float+0xc0>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	f7fa fdf9 	bl	8000aec <__aeabi_dcmplt>
 8005efa:	b110      	cbz	r0, 8005f02 <_printf_float+0x86>
 8005efc:	232d      	movs	r3, #45	@ 0x2d
 8005efe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f02:	4a91      	ldr	r2, [pc, #580]	@ (8006148 <_printf_float+0x2cc>)
 8005f04:	4b91      	ldr	r3, [pc, #580]	@ (800614c <_printf_float+0x2d0>)
 8005f06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f0a:	bf94      	ite	ls
 8005f0c:	4690      	movls	r8, r2
 8005f0e:	4698      	movhi	r8, r3
 8005f10:	2303      	movs	r3, #3
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	f02b 0304 	bic.w	r3, fp, #4
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	f04f 0900 	mov.w	r9, #0
 8005f1e:	9700      	str	r7, [sp, #0]
 8005f20:	4633      	mov	r3, r6
 8005f22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f9d2 	bl	80062d0 <_printf_common>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f040 808d 	bne.w	800604c <_printf_float+0x1d0>
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	b00d      	add	sp, #52	@ 0x34
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8005f48:	b140      	cbz	r0, 8005f5c <_printf_float+0xe0>
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfbc      	itt	lt
 8005f50:	232d      	movlt	r3, #45	@ 0x2d
 8005f52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f56:	4a7e      	ldr	r2, [pc, #504]	@ (8006150 <_printf_float+0x2d4>)
 8005f58:	4b7e      	ldr	r3, [pc, #504]	@ (8006154 <_printf_float+0x2d8>)
 8005f5a:	e7d4      	b.n	8005f06 <_printf_float+0x8a>
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f62:	9206      	str	r2, [sp, #24]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	d13b      	bne.n	8005fe0 <_printf_float+0x164>
 8005f68:	2306      	movs	r3, #6
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f70:	2300      	movs	r3, #0
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	9303      	str	r3, [sp, #12]
 8005f76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	6861      	ldr	r1, [r4, #4]
 8005f82:	ec49 8b10 	vmov	d0, r8, r9
 8005f86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f7ff fed6 	bl	8005d3c <__cvt>
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f94:	2b47      	cmp	r3, #71	@ 0x47
 8005f96:	4680      	mov	r8, r0
 8005f98:	d129      	bne.n	8005fee <_printf_float+0x172>
 8005f9a:	1cc8      	adds	r0, r1, #3
 8005f9c:	db02      	blt.n	8005fa4 <_printf_float+0x128>
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	dd41      	ble.n	8006028 <_printf_float+0x1ac>
 8005fa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fa8:	fa5f fa8a 	uxtb.w	sl, sl
 8005fac:	3901      	subs	r1, #1
 8005fae:	4652      	mov	r2, sl
 8005fb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fb6:	f7ff ff26 	bl	8005e06 <__exponent>
 8005fba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fbc:	1813      	adds	r3, r2, r0
 8005fbe:	2a01      	cmp	r2, #1
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	dc02      	bgt.n	8005fcc <_printf_float+0x150>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	07d2      	lsls	r2, r2, #31
 8005fca:	d501      	bpl.n	8005fd0 <_printf_float+0x154>
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0a2      	beq.n	8005f1e <_printf_float+0xa2>
 8005fd8:	232d      	movs	r3, #45	@ 0x2d
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fde:	e79e      	b.n	8005f1e <_printf_float+0xa2>
 8005fe0:	9a06      	ldr	r2, [sp, #24]
 8005fe2:	2a47      	cmp	r2, #71	@ 0x47
 8005fe4:	d1c2      	bne.n	8005f6c <_printf_float+0xf0>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1c0      	bne.n	8005f6c <_printf_float+0xf0>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7bd      	b.n	8005f6a <_printf_float+0xee>
 8005fee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ff2:	d9db      	bls.n	8005fac <_printf_float+0x130>
 8005ff4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ff8:	d118      	bne.n	800602c <_printf_float+0x1b0>
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	dd0b      	ble.n	8006018 <_printf_float+0x19c>
 8006000:	6121      	str	r1, [r4, #16]
 8006002:	b913      	cbnz	r3, 800600a <_printf_float+0x18e>
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	07d0      	lsls	r0, r2, #31
 8006008:	d502      	bpl.n	8006010 <_printf_float+0x194>
 800600a:	3301      	adds	r3, #1
 800600c:	440b      	add	r3, r1
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006012:	f04f 0900 	mov.w	r9, #0
 8006016:	e7db      	b.n	8005fd0 <_printf_float+0x154>
 8006018:	b913      	cbnz	r3, 8006020 <_printf_float+0x1a4>
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	07d2      	lsls	r2, r2, #31
 800601e:	d501      	bpl.n	8006024 <_printf_float+0x1a8>
 8006020:	3302      	adds	r3, #2
 8006022:	e7f4      	b.n	800600e <_printf_float+0x192>
 8006024:	2301      	movs	r3, #1
 8006026:	e7f2      	b.n	800600e <_printf_float+0x192>
 8006028:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800602c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602e:	4299      	cmp	r1, r3
 8006030:	db05      	blt.n	800603e <_printf_float+0x1c2>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6121      	str	r1, [r4, #16]
 8006036:	07d8      	lsls	r0, r3, #31
 8006038:	d5ea      	bpl.n	8006010 <_printf_float+0x194>
 800603a:	1c4b      	adds	r3, r1, #1
 800603c:	e7e7      	b.n	800600e <_printf_float+0x192>
 800603e:	2900      	cmp	r1, #0
 8006040:	bfd4      	ite	le
 8006042:	f1c1 0202 	rsble	r2, r1, #2
 8006046:	2201      	movgt	r2, #1
 8006048:	4413      	add	r3, r2
 800604a:	e7e0      	b.n	800600e <_printf_float+0x192>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	055a      	lsls	r2, r3, #21
 8006050:	d407      	bmi.n	8006062 <_printf_float+0x1e6>
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	4642      	mov	r2, r8
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	d12b      	bne.n	80060b8 <_printf_float+0x23c>
 8006060:	e767      	b.n	8005f32 <_printf_float+0xb6>
 8006062:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006066:	f240 80dd 	bls.w	8006224 <_printf_float+0x3a8>
 800606a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800606e:	2200      	movs	r2, #0
 8006070:	2300      	movs	r3, #0
 8006072:	f7fa fd31 	bl	8000ad8 <__aeabi_dcmpeq>
 8006076:	2800      	cmp	r0, #0
 8006078:	d033      	beq.n	80060e2 <_printf_float+0x266>
 800607a:	4a37      	ldr	r2, [pc, #220]	@ (8006158 <_printf_float+0x2dc>)
 800607c:	2301      	movs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af54 	beq.w	8005f32 <_printf_float+0xb6>
 800608a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800608e:	4543      	cmp	r3, r8
 8006090:	db02      	blt.n	8006098 <_printf_float+0x21c>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07d8      	lsls	r0, r3, #31
 8006096:	d50f      	bpl.n	80060b8 <_printf_float+0x23c>
 8006098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af45 	beq.w	8005f32 <_printf_float+0xb6>
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80060b0:	f104 0a1a 	add.w	sl, r4, #26
 80060b4:	45c8      	cmp	r8, r9
 80060b6:	dc09      	bgt.n	80060cc <_printf_float+0x250>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	079b      	lsls	r3, r3, #30
 80060bc:	f100 8103 	bmi.w	80062c6 <_printf_float+0x44a>
 80060c0:	68e0      	ldr	r0, [r4, #12]
 80060c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c4:	4298      	cmp	r0, r3
 80060c6:	bfb8      	it	lt
 80060c8:	4618      	movlt	r0, r3
 80060ca:	e734      	b.n	8005f36 <_printf_float+0xba>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4652      	mov	r2, sl
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f af2b 	beq.w	8005f32 <_printf_float+0xb6>
 80060dc:	f109 0901 	add.w	r9, r9, #1
 80060e0:	e7e8      	b.n	80060b4 <_printf_float+0x238>
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dc39      	bgt.n	800615c <_printf_float+0x2e0>
 80060e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <_printf_float+0x2dc>)
 80060ea:	2301      	movs	r3, #1
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f af1d 	beq.w	8005f32 <_printf_float+0xb6>
 80060f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80060fc:	ea59 0303 	orrs.w	r3, r9, r3
 8006100:	d102      	bne.n	8006108 <_printf_float+0x28c>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	07d9      	lsls	r1, r3, #31
 8006106:	d5d7      	bpl.n	80060b8 <_printf_float+0x23c>
 8006108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f af0d 	beq.w	8005f32 <_printf_float+0xb6>
 8006118:	f04f 0a00 	mov.w	sl, #0
 800611c:	f104 0b1a 	add.w	fp, r4, #26
 8006120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006122:	425b      	negs	r3, r3
 8006124:	4553      	cmp	r3, sl
 8006126:	dc01      	bgt.n	800612c <_printf_float+0x2b0>
 8006128:	464b      	mov	r3, r9
 800612a:	e793      	b.n	8006054 <_printf_float+0x1d8>
 800612c:	2301      	movs	r3, #1
 800612e:	465a      	mov	r2, fp
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f aefb 	beq.w	8005f32 <_printf_float+0xb6>
 800613c:	f10a 0a01 	add.w	sl, sl, #1
 8006140:	e7ee      	b.n	8006120 <_printf_float+0x2a4>
 8006142:	bf00      	nop
 8006144:	7fefffff 	.word	0x7fefffff
 8006148:	08009244 	.word	0x08009244
 800614c:	08009248 	.word	0x08009248
 8006150:	0800924c 	.word	0x0800924c
 8006154:	08009250 	.word	0x08009250
 8006158:	08009254 	.word	0x08009254
 800615c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800615e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006162:	4553      	cmp	r3, sl
 8006164:	bfa8      	it	ge
 8006166:	4653      	movge	r3, sl
 8006168:	2b00      	cmp	r3, #0
 800616a:	4699      	mov	r9, r3
 800616c:	dc36      	bgt.n	80061dc <_printf_float+0x360>
 800616e:	f04f 0b00 	mov.w	fp, #0
 8006172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006176:	f104 021a 	add.w	r2, r4, #26
 800617a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800617c:	9306      	str	r3, [sp, #24]
 800617e:	eba3 0309 	sub.w	r3, r3, r9
 8006182:	455b      	cmp	r3, fp
 8006184:	dc31      	bgt.n	80061ea <_printf_float+0x36e>
 8006186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006188:	459a      	cmp	sl, r3
 800618a:	dc3a      	bgt.n	8006202 <_printf_float+0x386>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07da      	lsls	r2, r3, #31
 8006190:	d437      	bmi.n	8006202 <_printf_float+0x386>
 8006192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006194:	ebaa 0903 	sub.w	r9, sl, r3
 8006198:	9b06      	ldr	r3, [sp, #24]
 800619a:	ebaa 0303 	sub.w	r3, sl, r3
 800619e:	4599      	cmp	r9, r3
 80061a0:	bfa8      	it	ge
 80061a2:	4699      	movge	r9, r3
 80061a4:	f1b9 0f00 	cmp.w	r9, #0
 80061a8:	dc33      	bgt.n	8006212 <_printf_float+0x396>
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b2:	f104 0b1a 	add.w	fp, r4, #26
 80061b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b8:	ebaa 0303 	sub.w	r3, sl, r3
 80061bc:	eba3 0309 	sub.w	r3, r3, r9
 80061c0:	4543      	cmp	r3, r8
 80061c2:	f77f af79 	ble.w	80060b8 <_printf_float+0x23c>
 80061c6:	2301      	movs	r3, #1
 80061c8:	465a      	mov	r2, fp
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f aeae 	beq.w	8005f32 <_printf_float+0xb6>
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	e7ec      	b.n	80061b6 <_printf_float+0x33a>
 80061dc:	4642      	mov	r2, r8
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	d1c2      	bne.n	800616e <_printf_float+0x2f2>
 80061e8:	e6a3      	b.n	8005f32 <_printf_float+0xb6>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	9206      	str	r2, [sp, #24]
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	f43f ae9c 	beq.w	8005f32 <_printf_float+0xb6>
 80061fa:	9a06      	ldr	r2, [sp, #24]
 80061fc:	f10b 0b01 	add.w	fp, fp, #1
 8006200:	e7bb      	b.n	800617a <_printf_float+0x2fe>
 8006202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	d1c0      	bne.n	8006192 <_printf_float+0x316>
 8006210:	e68f      	b.n	8005f32 <_printf_float+0xb6>
 8006212:	9a06      	ldr	r2, [sp, #24]
 8006214:	464b      	mov	r3, r9
 8006216:	4442      	add	r2, r8
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	d1c3      	bne.n	80061aa <_printf_float+0x32e>
 8006222:	e686      	b.n	8005f32 <_printf_float+0xb6>
 8006224:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006228:	f1ba 0f01 	cmp.w	sl, #1
 800622c:	dc01      	bgt.n	8006232 <_printf_float+0x3b6>
 800622e:	07db      	lsls	r3, r3, #31
 8006230:	d536      	bpl.n	80062a0 <_printf_float+0x424>
 8006232:	2301      	movs	r3, #1
 8006234:	4642      	mov	r2, r8
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f ae78 	beq.w	8005f32 <_printf_float+0xb6>
 8006242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f ae70 	beq.w	8005f32 <_printf_float+0xb6>
 8006252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006256:	2200      	movs	r2, #0
 8006258:	2300      	movs	r3, #0
 800625a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800625e:	f7fa fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006262:	b9c0      	cbnz	r0, 8006296 <_printf_float+0x41a>
 8006264:	4653      	mov	r3, sl
 8006266:	f108 0201 	add.w	r2, r8, #1
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	d10c      	bne.n	800628e <_printf_float+0x412>
 8006274:	e65d      	b.n	8005f32 <_printf_float+0xb6>
 8006276:	2301      	movs	r3, #1
 8006278:	465a      	mov	r2, fp
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f ae56 	beq.w	8005f32 <_printf_float+0xb6>
 8006286:	f108 0801 	add.w	r8, r8, #1
 800628a:	45d0      	cmp	r8, sl
 800628c:	dbf3      	blt.n	8006276 <_printf_float+0x3fa>
 800628e:	464b      	mov	r3, r9
 8006290:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006294:	e6df      	b.n	8006056 <_printf_float+0x1da>
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	f104 0b1a 	add.w	fp, r4, #26
 800629e:	e7f4      	b.n	800628a <_printf_float+0x40e>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4642      	mov	r2, r8
 80062a4:	e7e1      	b.n	800626a <_printf_float+0x3ee>
 80062a6:	2301      	movs	r3, #1
 80062a8:	464a      	mov	r2, r9
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f ae3e 	beq.w	8005f32 <_printf_float+0xb6>
 80062b6:	f108 0801 	add.w	r8, r8, #1
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062be:	1a5b      	subs	r3, r3, r1
 80062c0:	4543      	cmp	r3, r8
 80062c2:	dcf0      	bgt.n	80062a6 <_printf_float+0x42a>
 80062c4:	e6fc      	b.n	80060c0 <_printf_float+0x244>
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	f104 0919 	add.w	r9, r4, #25
 80062ce:	e7f4      	b.n	80062ba <_printf_float+0x43e>

080062d0 <_printf_common>:
 80062d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	4616      	mov	r6, r2
 80062d6:	4698      	mov	r8, r3
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfb8      	it	lt
 80062e4:	4613      	movlt	r3, r2
 80062e6:	6033      	str	r3, [r6, #0]
 80062e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062ec:	4607      	mov	r7, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b10a      	cbz	r2, 80062f6 <_printf_common+0x26>
 80062f2:	3301      	adds	r3, #1
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	0699      	lsls	r1, r3, #26
 80062fa:	bf42      	ittt	mi
 80062fc:	6833      	ldrmi	r3, [r6, #0]
 80062fe:	3302      	addmi	r3, #2
 8006300:	6033      	strmi	r3, [r6, #0]
 8006302:	6825      	ldr	r5, [r4, #0]
 8006304:	f015 0506 	ands.w	r5, r5, #6
 8006308:	d106      	bne.n	8006318 <_printf_common+0x48>
 800630a:	f104 0a19 	add.w	sl, r4, #25
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc26      	bgt.n	8006366 <_printf_common+0x96>
 8006318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	3b00      	subs	r3, #0
 8006320:	bf18      	it	ne
 8006322:	2301      	movne	r3, #1
 8006324:	0692      	lsls	r2, r2, #26
 8006326:	d42b      	bmi.n	8006380 <_printf_common+0xb0>
 8006328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800632c:	4641      	mov	r1, r8
 800632e:	4638      	mov	r0, r7
 8006330:	47c8      	blx	r9
 8006332:	3001      	adds	r0, #1
 8006334:	d01e      	beq.n	8006374 <_printf_common+0xa4>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	2b04      	cmp	r3, #4
 8006340:	bf02      	ittt	eq
 8006342:	68e5      	ldreq	r5, [r4, #12]
 8006344:	6833      	ldreq	r3, [r6, #0]
 8006346:	1aed      	subeq	r5, r5, r3
 8006348:	68a3      	ldr	r3, [r4, #8]
 800634a:	bf0c      	ite	eq
 800634c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006350:	2500      	movne	r5, #0
 8006352:	4293      	cmp	r3, r2
 8006354:	bfc4      	itt	gt
 8006356:	1a9b      	subgt	r3, r3, r2
 8006358:	18ed      	addgt	r5, r5, r3
 800635a:	2600      	movs	r6, #0
 800635c:	341a      	adds	r4, #26
 800635e:	42b5      	cmp	r5, r6
 8006360:	d11a      	bne.n	8006398 <_printf_common+0xc8>
 8006362:	2000      	movs	r0, #0
 8006364:	e008      	b.n	8006378 <_printf_common+0xa8>
 8006366:	2301      	movs	r3, #1
 8006368:	4652      	mov	r2, sl
 800636a:	4641      	mov	r1, r8
 800636c:	4638      	mov	r0, r7
 800636e:	47c8      	blx	r9
 8006370:	3001      	adds	r0, #1
 8006372:	d103      	bne.n	800637c <_printf_common+0xac>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	3501      	adds	r5, #1
 800637e:	e7c6      	b.n	800630e <_printf_common+0x3e>
 8006380:	18e1      	adds	r1, r4, r3
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	2030      	movs	r0, #48	@ 0x30
 8006386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800638a:	4422      	add	r2, r4
 800638c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006394:	3302      	adds	r3, #2
 8006396:	e7c7      	b.n	8006328 <_printf_common+0x58>
 8006398:	2301      	movs	r3, #1
 800639a:	4622      	mov	r2, r4
 800639c:	4641      	mov	r1, r8
 800639e:	4638      	mov	r0, r7
 80063a0:	47c8      	blx	r9
 80063a2:	3001      	adds	r0, #1
 80063a4:	d0e6      	beq.n	8006374 <_printf_common+0xa4>
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7d9      	b.n	800635e <_printf_common+0x8e>
	...

080063ac <_printf_i>:
 80063ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	7e0f      	ldrb	r7, [r1, #24]
 80063b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063b4:	2f78      	cmp	r7, #120	@ 0x78
 80063b6:	4691      	mov	r9, r2
 80063b8:	4680      	mov	r8, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	469a      	mov	sl, r3
 80063be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063c2:	d807      	bhi.n	80063d4 <_printf_i+0x28>
 80063c4:	2f62      	cmp	r7, #98	@ 0x62
 80063c6:	d80a      	bhi.n	80063de <_printf_i+0x32>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	f000 80d2 	beq.w	8006572 <_printf_i+0x1c6>
 80063ce:	2f58      	cmp	r7, #88	@ 0x58
 80063d0:	f000 80b9 	beq.w	8006546 <_printf_i+0x19a>
 80063d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063dc:	e03a      	b.n	8006454 <_printf_i+0xa8>
 80063de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063e2:	2b15      	cmp	r3, #21
 80063e4:	d8f6      	bhi.n	80063d4 <_printf_i+0x28>
 80063e6:	a101      	add	r1, pc, #4	@ (adr r1, 80063ec <_printf_i+0x40>)
 80063e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006459 	.word	0x08006459
 80063f4:	080063d5 	.word	0x080063d5
 80063f8:	080063d5 	.word	0x080063d5
 80063fc:	080063d5 	.word	0x080063d5
 8006400:	080063d5 	.word	0x080063d5
 8006404:	08006459 	.word	0x08006459
 8006408:	080063d5 	.word	0x080063d5
 800640c:	080063d5 	.word	0x080063d5
 8006410:	080063d5 	.word	0x080063d5
 8006414:	080063d5 	.word	0x080063d5
 8006418:	08006559 	.word	0x08006559
 800641c:	08006483 	.word	0x08006483
 8006420:	08006513 	.word	0x08006513
 8006424:	080063d5 	.word	0x080063d5
 8006428:	080063d5 	.word	0x080063d5
 800642c:	0800657b 	.word	0x0800657b
 8006430:	080063d5 	.word	0x080063d5
 8006434:	08006483 	.word	0x08006483
 8006438:	080063d5 	.word	0x080063d5
 800643c:	080063d5 	.word	0x080063d5
 8006440:	0800651b 	.word	0x0800651b
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6032      	str	r2, [r6, #0]
 800644c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006454:	2301      	movs	r3, #1
 8006456:	e09d      	b.n	8006594 <_printf_i+0x1e8>
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	1d19      	adds	r1, r3, #4
 800645e:	6031      	str	r1, [r6, #0]
 8006460:	0606      	lsls	r6, r0, #24
 8006462:	d501      	bpl.n	8006468 <_printf_i+0xbc>
 8006464:	681d      	ldr	r5, [r3, #0]
 8006466:	e003      	b.n	8006470 <_printf_i+0xc4>
 8006468:	0645      	lsls	r5, r0, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0xb8>
 800646c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006470:	2d00      	cmp	r5, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xd0>
 8006474:	232d      	movs	r3, #45	@ 0x2d
 8006476:	426d      	negs	r5, r5
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800647c:	4859      	ldr	r0, [pc, #356]	@ (80065e4 <_printf_i+0x238>)
 800647e:	230a      	movs	r3, #10
 8006480:	e011      	b.n	80064a6 <_printf_i+0xfa>
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	6833      	ldr	r3, [r6, #0]
 8006486:	0608      	lsls	r0, r1, #24
 8006488:	f853 5b04 	ldr.w	r5, [r3], #4
 800648c:	d402      	bmi.n	8006494 <_printf_i+0xe8>
 800648e:	0649      	lsls	r1, r1, #25
 8006490:	bf48      	it	mi
 8006492:	b2ad      	uxthmi	r5, r5
 8006494:	2f6f      	cmp	r7, #111	@ 0x6f
 8006496:	4853      	ldr	r0, [pc, #332]	@ (80065e4 <_printf_i+0x238>)
 8006498:	6033      	str	r3, [r6, #0]
 800649a:	bf14      	ite	ne
 800649c:	230a      	movne	r3, #10
 800649e:	2308      	moveq	r3, #8
 80064a0:	2100      	movs	r1, #0
 80064a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064a6:	6866      	ldr	r6, [r4, #4]
 80064a8:	60a6      	str	r6, [r4, #8]
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	bfa2      	ittt	ge
 80064ae:	6821      	ldrge	r1, [r4, #0]
 80064b0:	f021 0104 	bicge.w	r1, r1, #4
 80064b4:	6021      	strge	r1, [r4, #0]
 80064b6:	b90d      	cbnz	r5, 80064bc <_printf_i+0x110>
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	d04b      	beq.n	8006554 <_printf_i+0x1a8>
 80064bc:	4616      	mov	r6, r2
 80064be:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c2:	fb03 5711 	mls	r7, r3, r1, r5
 80064c6:	5dc7      	ldrb	r7, [r0, r7]
 80064c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064cc:	462f      	mov	r7, r5
 80064ce:	42bb      	cmp	r3, r7
 80064d0:	460d      	mov	r5, r1
 80064d2:	d9f4      	bls.n	80064be <_printf_i+0x112>
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d10b      	bne.n	80064f0 <_printf_i+0x144>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	d508      	bpl.n	80064f0 <_printf_i+0x144>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6861      	ldr	r1, [r4, #4]
 80064e2:	4299      	cmp	r1, r3
 80064e4:	bfde      	ittt	le
 80064e6:	2330      	movle	r3, #48	@ 0x30
 80064e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064f0:	1b92      	subs	r2, r2, r6
 80064f2:	6122      	str	r2, [r4, #16]
 80064f4:	f8cd a000 	str.w	sl, [sp]
 80064f8:	464b      	mov	r3, r9
 80064fa:	aa03      	add	r2, sp, #12
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff fee6 	bl	80062d0 <_printf_common>
 8006504:	3001      	adds	r0, #1
 8006506:	d14a      	bne.n	800659e <_printf_i+0x1f2>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	b004      	add	sp, #16
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	f043 0320 	orr.w	r3, r3, #32
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	4833      	ldr	r0, [pc, #204]	@ (80065e8 <_printf_i+0x23c>)
 800651c:	2778      	movs	r7, #120	@ 0x78
 800651e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	6831      	ldr	r1, [r6, #0]
 8006526:	061f      	lsls	r7, r3, #24
 8006528:	f851 5b04 	ldr.w	r5, [r1], #4
 800652c:	d402      	bmi.n	8006534 <_printf_i+0x188>
 800652e:	065f      	lsls	r7, r3, #25
 8006530:	bf48      	it	mi
 8006532:	b2ad      	uxthmi	r5, r5
 8006534:	6031      	str	r1, [r6, #0]
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	bf44      	itt	mi
 800653a:	f043 0320 	orrmi.w	r3, r3, #32
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b11d      	cbz	r5, 800654a <_printf_i+0x19e>
 8006542:	2310      	movs	r3, #16
 8006544:	e7ac      	b.n	80064a0 <_printf_i+0xf4>
 8006546:	4827      	ldr	r0, [pc, #156]	@ (80065e4 <_printf_i+0x238>)
 8006548:	e7e9      	b.n	800651e <_printf_i+0x172>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f023 0320 	bic.w	r3, r3, #32
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	e7f6      	b.n	8006542 <_printf_i+0x196>
 8006554:	4616      	mov	r6, r2
 8006556:	e7bd      	b.n	80064d4 <_printf_i+0x128>
 8006558:	6833      	ldr	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	6961      	ldr	r1, [r4, #20]
 800655e:	1d18      	adds	r0, r3, #4
 8006560:	6030      	str	r0, [r6, #0]
 8006562:	062e      	lsls	r6, r5, #24
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	d501      	bpl.n	800656c <_printf_i+0x1c0>
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	e002      	b.n	8006572 <_printf_i+0x1c6>
 800656c:	0668      	lsls	r0, r5, #25
 800656e:	d5fb      	bpl.n	8006568 <_printf_i+0x1bc>
 8006570:	8019      	strh	r1, [r3, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	4616      	mov	r6, r2
 8006578:	e7bc      	b.n	80064f4 <_printf_i+0x148>
 800657a:	6833      	ldr	r3, [r6, #0]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	6032      	str	r2, [r6, #0]
 8006580:	681e      	ldr	r6, [r3, #0]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	2100      	movs	r1, #0
 8006586:	4630      	mov	r0, r6
 8006588:	f7f9 fe2a 	bl	80001e0 <memchr>
 800658c:	b108      	cbz	r0, 8006592 <_printf_i+0x1e6>
 800658e:	1b80      	subs	r0, r0, r6
 8006590:	6060      	str	r0, [r4, #4]
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	2300      	movs	r3, #0
 8006598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800659c:	e7aa      	b.n	80064f4 <_printf_i+0x148>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	4632      	mov	r2, r6
 80065a2:	4649      	mov	r1, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	47d0      	blx	sl
 80065a8:	3001      	adds	r0, #1
 80065aa:	d0ad      	beq.n	8006508 <_printf_i+0x15c>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	079b      	lsls	r3, r3, #30
 80065b0:	d413      	bmi.n	80065da <_printf_i+0x22e>
 80065b2:	68e0      	ldr	r0, [r4, #12]
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	4298      	cmp	r0, r3
 80065b8:	bfb8      	it	lt
 80065ba:	4618      	movlt	r0, r3
 80065bc:	e7a6      	b.n	800650c <_printf_i+0x160>
 80065be:	2301      	movs	r3, #1
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d09d      	beq.n	8006508 <_printf_i+0x15c>
 80065cc:	3501      	adds	r5, #1
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	9903      	ldr	r1, [sp, #12]
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dcf2      	bgt.n	80065be <_printf_i+0x212>
 80065d8:	e7eb      	b.n	80065b2 <_printf_i+0x206>
 80065da:	2500      	movs	r5, #0
 80065dc:	f104 0619 	add.w	r6, r4, #25
 80065e0:	e7f5      	b.n	80065ce <_printf_i+0x222>
 80065e2:	bf00      	nop
 80065e4:	08009256 	.word	0x08009256
 80065e8:	08009267 	.word	0x08009267

080065ec <std>:
 80065ec:	2300      	movs	r3, #0
 80065ee:	b510      	push	{r4, lr}
 80065f0:	4604      	mov	r4, r0
 80065f2:	e9c0 3300 	strd	r3, r3, [r0]
 80065f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fa:	6083      	str	r3, [r0, #8]
 80065fc:	8181      	strh	r1, [r0, #12]
 80065fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006600:	81c2      	strh	r2, [r0, #14]
 8006602:	6183      	str	r3, [r0, #24]
 8006604:	4619      	mov	r1, r3
 8006606:	2208      	movs	r2, #8
 8006608:	305c      	adds	r0, #92	@ 0x5c
 800660a:	f000 f92e 	bl	800686a <memset>
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <std+0x58>)
 8006610:	6263      	str	r3, [r4, #36]	@ 0x24
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <std+0x5c>)
 8006614:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <std+0x60>)
 8006618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <std+0x64>)
 800661c:	6323      	str	r3, [r4, #48]	@ 0x30
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <std+0x68>)
 8006620:	6224      	str	r4, [r4, #32]
 8006622:	429c      	cmp	r4, r3
 8006624:	d006      	beq.n	8006634 <std+0x48>
 8006626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800662a:	4294      	cmp	r4, r2
 800662c:	d002      	beq.n	8006634 <std+0x48>
 800662e:	33d0      	adds	r3, #208	@ 0xd0
 8006630:	429c      	cmp	r4, r3
 8006632:	d105      	bne.n	8006640 <std+0x54>
 8006634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f000 b992 	b.w	8006964 <__retarget_lock_init_recursive>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	080067b1 	.word	0x080067b1
 8006648:	080067d3 	.word	0x080067d3
 800664c:	0800680b 	.word	0x0800680b
 8006650:	0800682f 	.word	0x0800682f
 8006654:	2000091c 	.word	0x2000091c

08006658 <stdio_exit_handler>:
 8006658:	4a02      	ldr	r2, [pc, #8]	@ (8006664 <stdio_exit_handler+0xc>)
 800665a:	4903      	ldr	r1, [pc, #12]	@ (8006668 <stdio_exit_handler+0x10>)
 800665c:	4803      	ldr	r0, [pc, #12]	@ (800666c <stdio_exit_handler+0x14>)
 800665e:	f000 b869 	b.w	8006734 <_fwalk_sglue>
 8006662:	bf00      	nop
 8006664:	20000014 	.word	0x20000014
 8006668:	080082dd 	.word	0x080082dd
 800666c:	20000024 	.word	0x20000024

08006670 <cleanup_stdio>:
 8006670:	6841      	ldr	r1, [r0, #4]
 8006672:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <cleanup_stdio+0x34>)
 8006674:	4299      	cmp	r1, r3
 8006676:	b510      	push	{r4, lr}
 8006678:	4604      	mov	r4, r0
 800667a:	d001      	beq.n	8006680 <cleanup_stdio+0x10>
 800667c:	f001 fe2e 	bl	80082dc <_fflush_r>
 8006680:	68a1      	ldr	r1, [r4, #8]
 8006682:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <cleanup_stdio+0x38>)
 8006684:	4299      	cmp	r1, r3
 8006686:	d002      	beq.n	800668e <cleanup_stdio+0x1e>
 8006688:	4620      	mov	r0, r4
 800668a:	f001 fe27 	bl	80082dc <_fflush_r>
 800668e:	68e1      	ldr	r1, [r4, #12]
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <cleanup_stdio+0x3c>)
 8006692:	4299      	cmp	r1, r3
 8006694:	d004      	beq.n	80066a0 <cleanup_stdio+0x30>
 8006696:	4620      	mov	r0, r4
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f001 be1e 	b.w	80082dc <_fflush_r>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	2000091c 	.word	0x2000091c
 80066a8:	20000984 	.word	0x20000984
 80066ac:	200009ec 	.word	0x200009ec

080066b0 <global_stdio_init.part.0>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <global_stdio_init.part.0+0x30>)
 80066b4:	4c0b      	ldr	r4, [pc, #44]	@ (80066e4 <global_stdio_init.part.0+0x34>)
 80066b6:	4a0c      	ldr	r2, [pc, #48]	@ (80066e8 <global_stdio_init.part.0+0x38>)
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	4620      	mov	r0, r4
 80066bc:	2200      	movs	r2, #0
 80066be:	2104      	movs	r1, #4
 80066c0:	f7ff ff94 	bl	80065ec <std>
 80066c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066c8:	2201      	movs	r2, #1
 80066ca:	2109      	movs	r1, #9
 80066cc:	f7ff ff8e 	bl	80065ec <std>
 80066d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066d4:	2202      	movs	r2, #2
 80066d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066da:	2112      	movs	r1, #18
 80066dc:	f7ff bf86 	b.w	80065ec <std>
 80066e0:	20000a54 	.word	0x20000a54
 80066e4:	2000091c 	.word	0x2000091c
 80066e8:	08006659 	.word	0x08006659

080066ec <__sfp_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	@ (80066f4 <__sfp_lock_acquire+0x8>)
 80066ee:	f000 b93a 	b.w	8006966 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	20000a5d 	.word	0x20000a5d

080066f8 <__sfp_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	@ (8006700 <__sfp_lock_release+0x8>)
 80066fa:	f000 b935 	b.w	8006968 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	20000a5d 	.word	0x20000a5d

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sfp_lock_acquire>
 800670c:	6a23      	ldr	r3, [r4, #32]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sfp_lock_release>
 8006718:	4b04      	ldr	r3, [pc, #16]	@ (800672c <__sinit+0x28>)
 800671a:	6223      	str	r3, [r4, #32]
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <__sinit+0x2c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f5      	bne.n	8006710 <__sinit+0xc>
 8006724:	f7ff ffc4 	bl	80066b0 <global_stdio_init.part.0>
 8006728:	e7f2      	b.n	8006710 <__sinit+0xc>
 800672a:	bf00      	nop
 800672c:	08006671 	.word	0x08006671
 8006730:	20000a54 	.word	0x20000a54

08006734 <_fwalk_sglue>:
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	4607      	mov	r7, r0
 800673a:	4688      	mov	r8, r1
 800673c:	4614      	mov	r4, r2
 800673e:	2600      	movs	r6, #0
 8006740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006744:	f1b9 0901 	subs.w	r9, r9, #1
 8006748:	d505      	bpl.n	8006756 <_fwalk_sglue+0x22>
 800674a:	6824      	ldr	r4, [r4, #0]
 800674c:	2c00      	cmp	r4, #0
 800674e:	d1f7      	bne.n	8006740 <_fwalk_sglue+0xc>
 8006750:	4630      	mov	r0, r6
 8006752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006756:	89ab      	ldrh	r3, [r5, #12]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d907      	bls.n	800676c <_fwalk_sglue+0x38>
 800675c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006760:	3301      	adds	r3, #1
 8006762:	d003      	beq.n	800676c <_fwalk_sglue+0x38>
 8006764:	4629      	mov	r1, r5
 8006766:	4638      	mov	r0, r7
 8006768:	47c0      	blx	r8
 800676a:	4306      	orrs	r6, r0
 800676c:	3568      	adds	r5, #104	@ 0x68
 800676e:	e7e9      	b.n	8006744 <_fwalk_sglue+0x10>

08006770 <siprintf>:
 8006770:	b40e      	push	{r1, r2, r3}
 8006772:	b500      	push	{lr}
 8006774:	b09c      	sub	sp, #112	@ 0x70
 8006776:	ab1d      	add	r3, sp, #116	@ 0x74
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	9006      	str	r0, [sp, #24]
 800677c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006780:	4809      	ldr	r0, [pc, #36]	@ (80067a8 <siprintf+0x38>)
 8006782:	9107      	str	r1, [sp, #28]
 8006784:	9104      	str	r1, [sp, #16]
 8006786:	4909      	ldr	r1, [pc, #36]	@ (80067ac <siprintf+0x3c>)
 8006788:	f853 2b04 	ldr.w	r2, [r3], #4
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	6800      	ldr	r0, [r0, #0]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	a902      	add	r1, sp, #8
 8006794:	f001 fc22 	bl	8007fdc <_svfiprintf_r>
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	b01c      	add	sp, #112	@ 0x70
 80067a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a4:	b003      	add	sp, #12
 80067a6:	4770      	bx	lr
 80067a8:	20000020 	.word	0x20000020
 80067ac:	ffff0208 	.word	0xffff0208

080067b0 <__sread>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	460c      	mov	r4, r1
 80067b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b8:	f000 f886 	bl	80068c8 <_read_r>
 80067bc:	2800      	cmp	r0, #0
 80067be:	bfab      	itete	ge
 80067c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067c2:	89a3      	ldrhlt	r3, [r4, #12]
 80067c4:	181b      	addge	r3, r3, r0
 80067c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067ca:	bfac      	ite	ge
 80067cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067ce:	81a3      	strhlt	r3, [r4, #12]
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <__swrite>:
 80067d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d6:	461f      	mov	r7, r3
 80067d8:	898b      	ldrh	r3, [r1, #12]
 80067da:	05db      	lsls	r3, r3, #23
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	4616      	mov	r6, r2
 80067e2:	d505      	bpl.n	80067f0 <__swrite+0x1e>
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	2302      	movs	r3, #2
 80067ea:	2200      	movs	r2, #0
 80067ec:	f000 f85a 	bl	80068a4 <_lseek_r>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	4628      	mov	r0, r5
 8006802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006806:	f000 b871 	b.w	80068ec <_write_r>

0800680a <__sseek>:
 800680a:	b510      	push	{r4, lr}
 800680c:	460c      	mov	r4, r1
 800680e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006812:	f000 f847 	bl	80068a4 <_lseek_r>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	bf15      	itete	ne
 800681c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800681e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006826:	81a3      	strheq	r3, [r4, #12]
 8006828:	bf18      	it	ne
 800682a:	81a3      	strhne	r3, [r4, #12]
 800682c:	bd10      	pop	{r4, pc}

0800682e <__sclose>:
 800682e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006832:	f000 b827 	b.w	8006884 <_close_r>

08006836 <memmove>:
 8006836:	4288      	cmp	r0, r1
 8006838:	b510      	push	{r4, lr}
 800683a:	eb01 0402 	add.w	r4, r1, r2
 800683e:	d902      	bls.n	8006846 <memmove+0x10>
 8006840:	4284      	cmp	r4, r0
 8006842:	4623      	mov	r3, r4
 8006844:	d807      	bhi.n	8006856 <memmove+0x20>
 8006846:	1e43      	subs	r3, r0, #1
 8006848:	42a1      	cmp	r1, r4
 800684a:	d008      	beq.n	800685e <memmove+0x28>
 800684c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006850:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006854:	e7f8      	b.n	8006848 <memmove+0x12>
 8006856:	4402      	add	r2, r0
 8006858:	4601      	mov	r1, r0
 800685a:	428a      	cmp	r2, r1
 800685c:	d100      	bne.n	8006860 <memmove+0x2a>
 800685e:	bd10      	pop	{r4, pc}
 8006860:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006864:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006868:	e7f7      	b.n	800685a <memmove+0x24>

0800686a <memset>:
 800686a:	4402      	add	r2, r0
 800686c:	4603      	mov	r3, r0
 800686e:	4293      	cmp	r3, r2
 8006870:	d100      	bne.n	8006874 <memset+0xa>
 8006872:	4770      	bx	lr
 8006874:	f803 1b01 	strb.w	r1, [r3], #1
 8006878:	e7f9      	b.n	800686e <memset+0x4>
	...

0800687c <_localeconv_r>:
 800687c:	4800      	ldr	r0, [pc, #0]	@ (8006880 <_localeconv_r+0x4>)
 800687e:	4770      	bx	lr
 8006880:	20000160 	.word	0x20000160

08006884 <_close_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d06      	ldr	r5, [pc, #24]	@ (80068a0 <_close_r+0x1c>)
 8006888:	2300      	movs	r3, #0
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fb fb5e 	bl	8001f50 <_close>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_close_r+0x1a>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_close_r+0x1a>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20000a58 	.word	0x20000a58

080068a4 <_lseek_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d07      	ldr	r5, [pc, #28]	@ (80068c4 <_lseek_r+0x20>)
 80068a8:	4604      	mov	r4, r0
 80068aa:	4608      	mov	r0, r1
 80068ac:	4611      	mov	r1, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	602a      	str	r2, [r5, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f7fb fb73 	bl	8001f9e <_lseek>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_lseek_r+0x1e>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_lseek_r+0x1e>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	20000a58 	.word	0x20000a58

080068c8 <_read_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4d07      	ldr	r5, [pc, #28]	@ (80068e8 <_read_r+0x20>)
 80068cc:	4604      	mov	r4, r0
 80068ce:	4608      	mov	r0, r1
 80068d0:	4611      	mov	r1, r2
 80068d2:	2200      	movs	r2, #0
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7fb fb01 	bl	8001ede <_read>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_read_r+0x1e>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_read_r+0x1e>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	20000a58 	.word	0x20000a58

080068ec <_write_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d07      	ldr	r5, [pc, #28]	@ (800690c <_write_r+0x20>)
 80068f0:	4604      	mov	r4, r0
 80068f2:	4608      	mov	r0, r1
 80068f4:	4611      	mov	r1, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	602a      	str	r2, [r5, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f7fb fb0c 	bl	8001f18 <_write>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_write_r+0x1e>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_write_r+0x1e>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	20000a58 	.word	0x20000a58

08006910 <__errno>:
 8006910:	4b01      	ldr	r3, [pc, #4]	@ (8006918 <__errno+0x8>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000020 	.word	0x20000020

0800691c <__libc_init_array>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4d0d      	ldr	r5, [pc, #52]	@ (8006954 <__libc_init_array+0x38>)
 8006920:	4c0d      	ldr	r4, [pc, #52]	@ (8006958 <__libc_init_array+0x3c>)
 8006922:	1b64      	subs	r4, r4, r5
 8006924:	10a4      	asrs	r4, r4, #2
 8006926:	2600      	movs	r6, #0
 8006928:	42a6      	cmp	r6, r4
 800692a:	d109      	bne.n	8006940 <__libc_init_array+0x24>
 800692c:	4d0b      	ldr	r5, [pc, #44]	@ (800695c <__libc_init_array+0x40>)
 800692e:	4c0c      	ldr	r4, [pc, #48]	@ (8006960 <__libc_init_array+0x44>)
 8006930:	f002 f84a 	bl	80089c8 <_init>
 8006934:	1b64      	subs	r4, r4, r5
 8006936:	10a4      	asrs	r4, r4, #2
 8006938:	2600      	movs	r6, #0
 800693a:	42a6      	cmp	r6, r4
 800693c:	d105      	bne.n	800694a <__libc_init_array+0x2e>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	f855 3b04 	ldr.w	r3, [r5], #4
 8006944:	4798      	blx	r3
 8006946:	3601      	adds	r6, #1
 8006948:	e7ee      	b.n	8006928 <__libc_init_array+0xc>
 800694a:	f855 3b04 	ldr.w	r3, [r5], #4
 800694e:	4798      	blx	r3
 8006950:	3601      	adds	r6, #1
 8006952:	e7f2      	b.n	800693a <__libc_init_array+0x1e>
 8006954:	080095c0 	.word	0x080095c0
 8006958:	080095c0 	.word	0x080095c0
 800695c:	080095c0 	.word	0x080095c0
 8006960:	080095c4 	.word	0x080095c4

08006964 <__retarget_lock_init_recursive>:
 8006964:	4770      	bx	lr

08006966 <__retarget_lock_acquire_recursive>:
 8006966:	4770      	bx	lr

08006968 <__retarget_lock_release_recursive>:
 8006968:	4770      	bx	lr

0800696a <memcpy>:
 800696a:	440a      	add	r2, r1
 800696c:	4291      	cmp	r1, r2
 800696e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006972:	d100      	bne.n	8006976 <memcpy+0xc>
 8006974:	4770      	bx	lr
 8006976:	b510      	push	{r4, lr}
 8006978:	f811 4b01 	ldrb.w	r4, [r1], #1
 800697c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006980:	4291      	cmp	r1, r2
 8006982:	d1f9      	bne.n	8006978 <memcpy+0xe>
 8006984:	bd10      	pop	{r4, pc}

08006986 <quorem>:
 8006986:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	6903      	ldr	r3, [r0, #16]
 800698c:	690c      	ldr	r4, [r1, #16]
 800698e:	42a3      	cmp	r3, r4
 8006990:	4607      	mov	r7, r0
 8006992:	db7e      	blt.n	8006a92 <quorem+0x10c>
 8006994:	3c01      	subs	r4, #1
 8006996:	f101 0814 	add.w	r8, r1, #20
 800699a:	00a3      	lsls	r3, r4, #2
 800699c:	f100 0514 	add.w	r5, r0, #20
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069b0:	3301      	adds	r3, #1
 80069b2:	429a      	cmp	r2, r3
 80069b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80069bc:	d32e      	bcc.n	8006a1c <quorem+0x96>
 80069be:	f04f 0a00 	mov.w	sl, #0
 80069c2:	46c4      	mov	ip, r8
 80069c4:	46ae      	mov	lr, r5
 80069c6:	46d3      	mov	fp, sl
 80069c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80069cc:	b298      	uxth	r0, r3
 80069ce:	fb06 a000 	mla	r0, r6, r0, sl
 80069d2:	0c02      	lsrs	r2, r0, #16
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	fb06 2303 	mla	r3, r6, r3, r2
 80069da:	f8de 2000 	ldr.w	r2, [lr]
 80069de:	b280      	uxth	r0, r0
 80069e0:	b292      	uxth	r2, r2
 80069e2:	1a12      	subs	r2, r2, r0
 80069e4:	445a      	add	r2, fp
 80069e6:	f8de 0000 	ldr.w	r0, [lr]
 80069ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069f8:	b292      	uxth	r2, r2
 80069fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069fe:	45e1      	cmp	r9, ip
 8006a00:	f84e 2b04 	str.w	r2, [lr], #4
 8006a04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a08:	d2de      	bcs.n	80069c8 <quorem+0x42>
 8006a0a:	9b00      	ldr	r3, [sp, #0]
 8006a0c:	58eb      	ldr	r3, [r5, r3]
 8006a0e:	b92b      	cbnz	r3, 8006a1c <quorem+0x96>
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	3b04      	subs	r3, #4
 8006a14:	429d      	cmp	r5, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	d32f      	bcc.n	8006a7a <quorem+0xf4>
 8006a1a:	613c      	str	r4, [r7, #16]
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f001 f979 	bl	8007d14 <__mcmp>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	db25      	blt.n	8006a72 <quorem+0xec>
 8006a26:	4629      	mov	r1, r5
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a2e:	f8d1 c000 	ldr.w	ip, [r1]
 8006a32:	fa1f fe82 	uxth.w	lr, r2
 8006a36:	fa1f f38c 	uxth.w	r3, ip
 8006a3a:	eba3 030e 	sub.w	r3, r3, lr
 8006a3e:	4403      	add	r3, r0
 8006a40:	0c12      	lsrs	r2, r2, #16
 8006a42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a50:	45c1      	cmp	r9, r8
 8006a52:	f841 3b04 	str.w	r3, [r1], #4
 8006a56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a5a:	d2e6      	bcs.n	8006a2a <quorem+0xa4>
 8006a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a64:	b922      	cbnz	r2, 8006a70 <quorem+0xea>
 8006a66:	3b04      	subs	r3, #4
 8006a68:	429d      	cmp	r5, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	d30b      	bcc.n	8006a86 <quorem+0x100>
 8006a6e:	613c      	str	r4, [r7, #16]
 8006a70:	3601      	adds	r6, #1
 8006a72:	4630      	mov	r0, r6
 8006a74:	b003      	add	sp, #12
 8006a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	3b04      	subs	r3, #4
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	d1cb      	bne.n	8006a1a <quorem+0x94>
 8006a82:	3c01      	subs	r4, #1
 8006a84:	e7c6      	b.n	8006a14 <quorem+0x8e>
 8006a86:	6812      	ldr	r2, [r2, #0]
 8006a88:	3b04      	subs	r3, #4
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	d1ef      	bne.n	8006a6e <quorem+0xe8>
 8006a8e:	3c01      	subs	r4, #1
 8006a90:	e7ea      	b.n	8006a68 <quorem+0xe2>
 8006a92:	2000      	movs	r0, #0
 8006a94:	e7ee      	b.n	8006a74 <quorem+0xee>
	...

08006a98 <_dtoa_r>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	69c7      	ldr	r7, [r0, #28]
 8006a9e:	b099      	sub	sp, #100	@ 0x64
 8006aa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006aa4:	ec55 4b10 	vmov	r4, r5, d0
 8006aa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006aaa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006aac:	4683      	mov	fp, r0
 8006aae:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ab0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ab2:	b97f      	cbnz	r7, 8006ad4 <_dtoa_r+0x3c>
 8006ab4:	2010      	movs	r0, #16
 8006ab6:	f000 fdfd 	bl	80076b4 <malloc>
 8006aba:	4602      	mov	r2, r0
 8006abc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ac0:	b920      	cbnz	r0, 8006acc <_dtoa_r+0x34>
 8006ac2:	4ba7      	ldr	r3, [pc, #668]	@ (8006d60 <_dtoa_r+0x2c8>)
 8006ac4:	21ef      	movs	r1, #239	@ 0xef
 8006ac6:	48a7      	ldr	r0, [pc, #668]	@ (8006d64 <_dtoa_r+0x2cc>)
 8006ac8:	f001 fc40 	bl	800834c <__assert_func>
 8006acc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ad0:	6007      	str	r7, [r0, #0]
 8006ad2:	60c7      	str	r7, [r0, #12]
 8006ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	b159      	cbz	r1, 8006af4 <_dtoa_r+0x5c>
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	604a      	str	r2, [r1, #4]
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4093      	lsls	r3, r2
 8006ae4:	608b      	str	r3, [r1, #8]
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 feda 	bl	80078a0 <_Bfree>
 8006aec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	1e2b      	subs	r3, r5, #0
 8006af6:	bfb9      	ittee	lt
 8006af8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006afc:	9303      	strlt	r3, [sp, #12]
 8006afe:	2300      	movge	r3, #0
 8006b00:	6033      	strge	r3, [r6, #0]
 8006b02:	9f03      	ldr	r7, [sp, #12]
 8006b04:	4b98      	ldr	r3, [pc, #608]	@ (8006d68 <_dtoa_r+0x2d0>)
 8006b06:	bfbc      	itt	lt
 8006b08:	2201      	movlt	r2, #1
 8006b0a:	6032      	strlt	r2, [r6, #0]
 8006b0c:	43bb      	bics	r3, r7
 8006b0e:	d112      	bne.n	8006b36 <_dtoa_r+0x9e>
 8006b10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b1c:	4323      	orrs	r3, r4
 8006b1e:	f000 854d 	beq.w	80075bc <_dtoa_r+0xb24>
 8006b22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d7c <_dtoa_r+0x2e4>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 854f 	beq.w	80075cc <_dtoa_r+0xb34>
 8006b2e:	f10a 0303 	add.w	r3, sl, #3
 8006b32:	f000 bd49 	b.w	80075c8 <_dtoa_r+0xb30>
 8006b36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	ec51 0b17 	vmov	r0, r1, d7
 8006b40:	2300      	movs	r3, #0
 8006b42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b46:	f7f9 ffc7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	b158      	cbz	r0, 8006b66 <_dtoa_r+0xce>
 8006b4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b50:	2301      	movs	r3, #1
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b56:	b113      	cbz	r3, 8006b5e <_dtoa_r+0xc6>
 8006b58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b5a:	4b84      	ldr	r3, [pc, #528]	@ (8006d6c <_dtoa_r+0x2d4>)
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d80 <_dtoa_r+0x2e8>
 8006b62:	f000 bd33 	b.w	80075cc <_dtoa_r+0xb34>
 8006b66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b6a:	aa16      	add	r2, sp, #88	@ 0x58
 8006b6c:	a917      	add	r1, sp, #92	@ 0x5c
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f001 f980 	bl	8007e74 <__d2b>
 8006b74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b78:	4681      	mov	r9, r0
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d077      	beq.n	8006c6e <_dtoa_r+0x1d6>
 8006b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4b74      	ldr	r3, [pc, #464]	@ (8006d70 <_dtoa_r+0x2d8>)
 8006b9e:	f7f9 fb7b 	bl	8000298 <__aeabi_dsub>
 8006ba2:	a369      	add	r3, pc, #420	@ (adr r3, 8006d48 <_dtoa_r+0x2b0>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fd2e 	bl	8000608 <__aeabi_dmul>
 8006bac:	a368      	add	r3, pc, #416	@ (adr r3, 8006d50 <_dtoa_r+0x2b8>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f7f9 fb73 	bl	800029c <__adddf3>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4630      	mov	r0, r6
 8006bba:	460d      	mov	r5, r1
 8006bbc:	f7f9 fcba 	bl	8000534 <__aeabi_i2d>
 8006bc0:	a365      	add	r3, pc, #404	@ (adr r3, 8006d58 <_dtoa_r+0x2c0>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fd1f 	bl	8000608 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 fb63 	bl	800029c <__adddf3>
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	f7f9 ffc5 	bl	8000b68 <__aeabi_d2iz>
 8006bde:	2200      	movs	r2, #0
 8006be0:	4607      	mov	r7, r0
 8006be2:	2300      	movs	r3, #0
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 ff80 	bl	8000aec <__aeabi_dcmplt>
 8006bec:	b140      	cbz	r0, 8006c00 <_dtoa_r+0x168>
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7f9 fca0 	bl	8000534 <__aeabi_i2d>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	f7f9 ff6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bfc:	b900      	cbnz	r0, 8006c00 <_dtoa_r+0x168>
 8006bfe:	3f01      	subs	r7, #1
 8006c00:	2f16      	cmp	r7, #22
 8006c02:	d851      	bhi.n	8006ca8 <_dtoa_r+0x210>
 8006c04:	4b5b      	ldr	r3, [pc, #364]	@ (8006d74 <_dtoa_r+0x2dc>)
 8006c06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c12:	f7f9 ff6b 	bl	8000aec <__aeabi_dcmplt>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d048      	beq.n	8006cac <_dtoa_r+0x214>
 8006c1a:	3f01      	subs	r7, #1
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c22:	1b9b      	subs	r3, r3, r6
 8006c24:	1e5a      	subs	r2, r3, #1
 8006c26:	bf44      	itt	mi
 8006c28:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c2c:	2300      	movmi	r3, #0
 8006c2e:	9208      	str	r2, [sp, #32]
 8006c30:	bf54      	ite	pl
 8006c32:	f04f 0800 	movpl.w	r8, #0
 8006c36:	9308      	strmi	r3, [sp, #32]
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	db39      	blt.n	8006cb0 <_dtoa_r+0x218>
 8006c3c:	9b08      	ldr	r3, [sp, #32]
 8006c3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c40:	443b      	add	r3, r7
 8006c42:	9308      	str	r3, [sp, #32]
 8006c44:	2300      	movs	r3, #0
 8006c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4a:	2b09      	cmp	r3, #9
 8006c4c:	d864      	bhi.n	8006d18 <_dtoa_r+0x280>
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	bfc4      	itt	gt
 8006c52:	3b04      	subgt	r3, #4
 8006c54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c58:	f1a3 0302 	sub.w	r3, r3, #2
 8006c5c:	bfcc      	ite	gt
 8006c5e:	2400      	movgt	r4, #0
 8006c60:	2401      	movle	r4, #1
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d863      	bhi.n	8006d2e <_dtoa_r+0x296>
 8006c66:	e8df f003 	tbb	[pc, r3]
 8006c6a:	372a      	.short	0x372a
 8006c6c:	5535      	.short	0x5535
 8006c6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c72:	441e      	add	r6, r3
 8006c74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	bfc1      	itttt	gt
 8006c7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c80:	409f      	lslgt	r7, r3
 8006c82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c8a:	bfd6      	itet	le
 8006c8c:	f1c3 0320 	rsble	r3, r3, #32
 8006c90:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c94:	fa04 f003 	lslle.w	r0, r4, r3
 8006c98:	f7f9 fc3c 	bl	8000514 <__aeabi_ui2d>
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ca2:	3e01      	subs	r6, #1
 8006ca4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ca6:	e777      	b.n	8006b98 <_dtoa_r+0x100>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e7b8      	b.n	8006c1e <_dtoa_r+0x186>
 8006cac:	9012      	str	r0, [sp, #72]	@ 0x48
 8006cae:	e7b7      	b.n	8006c20 <_dtoa_r+0x188>
 8006cb0:	427b      	negs	r3, r7
 8006cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	eba8 0807 	sub.w	r8, r8, r7
 8006cba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cbc:	e7c4      	b.n	8006c48 <_dtoa_r+0x1b0>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dc35      	bgt.n	8006d34 <_dtoa_r+0x29c>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cd2:	e00b      	b.n	8006cec <_dtoa_r+0x254>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e7f3      	b.n	8006cc0 <_dtoa_r+0x228>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	bfb8      	it	lt
 8006cea:	2301      	movlt	r3, #1
 8006cec:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	f102 0514 	add.w	r5, r2, #20
 8006cf8:	429d      	cmp	r5, r3
 8006cfa:	d91f      	bls.n	8006d3c <_dtoa_r+0x2a4>
 8006cfc:	6041      	str	r1, [r0, #4]
 8006cfe:	4658      	mov	r0, fp
 8006d00:	f000 fd8e 	bl	8007820 <_Balloc>
 8006d04:	4682      	mov	sl, r0
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d13c      	bne.n	8006d84 <_dtoa_r+0x2ec>
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <_dtoa_r+0x2e0>)
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d12:	e6d8      	b.n	8006ac6 <_dtoa_r+0x2e>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e7e0      	b.n	8006cda <_dtoa_r+0x242>
 8006d18:	2401      	movs	r4, #1
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d20:	f04f 33ff 	mov.w	r3, #4294967295
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2312      	movs	r3, #18
 8006d2c:	e7d0      	b.n	8006cd0 <_dtoa_r+0x238>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d32:	e7f5      	b.n	8006d20 <_dtoa_r+0x288>
 8006d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	9307      	str	r3, [sp, #28]
 8006d3a:	e7d7      	b.n	8006cec <_dtoa_r+0x254>
 8006d3c:	3101      	adds	r1, #1
 8006d3e:	0052      	lsls	r2, r2, #1
 8006d40:	e7d8      	b.n	8006cf4 <_dtoa_r+0x25c>
 8006d42:	bf00      	nop
 8006d44:	f3af 8000 	nop.w
 8006d48:	636f4361 	.word	0x636f4361
 8006d4c:	3fd287a7 	.word	0x3fd287a7
 8006d50:	8b60c8b3 	.word	0x8b60c8b3
 8006d54:	3fc68a28 	.word	0x3fc68a28
 8006d58:	509f79fb 	.word	0x509f79fb
 8006d5c:	3fd34413 	.word	0x3fd34413
 8006d60:	08009285 	.word	0x08009285
 8006d64:	0800929c 	.word	0x0800929c
 8006d68:	7ff00000 	.word	0x7ff00000
 8006d6c:	08009255 	.word	0x08009255
 8006d70:	3ff80000 	.word	0x3ff80000
 8006d74:	08009398 	.word	0x08009398
 8006d78:	080092f4 	.word	0x080092f4
 8006d7c:	08009281 	.word	0x08009281
 8006d80:	08009254 	.word	0x08009254
 8006d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d88:	6018      	str	r0, [r3, #0]
 8006d8a:	9b07      	ldr	r3, [sp, #28]
 8006d8c:	2b0e      	cmp	r3, #14
 8006d8e:	f200 80a4 	bhi.w	8006eda <_dtoa_r+0x442>
 8006d92:	2c00      	cmp	r4, #0
 8006d94:	f000 80a1 	beq.w	8006eda <_dtoa_r+0x442>
 8006d98:	2f00      	cmp	r7, #0
 8006d9a:	dd33      	ble.n	8006e04 <_dtoa_r+0x36c>
 8006d9c:	4bad      	ldr	r3, [pc, #692]	@ (8007054 <_dtoa_r+0x5bc>)
 8006d9e:	f007 020f 	and.w	r2, r7, #15
 8006da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006da6:	ed93 7b00 	vldr	d7, [r3]
 8006daa:	05f8      	lsls	r0, r7, #23
 8006dac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006db0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006db4:	d516      	bpl.n	8006de4 <_dtoa_r+0x34c>
 8006db6:	4ba8      	ldr	r3, [pc, #672]	@ (8007058 <_dtoa_r+0x5c0>)
 8006db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dc0:	f7f9 fd4c 	bl	800085c <__aeabi_ddiv>
 8006dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc8:	f004 040f 	and.w	r4, r4, #15
 8006dcc:	2603      	movs	r6, #3
 8006dce:	4da2      	ldr	r5, [pc, #648]	@ (8007058 <_dtoa_r+0x5c0>)
 8006dd0:	b954      	cbnz	r4, 8006de8 <_dtoa_r+0x350>
 8006dd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dda:	f7f9 fd3f 	bl	800085c <__aeabi_ddiv>
 8006dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de2:	e028      	b.n	8006e36 <_dtoa_r+0x39e>
 8006de4:	2602      	movs	r6, #2
 8006de6:	e7f2      	b.n	8006dce <_dtoa_r+0x336>
 8006de8:	07e1      	lsls	r1, r4, #31
 8006dea:	d508      	bpl.n	8006dfe <_dtoa_r+0x366>
 8006dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006df4:	f7f9 fc08 	bl	8000608 <__aeabi_dmul>
 8006df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	1064      	asrs	r4, r4, #1
 8006e00:	3508      	adds	r5, #8
 8006e02:	e7e5      	b.n	8006dd0 <_dtoa_r+0x338>
 8006e04:	f000 80d2 	beq.w	8006fac <_dtoa_r+0x514>
 8006e08:	427c      	negs	r4, r7
 8006e0a:	4b92      	ldr	r3, [pc, #584]	@ (8007054 <_dtoa_r+0x5bc>)
 8006e0c:	4d92      	ldr	r5, [pc, #584]	@ (8007058 <_dtoa_r+0x5c0>)
 8006e0e:	f004 020f 	and.w	r2, r4, #15
 8006e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e1e:	f7f9 fbf3 	bl	8000608 <__aeabi_dmul>
 8006e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e26:	1124      	asrs	r4, r4, #4
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2602      	movs	r6, #2
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	f040 80b2 	bne.w	8006f96 <_dtoa_r+0x4fe>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1d3      	bne.n	8006dde <_dtoa_r+0x346>
 8006e36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80b7 	beq.w	8006fb0 <_dtoa_r+0x518>
 8006e42:	4b86      	ldr	r3, [pc, #536]	@ (800705c <_dtoa_r+0x5c4>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	4620      	mov	r0, r4
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f7f9 fe4f 	bl	8000aec <__aeabi_dcmplt>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f000 80ae 	beq.w	8006fb0 <_dtoa_r+0x518>
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80aa 	beq.w	8006fb0 <_dtoa_r+0x518>
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd37      	ble.n	8006ed2 <_dtoa_r+0x43a>
 8006e62:	1e7b      	subs	r3, r7, #1
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	4620      	mov	r0, r4
 8006e68:	4b7d      	ldr	r3, [pc, #500]	@ (8007060 <_dtoa_r+0x5c8>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	f7f9 fbcb 	bl	8000608 <__aeabi_dmul>
 8006e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e76:	9c00      	ldr	r4, [sp, #0]
 8006e78:	3601      	adds	r6, #1
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7f9 fb5a 	bl	8000534 <__aeabi_i2d>
 8006e80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e84:	f7f9 fbc0 	bl	8000608 <__aeabi_dmul>
 8006e88:	4b76      	ldr	r3, [pc, #472]	@ (8007064 <_dtoa_r+0x5cc>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f7f9 fa06 	bl	800029c <__adddf3>
 8006e90:	4605      	mov	r5, r0
 8006e92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	f040 808d 	bne.w	8006fb6 <_dtoa_r+0x51e>
 8006e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea0:	4b71      	ldr	r3, [pc, #452]	@ (8007068 <_dtoa_r+0x5d0>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f7f9 f9f8 	bl	8000298 <__aeabi_dsub>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4633      	mov	r3, r6
 8006eb4:	f7f9 fe38 	bl	8000b28 <__aeabi_dcmpgt>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f040 828b 	bne.w	80073d4 <_dtoa_r+0x93c>
 8006ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec2:	462a      	mov	r2, r5
 8006ec4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ec8:	f7f9 fe10 	bl	8000aec <__aeabi_dcmplt>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f040 8128 	bne.w	8007122 <_dtoa_r+0x68a>
 8006ed2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ed6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006eda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f2c0 815a 	blt.w	8007196 <_dtoa_r+0x6fe>
 8006ee2:	2f0e      	cmp	r7, #14
 8006ee4:	f300 8157 	bgt.w	8007196 <_dtoa_r+0x6fe>
 8006ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8007054 <_dtoa_r+0x5bc>)
 8006eea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eee:	ed93 7b00 	vldr	d7, [r3]
 8006ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	ed8d 7b00 	vstr	d7, [sp]
 8006efa:	da03      	bge.n	8006f04 <_dtoa_r+0x46c>
 8006efc:	9b07      	ldr	r3, [sp, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f340 8101 	ble.w	8007106 <_dtoa_r+0x66e>
 8006f04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f08:	4656      	mov	r6, sl
 8006f0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 fca3 	bl	800085c <__aeabi_ddiv>
 8006f16:	f7f9 fe27 	bl	8000b68 <__aeabi_d2iz>
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	f7f9 fb0a 	bl	8000534 <__aeabi_i2d>
 8006f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f24:	f7f9 fb70 	bl	8000608 <__aeabi_dmul>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f34:	f7f9 f9b0 	bl	8000298 <__aeabi_dsub>
 8006f38:	f806 4b01 	strb.w	r4, [r6], #1
 8006f3c:	9d07      	ldr	r5, [sp, #28]
 8006f3e:	eba6 040a 	sub.w	r4, r6, sl
 8006f42:	42a5      	cmp	r5, r4
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	f040 8117 	bne.w	800717a <_dtoa_r+0x6e2>
 8006f4c:	f7f9 f9a6 	bl	800029c <__adddf3>
 8006f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f54:	4604      	mov	r4, r0
 8006f56:	460d      	mov	r5, r1
 8006f58:	f7f9 fde6 	bl	8000b28 <__aeabi_dcmpgt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f040 80f9 	bne.w	8007154 <_dtoa_r+0x6bc>
 8006f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 fdb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f6e:	b118      	cbz	r0, 8006f78 <_dtoa_r+0x4e0>
 8006f70:	f018 0f01 	tst.w	r8, #1
 8006f74:	f040 80ee 	bne.w	8007154 <_dtoa_r+0x6bc>
 8006f78:	4649      	mov	r1, r9
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 fc90 	bl	80078a0 <_Bfree>
 8006f80:	2300      	movs	r3, #0
 8006f82:	7033      	strb	r3, [r6, #0]
 8006f84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f86:	3701      	adds	r7, #1
 8006f88:	601f      	str	r7, [r3, #0]
 8006f8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 831d 	beq.w	80075cc <_dtoa_r+0xb34>
 8006f92:	601e      	str	r6, [r3, #0]
 8006f94:	e31a      	b.n	80075cc <_dtoa_r+0xb34>
 8006f96:	07e2      	lsls	r2, r4, #31
 8006f98:	d505      	bpl.n	8006fa6 <_dtoa_r+0x50e>
 8006f9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f9e:	f7f9 fb33 	bl	8000608 <__aeabi_dmul>
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	1064      	asrs	r4, r4, #1
 8006fa8:	3508      	adds	r5, #8
 8006faa:	e73f      	b.n	8006e2c <_dtoa_r+0x394>
 8006fac:	2602      	movs	r6, #2
 8006fae:	e742      	b.n	8006e36 <_dtoa_r+0x39e>
 8006fb0:	9c07      	ldr	r4, [sp, #28]
 8006fb2:	9704      	str	r7, [sp, #16]
 8006fb4:	e761      	b.n	8006e7a <_dtoa_r+0x3e2>
 8006fb6:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <_dtoa_r+0x5bc>)
 8006fb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fc2:	4454      	add	r4, sl
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d053      	beq.n	8007070 <_dtoa_r+0x5d8>
 8006fc8:	4928      	ldr	r1, [pc, #160]	@ (800706c <_dtoa_r+0x5d4>)
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f7f9 fc46 	bl	800085c <__aeabi_ddiv>
 8006fd0:	4633      	mov	r3, r6
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	f7f9 f960 	bl	8000298 <__aeabi_dsub>
 8006fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fdc:	4656      	mov	r6, sl
 8006fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe2:	f7f9 fdc1 	bl	8000b68 <__aeabi_d2iz>
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	f7f9 faa4 	bl	8000534 <__aeabi_i2d>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff4:	f7f9 f950 	bl	8000298 <__aeabi_dsub>
 8006ff8:	3530      	adds	r5, #48	@ 0x30
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007002:	f806 5b01 	strb.w	r5, [r6], #1
 8007006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800700a:	f7f9 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800700e:	2800      	cmp	r0, #0
 8007010:	d171      	bne.n	80070f6 <_dtoa_r+0x65e>
 8007012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007016:	4911      	ldr	r1, [pc, #68]	@ (800705c <_dtoa_r+0x5c4>)
 8007018:	2000      	movs	r0, #0
 800701a:	f7f9 f93d 	bl	8000298 <__aeabi_dsub>
 800701e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007022:	f7f9 fd63 	bl	8000aec <__aeabi_dcmplt>
 8007026:	2800      	cmp	r0, #0
 8007028:	f040 8095 	bne.w	8007156 <_dtoa_r+0x6be>
 800702c:	42a6      	cmp	r6, r4
 800702e:	f43f af50 	beq.w	8006ed2 <_dtoa_r+0x43a>
 8007032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007036:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <_dtoa_r+0x5c8>)
 8007038:	2200      	movs	r2, #0
 800703a:	f7f9 fae5 	bl	8000608 <__aeabi_dmul>
 800703e:	4b08      	ldr	r3, [pc, #32]	@ (8007060 <_dtoa_r+0x5c8>)
 8007040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007044:	2200      	movs	r2, #0
 8007046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704a:	f7f9 fadd 	bl	8000608 <__aeabi_dmul>
 800704e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007052:	e7c4      	b.n	8006fde <_dtoa_r+0x546>
 8007054:	08009398 	.word	0x08009398
 8007058:	08009370 	.word	0x08009370
 800705c:	3ff00000 	.word	0x3ff00000
 8007060:	40240000 	.word	0x40240000
 8007064:	401c0000 	.word	0x401c0000
 8007068:	40140000 	.word	0x40140000
 800706c:	3fe00000 	.word	0x3fe00000
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	f7f9 fac8 	bl	8000608 <__aeabi_dmul>
 8007078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800707c:	9415      	str	r4, [sp, #84]	@ 0x54
 800707e:	4656      	mov	r6, sl
 8007080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007084:	f7f9 fd70 	bl	8000b68 <__aeabi_d2iz>
 8007088:	4605      	mov	r5, r0
 800708a:	f7f9 fa53 	bl	8000534 <__aeabi_i2d>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007096:	f7f9 f8ff 	bl	8000298 <__aeabi_dsub>
 800709a:	3530      	adds	r5, #48	@ 0x30
 800709c:	f806 5b01 	strb.w	r5, [r6], #1
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	d124      	bne.n	80070fa <_dtoa_r+0x662>
 80070b0:	4bac      	ldr	r3, [pc, #688]	@ (8007364 <_dtoa_r+0x8cc>)
 80070b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070b6:	f7f9 f8f1 	bl	800029c <__adddf3>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c2:	f7f9 fd31 	bl	8000b28 <__aeabi_dcmpgt>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d145      	bne.n	8007156 <_dtoa_r+0x6be>
 80070ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070ce:	49a5      	ldr	r1, [pc, #660]	@ (8007364 <_dtoa_r+0x8cc>)
 80070d0:	2000      	movs	r0, #0
 80070d2:	f7f9 f8e1 	bl	8000298 <__aeabi_dsub>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070de:	f7f9 fd05 	bl	8000aec <__aeabi_dcmplt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f43f aef5 	beq.w	8006ed2 <_dtoa_r+0x43a>
 80070e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80070ea:	1e73      	subs	r3, r6, #1
 80070ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80070ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070f2:	2b30      	cmp	r3, #48	@ 0x30
 80070f4:	d0f8      	beq.n	80070e8 <_dtoa_r+0x650>
 80070f6:	9f04      	ldr	r7, [sp, #16]
 80070f8:	e73e      	b.n	8006f78 <_dtoa_r+0x4e0>
 80070fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007368 <_dtoa_r+0x8d0>)
 80070fc:	f7f9 fa84 	bl	8000608 <__aeabi_dmul>
 8007100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007104:	e7bc      	b.n	8007080 <_dtoa_r+0x5e8>
 8007106:	d10c      	bne.n	8007122 <_dtoa_r+0x68a>
 8007108:	4b98      	ldr	r3, [pc, #608]	@ (800736c <_dtoa_r+0x8d4>)
 800710a:	2200      	movs	r2, #0
 800710c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007110:	f7f9 fa7a 	bl	8000608 <__aeabi_dmul>
 8007114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007118:	f7f9 fcfc 	bl	8000b14 <__aeabi_dcmpge>
 800711c:	2800      	cmp	r0, #0
 800711e:	f000 8157 	beq.w	80073d0 <_dtoa_r+0x938>
 8007122:	2400      	movs	r4, #0
 8007124:	4625      	mov	r5, r4
 8007126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007128:	43db      	mvns	r3, r3
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	4656      	mov	r6, sl
 800712e:	2700      	movs	r7, #0
 8007130:	4621      	mov	r1, r4
 8007132:	4658      	mov	r0, fp
 8007134:	f000 fbb4 	bl	80078a0 <_Bfree>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d0dc      	beq.n	80070f6 <_dtoa_r+0x65e>
 800713c:	b12f      	cbz	r7, 800714a <_dtoa_r+0x6b2>
 800713e:	42af      	cmp	r7, r5
 8007140:	d003      	beq.n	800714a <_dtoa_r+0x6b2>
 8007142:	4639      	mov	r1, r7
 8007144:	4658      	mov	r0, fp
 8007146:	f000 fbab 	bl	80078a0 <_Bfree>
 800714a:	4629      	mov	r1, r5
 800714c:	4658      	mov	r0, fp
 800714e:	f000 fba7 	bl	80078a0 <_Bfree>
 8007152:	e7d0      	b.n	80070f6 <_dtoa_r+0x65e>
 8007154:	9704      	str	r7, [sp, #16]
 8007156:	4633      	mov	r3, r6
 8007158:	461e      	mov	r6, r3
 800715a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800715e:	2a39      	cmp	r2, #57	@ 0x39
 8007160:	d107      	bne.n	8007172 <_dtoa_r+0x6da>
 8007162:	459a      	cmp	sl, r3
 8007164:	d1f8      	bne.n	8007158 <_dtoa_r+0x6c0>
 8007166:	9a04      	ldr	r2, [sp, #16]
 8007168:	3201      	adds	r2, #1
 800716a:	9204      	str	r2, [sp, #16]
 800716c:	2230      	movs	r2, #48	@ 0x30
 800716e:	f88a 2000 	strb.w	r2, [sl]
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	3201      	adds	r2, #1
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	e7bd      	b.n	80070f6 <_dtoa_r+0x65e>
 800717a:	4b7b      	ldr	r3, [pc, #492]	@ (8007368 <_dtoa_r+0x8d0>)
 800717c:	2200      	movs	r2, #0
 800717e:	f7f9 fa43 	bl	8000608 <__aeabi_dmul>
 8007182:	2200      	movs	r2, #0
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	460d      	mov	r5, r1
 800718a:	f7f9 fca5 	bl	8000ad8 <__aeabi_dcmpeq>
 800718e:	2800      	cmp	r0, #0
 8007190:	f43f aebb 	beq.w	8006f0a <_dtoa_r+0x472>
 8007194:	e6f0      	b.n	8006f78 <_dtoa_r+0x4e0>
 8007196:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007198:	2a00      	cmp	r2, #0
 800719a:	f000 80db 	beq.w	8007354 <_dtoa_r+0x8bc>
 800719e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071a0:	2a01      	cmp	r2, #1
 80071a2:	f300 80bf 	bgt.w	8007324 <_dtoa_r+0x88c>
 80071a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	f000 80b7 	beq.w	800731c <_dtoa_r+0x884>
 80071ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80071b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071b4:	4646      	mov	r6, r8
 80071b6:	9a08      	ldr	r2, [sp, #32]
 80071b8:	2101      	movs	r1, #1
 80071ba:	441a      	add	r2, r3
 80071bc:	4658      	mov	r0, fp
 80071be:	4498      	add	r8, r3
 80071c0:	9208      	str	r2, [sp, #32]
 80071c2:	f000 fc21 	bl	8007a08 <__i2b>
 80071c6:	4605      	mov	r5, r0
 80071c8:	b15e      	cbz	r6, 80071e2 <_dtoa_r+0x74a>
 80071ca:	9b08      	ldr	r3, [sp, #32]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dd08      	ble.n	80071e2 <_dtoa_r+0x74a>
 80071d0:	42b3      	cmp	r3, r6
 80071d2:	9a08      	ldr	r2, [sp, #32]
 80071d4:	bfa8      	it	ge
 80071d6:	4633      	movge	r3, r6
 80071d8:	eba8 0803 	sub.w	r8, r8, r3
 80071dc:	1af6      	subs	r6, r6, r3
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	9308      	str	r3, [sp, #32]
 80071e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e4:	b1f3      	cbz	r3, 8007224 <_dtoa_r+0x78c>
 80071e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80b7 	beq.w	800735c <_dtoa_r+0x8c4>
 80071ee:	b18c      	cbz	r4, 8007214 <_dtoa_r+0x77c>
 80071f0:	4629      	mov	r1, r5
 80071f2:	4622      	mov	r2, r4
 80071f4:	4658      	mov	r0, fp
 80071f6:	f000 fcc7 	bl	8007b88 <__pow5mult>
 80071fa:	464a      	mov	r2, r9
 80071fc:	4601      	mov	r1, r0
 80071fe:	4605      	mov	r5, r0
 8007200:	4658      	mov	r0, fp
 8007202:	f000 fc17 	bl	8007a34 <__multiply>
 8007206:	4649      	mov	r1, r9
 8007208:	9004      	str	r0, [sp, #16]
 800720a:	4658      	mov	r0, fp
 800720c:	f000 fb48 	bl	80078a0 <_Bfree>
 8007210:	9b04      	ldr	r3, [sp, #16]
 8007212:	4699      	mov	r9, r3
 8007214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007216:	1b1a      	subs	r2, r3, r4
 8007218:	d004      	beq.n	8007224 <_dtoa_r+0x78c>
 800721a:	4649      	mov	r1, r9
 800721c:	4658      	mov	r0, fp
 800721e:	f000 fcb3 	bl	8007b88 <__pow5mult>
 8007222:	4681      	mov	r9, r0
 8007224:	2101      	movs	r1, #1
 8007226:	4658      	mov	r0, fp
 8007228:	f000 fbee 	bl	8007a08 <__i2b>
 800722c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800722e:	4604      	mov	r4, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 81cf 	beq.w	80075d4 <_dtoa_r+0xb3c>
 8007236:	461a      	mov	r2, r3
 8007238:	4601      	mov	r1, r0
 800723a:	4658      	mov	r0, fp
 800723c:	f000 fca4 	bl	8007b88 <__pow5mult>
 8007240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007242:	2b01      	cmp	r3, #1
 8007244:	4604      	mov	r4, r0
 8007246:	f300 8095 	bgt.w	8007374 <_dtoa_r+0x8dc>
 800724a:	9b02      	ldr	r3, [sp, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 8087 	bne.w	8007360 <_dtoa_r+0x8c8>
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 8089 	bne.w	8007370 <_dtoa_r+0x8d8>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007264:	0d1b      	lsrs	r3, r3, #20
 8007266:	051b      	lsls	r3, r3, #20
 8007268:	b12b      	cbz	r3, 8007276 <_dtoa_r+0x7de>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	3301      	adds	r3, #1
 800726e:	9308      	str	r3, [sp, #32]
 8007270:	f108 0801 	add.w	r8, r8, #1
 8007274:	2301      	movs	r3, #1
 8007276:	930a      	str	r3, [sp, #40]	@ 0x28
 8007278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 81b0 	beq.w	80075e0 <_dtoa_r+0xb48>
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007286:	6918      	ldr	r0, [r3, #16]
 8007288:	f000 fb72 	bl	8007970 <__hi0bits>
 800728c:	f1c0 0020 	rsb	r0, r0, #32
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	4418      	add	r0, r3
 8007294:	f010 001f 	ands.w	r0, r0, #31
 8007298:	d077      	beq.n	800738a <_dtoa_r+0x8f2>
 800729a:	f1c0 0320 	rsb	r3, r0, #32
 800729e:	2b04      	cmp	r3, #4
 80072a0:	dd6b      	ble.n	800737a <_dtoa_r+0x8e2>
 80072a2:	9b08      	ldr	r3, [sp, #32]
 80072a4:	f1c0 001c 	rsb	r0, r0, #28
 80072a8:	4403      	add	r3, r0
 80072aa:	4480      	add	r8, r0
 80072ac:	4406      	add	r6, r0
 80072ae:	9308      	str	r3, [sp, #32]
 80072b0:	f1b8 0f00 	cmp.w	r8, #0
 80072b4:	dd05      	ble.n	80072c2 <_dtoa_r+0x82a>
 80072b6:	4649      	mov	r1, r9
 80072b8:	4642      	mov	r2, r8
 80072ba:	4658      	mov	r0, fp
 80072bc:	f000 fcbe 	bl	8007c3c <__lshift>
 80072c0:	4681      	mov	r9, r0
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd05      	ble.n	80072d4 <_dtoa_r+0x83c>
 80072c8:	4621      	mov	r1, r4
 80072ca:	461a      	mov	r2, r3
 80072cc:	4658      	mov	r0, fp
 80072ce:	f000 fcb5 	bl	8007c3c <__lshift>
 80072d2:	4604      	mov	r4, r0
 80072d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d059      	beq.n	800738e <_dtoa_r+0x8f6>
 80072da:	4621      	mov	r1, r4
 80072dc:	4648      	mov	r0, r9
 80072de:	f000 fd19 	bl	8007d14 <__mcmp>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	da53      	bge.n	800738e <_dtoa_r+0x8f6>
 80072e6:	1e7b      	subs	r3, r7, #1
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	4649      	mov	r1, r9
 80072ec:	2300      	movs	r3, #0
 80072ee:	220a      	movs	r2, #10
 80072f0:	4658      	mov	r0, fp
 80072f2:	f000 faf7 	bl	80078e4 <__multadd>
 80072f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072f8:	4681      	mov	r9, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8172 	beq.w	80075e4 <_dtoa_r+0xb4c>
 8007300:	2300      	movs	r3, #0
 8007302:	4629      	mov	r1, r5
 8007304:	220a      	movs	r2, #10
 8007306:	4658      	mov	r0, fp
 8007308:	f000 faec 	bl	80078e4 <__multadd>
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	4605      	mov	r5, r0
 8007312:	dc67      	bgt.n	80073e4 <_dtoa_r+0x94c>
 8007314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007316:	2b02      	cmp	r3, #2
 8007318:	dc41      	bgt.n	800739e <_dtoa_r+0x906>
 800731a:	e063      	b.n	80073e4 <_dtoa_r+0x94c>
 800731c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800731e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007322:	e746      	b.n	80071b2 <_dtoa_r+0x71a>
 8007324:	9b07      	ldr	r3, [sp, #28]
 8007326:	1e5c      	subs	r4, r3, #1
 8007328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800732a:	42a3      	cmp	r3, r4
 800732c:	bfbf      	itttt	lt
 800732e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007330:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007332:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007334:	1ae3      	sublt	r3, r4, r3
 8007336:	bfb4      	ite	lt
 8007338:	18d2      	addlt	r2, r2, r3
 800733a:	1b1c      	subge	r4, r3, r4
 800733c:	9b07      	ldr	r3, [sp, #28]
 800733e:	bfbc      	itt	lt
 8007340:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007342:	2400      	movlt	r4, #0
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb5      	itete	lt
 8007348:	eba8 0603 	sublt.w	r6, r8, r3
 800734c:	9b07      	ldrge	r3, [sp, #28]
 800734e:	2300      	movlt	r3, #0
 8007350:	4646      	movge	r6, r8
 8007352:	e730      	b.n	80071b6 <_dtoa_r+0x71e>
 8007354:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007356:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007358:	4646      	mov	r6, r8
 800735a:	e735      	b.n	80071c8 <_dtoa_r+0x730>
 800735c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800735e:	e75c      	b.n	800721a <_dtoa_r+0x782>
 8007360:	2300      	movs	r3, #0
 8007362:	e788      	b.n	8007276 <_dtoa_r+0x7de>
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	40240000 	.word	0x40240000
 800736c:	40140000 	.word	0x40140000
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	e780      	b.n	8007276 <_dtoa_r+0x7de>
 8007374:	2300      	movs	r3, #0
 8007376:	930a      	str	r3, [sp, #40]	@ 0x28
 8007378:	e782      	b.n	8007280 <_dtoa_r+0x7e8>
 800737a:	d099      	beq.n	80072b0 <_dtoa_r+0x818>
 800737c:	9a08      	ldr	r2, [sp, #32]
 800737e:	331c      	adds	r3, #28
 8007380:	441a      	add	r2, r3
 8007382:	4498      	add	r8, r3
 8007384:	441e      	add	r6, r3
 8007386:	9208      	str	r2, [sp, #32]
 8007388:	e792      	b.n	80072b0 <_dtoa_r+0x818>
 800738a:	4603      	mov	r3, r0
 800738c:	e7f6      	b.n	800737c <_dtoa_r+0x8e4>
 800738e:	9b07      	ldr	r3, [sp, #28]
 8007390:	9704      	str	r7, [sp, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	dc20      	bgt.n	80073d8 <_dtoa_r+0x940>
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739a:	2b02      	cmp	r3, #2
 800739c:	dd1e      	ble.n	80073dc <_dtoa_r+0x944>
 800739e:	9b00      	ldr	r3, [sp, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f47f aec0 	bne.w	8007126 <_dtoa_r+0x68e>
 80073a6:	4621      	mov	r1, r4
 80073a8:	2205      	movs	r2, #5
 80073aa:	4658      	mov	r0, fp
 80073ac:	f000 fa9a 	bl	80078e4 <__multadd>
 80073b0:	4601      	mov	r1, r0
 80073b2:	4604      	mov	r4, r0
 80073b4:	4648      	mov	r0, r9
 80073b6:	f000 fcad 	bl	8007d14 <__mcmp>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f77f aeb3 	ble.w	8007126 <_dtoa_r+0x68e>
 80073c0:	4656      	mov	r6, sl
 80073c2:	2331      	movs	r3, #49	@ 0x31
 80073c4:	f806 3b01 	strb.w	r3, [r6], #1
 80073c8:	9b04      	ldr	r3, [sp, #16]
 80073ca:	3301      	adds	r3, #1
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	e6ae      	b.n	800712e <_dtoa_r+0x696>
 80073d0:	9c07      	ldr	r4, [sp, #28]
 80073d2:	9704      	str	r7, [sp, #16]
 80073d4:	4625      	mov	r5, r4
 80073d6:	e7f3      	b.n	80073c0 <_dtoa_r+0x928>
 80073d8:	9b07      	ldr	r3, [sp, #28]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 8104 	beq.w	80075ec <_dtoa_r+0xb54>
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	dd05      	ble.n	80073f4 <_dtoa_r+0x95c>
 80073e8:	4629      	mov	r1, r5
 80073ea:	4632      	mov	r2, r6
 80073ec:	4658      	mov	r0, fp
 80073ee:	f000 fc25 	bl	8007c3c <__lshift>
 80073f2:	4605      	mov	r5, r0
 80073f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d05a      	beq.n	80074b0 <_dtoa_r+0xa18>
 80073fa:	6869      	ldr	r1, [r5, #4]
 80073fc:	4658      	mov	r0, fp
 80073fe:	f000 fa0f 	bl	8007820 <_Balloc>
 8007402:	4606      	mov	r6, r0
 8007404:	b928      	cbnz	r0, 8007412 <_dtoa_r+0x97a>
 8007406:	4b84      	ldr	r3, [pc, #528]	@ (8007618 <_dtoa_r+0xb80>)
 8007408:	4602      	mov	r2, r0
 800740a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800740e:	f7ff bb5a 	b.w	8006ac6 <_dtoa_r+0x2e>
 8007412:	692a      	ldr	r2, [r5, #16]
 8007414:	3202      	adds	r2, #2
 8007416:	0092      	lsls	r2, r2, #2
 8007418:	f105 010c 	add.w	r1, r5, #12
 800741c:	300c      	adds	r0, #12
 800741e:	f7ff faa4 	bl	800696a <memcpy>
 8007422:	2201      	movs	r2, #1
 8007424:	4631      	mov	r1, r6
 8007426:	4658      	mov	r0, fp
 8007428:	f000 fc08 	bl	8007c3c <__lshift>
 800742c:	f10a 0301 	add.w	r3, sl, #1
 8007430:	9307      	str	r3, [sp, #28]
 8007432:	9b00      	ldr	r3, [sp, #0]
 8007434:	4453      	add	r3, sl
 8007436:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007438:	9b02      	ldr	r3, [sp, #8]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	462f      	mov	r7, r5
 8007440:	930a      	str	r3, [sp, #40]	@ 0x28
 8007442:	4605      	mov	r5, r0
 8007444:	9b07      	ldr	r3, [sp, #28]
 8007446:	4621      	mov	r1, r4
 8007448:	3b01      	subs	r3, #1
 800744a:	4648      	mov	r0, r9
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	f7ff fa9a 	bl	8006986 <quorem>
 8007452:	4639      	mov	r1, r7
 8007454:	9002      	str	r0, [sp, #8]
 8007456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800745a:	4648      	mov	r0, r9
 800745c:	f000 fc5a 	bl	8007d14 <__mcmp>
 8007460:	462a      	mov	r2, r5
 8007462:	9008      	str	r0, [sp, #32]
 8007464:	4621      	mov	r1, r4
 8007466:	4658      	mov	r0, fp
 8007468:	f000 fc70 	bl	8007d4c <__mdiff>
 800746c:	68c2      	ldr	r2, [r0, #12]
 800746e:	4606      	mov	r6, r0
 8007470:	bb02      	cbnz	r2, 80074b4 <_dtoa_r+0xa1c>
 8007472:	4601      	mov	r1, r0
 8007474:	4648      	mov	r0, r9
 8007476:	f000 fc4d 	bl	8007d14 <__mcmp>
 800747a:	4602      	mov	r2, r0
 800747c:	4631      	mov	r1, r6
 800747e:	4658      	mov	r0, fp
 8007480:	920e      	str	r2, [sp, #56]	@ 0x38
 8007482:	f000 fa0d 	bl	80078a0 <_Bfree>
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800748a:	9e07      	ldr	r6, [sp, #28]
 800748c:	ea43 0102 	orr.w	r1, r3, r2
 8007490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007492:	4319      	orrs	r1, r3
 8007494:	d110      	bne.n	80074b8 <_dtoa_r+0xa20>
 8007496:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800749a:	d029      	beq.n	80074f0 <_dtoa_r+0xa58>
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd02      	ble.n	80074a8 <_dtoa_r+0xa10>
 80074a2:	9b02      	ldr	r3, [sp, #8]
 80074a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80074a8:	9b00      	ldr	r3, [sp, #0]
 80074aa:	f883 8000 	strb.w	r8, [r3]
 80074ae:	e63f      	b.n	8007130 <_dtoa_r+0x698>
 80074b0:	4628      	mov	r0, r5
 80074b2:	e7bb      	b.n	800742c <_dtoa_r+0x994>
 80074b4:	2201      	movs	r2, #1
 80074b6:	e7e1      	b.n	800747c <_dtoa_r+0x9e4>
 80074b8:	9b08      	ldr	r3, [sp, #32]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	db04      	blt.n	80074c8 <_dtoa_r+0xa30>
 80074be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074c0:	430b      	orrs	r3, r1
 80074c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074c4:	430b      	orrs	r3, r1
 80074c6:	d120      	bne.n	800750a <_dtoa_r+0xa72>
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	dded      	ble.n	80074a8 <_dtoa_r+0xa10>
 80074cc:	4649      	mov	r1, r9
 80074ce:	2201      	movs	r2, #1
 80074d0:	4658      	mov	r0, fp
 80074d2:	f000 fbb3 	bl	8007c3c <__lshift>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4681      	mov	r9, r0
 80074da:	f000 fc1b 	bl	8007d14 <__mcmp>
 80074de:	2800      	cmp	r0, #0
 80074e0:	dc03      	bgt.n	80074ea <_dtoa_r+0xa52>
 80074e2:	d1e1      	bne.n	80074a8 <_dtoa_r+0xa10>
 80074e4:	f018 0f01 	tst.w	r8, #1
 80074e8:	d0de      	beq.n	80074a8 <_dtoa_r+0xa10>
 80074ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074ee:	d1d8      	bne.n	80074a2 <_dtoa_r+0xa0a>
 80074f0:	9a00      	ldr	r2, [sp, #0]
 80074f2:	2339      	movs	r3, #57	@ 0x39
 80074f4:	7013      	strb	r3, [r2, #0]
 80074f6:	4633      	mov	r3, r6
 80074f8:	461e      	mov	r6, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007500:	2a39      	cmp	r2, #57	@ 0x39
 8007502:	d052      	beq.n	80075aa <_dtoa_r+0xb12>
 8007504:	3201      	adds	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	e612      	b.n	8007130 <_dtoa_r+0x698>
 800750a:	2a00      	cmp	r2, #0
 800750c:	dd07      	ble.n	800751e <_dtoa_r+0xa86>
 800750e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007512:	d0ed      	beq.n	80074f0 <_dtoa_r+0xa58>
 8007514:	9a00      	ldr	r2, [sp, #0]
 8007516:	f108 0301 	add.w	r3, r8, #1
 800751a:	7013      	strb	r3, [r2, #0]
 800751c:	e608      	b.n	8007130 <_dtoa_r+0x698>
 800751e:	9b07      	ldr	r3, [sp, #28]
 8007520:	9a07      	ldr	r2, [sp, #28]
 8007522:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007528:	4293      	cmp	r3, r2
 800752a:	d028      	beq.n	800757e <_dtoa_r+0xae6>
 800752c:	4649      	mov	r1, r9
 800752e:	2300      	movs	r3, #0
 8007530:	220a      	movs	r2, #10
 8007532:	4658      	mov	r0, fp
 8007534:	f000 f9d6 	bl	80078e4 <__multadd>
 8007538:	42af      	cmp	r7, r5
 800753a:	4681      	mov	r9, r0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f04f 020a 	mov.w	r2, #10
 8007544:	4639      	mov	r1, r7
 8007546:	4658      	mov	r0, fp
 8007548:	d107      	bne.n	800755a <_dtoa_r+0xac2>
 800754a:	f000 f9cb 	bl	80078e4 <__multadd>
 800754e:	4607      	mov	r7, r0
 8007550:	4605      	mov	r5, r0
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	3301      	adds	r3, #1
 8007556:	9307      	str	r3, [sp, #28]
 8007558:	e774      	b.n	8007444 <_dtoa_r+0x9ac>
 800755a:	f000 f9c3 	bl	80078e4 <__multadd>
 800755e:	4629      	mov	r1, r5
 8007560:	4607      	mov	r7, r0
 8007562:	2300      	movs	r3, #0
 8007564:	220a      	movs	r2, #10
 8007566:	4658      	mov	r0, fp
 8007568:	f000 f9bc 	bl	80078e4 <__multadd>
 800756c:	4605      	mov	r5, r0
 800756e:	e7f0      	b.n	8007552 <_dtoa_r+0xaba>
 8007570:	9b00      	ldr	r3, [sp, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	bfcc      	ite	gt
 8007576:	461e      	movgt	r6, r3
 8007578:	2601      	movle	r6, #1
 800757a:	4456      	add	r6, sl
 800757c:	2700      	movs	r7, #0
 800757e:	4649      	mov	r1, r9
 8007580:	2201      	movs	r2, #1
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fb5a 	bl	8007c3c <__lshift>
 8007588:	4621      	mov	r1, r4
 800758a:	4681      	mov	r9, r0
 800758c:	f000 fbc2 	bl	8007d14 <__mcmp>
 8007590:	2800      	cmp	r0, #0
 8007592:	dcb0      	bgt.n	80074f6 <_dtoa_r+0xa5e>
 8007594:	d102      	bne.n	800759c <_dtoa_r+0xb04>
 8007596:	f018 0f01 	tst.w	r8, #1
 800759a:	d1ac      	bne.n	80074f6 <_dtoa_r+0xa5e>
 800759c:	4633      	mov	r3, r6
 800759e:	461e      	mov	r6, r3
 80075a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075a4:	2a30      	cmp	r2, #48	@ 0x30
 80075a6:	d0fa      	beq.n	800759e <_dtoa_r+0xb06>
 80075a8:	e5c2      	b.n	8007130 <_dtoa_r+0x698>
 80075aa:	459a      	cmp	sl, r3
 80075ac:	d1a4      	bne.n	80074f8 <_dtoa_r+0xa60>
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	3301      	adds	r3, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	2331      	movs	r3, #49	@ 0x31
 80075b6:	f88a 3000 	strb.w	r3, [sl]
 80075ba:	e5b9      	b.n	8007130 <_dtoa_r+0x698>
 80075bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800761c <_dtoa_r+0xb84>
 80075c2:	b11b      	cbz	r3, 80075cc <_dtoa_r+0xb34>
 80075c4:	f10a 0308 	add.w	r3, sl, #8
 80075c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	4650      	mov	r0, sl
 80075ce:	b019      	add	sp, #100	@ 0x64
 80075d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	f77f ae37 	ble.w	800724a <_dtoa_r+0x7b2>
 80075dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075de:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e0:	2001      	movs	r0, #1
 80075e2:	e655      	b.n	8007290 <_dtoa_r+0x7f8>
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f77f aed6 	ble.w	8007398 <_dtoa_r+0x900>
 80075ec:	4656      	mov	r6, sl
 80075ee:	4621      	mov	r1, r4
 80075f0:	4648      	mov	r0, r9
 80075f2:	f7ff f9c8 	bl	8006986 <quorem>
 80075f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075fa:	f806 8b01 	strb.w	r8, [r6], #1
 80075fe:	9b00      	ldr	r3, [sp, #0]
 8007600:	eba6 020a 	sub.w	r2, r6, sl
 8007604:	4293      	cmp	r3, r2
 8007606:	ddb3      	ble.n	8007570 <_dtoa_r+0xad8>
 8007608:	4649      	mov	r1, r9
 800760a:	2300      	movs	r3, #0
 800760c:	220a      	movs	r2, #10
 800760e:	4658      	mov	r0, fp
 8007610:	f000 f968 	bl	80078e4 <__multadd>
 8007614:	4681      	mov	r9, r0
 8007616:	e7ea      	b.n	80075ee <_dtoa_r+0xb56>
 8007618:	080092f4 	.word	0x080092f4
 800761c:	08009278 	.word	0x08009278

08007620 <_free_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4605      	mov	r5, r0
 8007624:	2900      	cmp	r1, #0
 8007626:	d041      	beq.n	80076ac <_free_r+0x8c>
 8007628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800762c:	1f0c      	subs	r4, r1, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	bfb8      	it	lt
 8007632:	18e4      	addlt	r4, r4, r3
 8007634:	f000 f8e8 	bl	8007808 <__malloc_lock>
 8007638:	4a1d      	ldr	r2, [pc, #116]	@ (80076b0 <_free_r+0x90>)
 800763a:	6813      	ldr	r3, [r2, #0]
 800763c:	b933      	cbnz	r3, 800764c <_free_r+0x2c>
 800763e:	6063      	str	r3, [r4, #4]
 8007640:	6014      	str	r4, [r2, #0]
 8007642:	4628      	mov	r0, r5
 8007644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007648:	f000 b8e4 	b.w	8007814 <__malloc_unlock>
 800764c:	42a3      	cmp	r3, r4
 800764e:	d908      	bls.n	8007662 <_free_r+0x42>
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	1821      	adds	r1, r4, r0
 8007654:	428b      	cmp	r3, r1
 8007656:	bf01      	itttt	eq
 8007658:	6819      	ldreq	r1, [r3, #0]
 800765a:	685b      	ldreq	r3, [r3, #4]
 800765c:	1809      	addeq	r1, r1, r0
 800765e:	6021      	streq	r1, [r4, #0]
 8007660:	e7ed      	b.n	800763e <_free_r+0x1e>
 8007662:	461a      	mov	r2, r3
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	b10b      	cbz	r3, 800766c <_free_r+0x4c>
 8007668:	42a3      	cmp	r3, r4
 800766a:	d9fa      	bls.n	8007662 <_free_r+0x42>
 800766c:	6811      	ldr	r1, [r2, #0]
 800766e:	1850      	adds	r0, r2, r1
 8007670:	42a0      	cmp	r0, r4
 8007672:	d10b      	bne.n	800768c <_free_r+0x6c>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	4401      	add	r1, r0
 8007678:	1850      	adds	r0, r2, r1
 800767a:	4283      	cmp	r3, r0
 800767c:	6011      	str	r1, [r2, #0]
 800767e:	d1e0      	bne.n	8007642 <_free_r+0x22>
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	6053      	str	r3, [r2, #4]
 8007686:	4408      	add	r0, r1
 8007688:	6010      	str	r0, [r2, #0]
 800768a:	e7da      	b.n	8007642 <_free_r+0x22>
 800768c:	d902      	bls.n	8007694 <_free_r+0x74>
 800768e:	230c      	movs	r3, #12
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	e7d6      	b.n	8007642 <_free_r+0x22>
 8007694:	6820      	ldr	r0, [r4, #0]
 8007696:	1821      	adds	r1, r4, r0
 8007698:	428b      	cmp	r3, r1
 800769a:	bf04      	itt	eq
 800769c:	6819      	ldreq	r1, [r3, #0]
 800769e:	685b      	ldreq	r3, [r3, #4]
 80076a0:	6063      	str	r3, [r4, #4]
 80076a2:	bf04      	itt	eq
 80076a4:	1809      	addeq	r1, r1, r0
 80076a6:	6021      	streq	r1, [r4, #0]
 80076a8:	6054      	str	r4, [r2, #4]
 80076aa:	e7ca      	b.n	8007642 <_free_r+0x22>
 80076ac:	bd38      	pop	{r3, r4, r5, pc}
 80076ae:	bf00      	nop
 80076b0:	20000a64 	.word	0x20000a64

080076b4 <malloc>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	@ (80076c0 <malloc+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f000 b825 	b.w	8007708 <_malloc_r>
 80076be:	bf00      	nop
 80076c0:	20000020 	.word	0x20000020

080076c4 <sbrk_aligned>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007704 <sbrk_aligned+0x40>)
 80076c8:	460c      	mov	r4, r1
 80076ca:	6831      	ldr	r1, [r6, #0]
 80076cc:	4605      	mov	r5, r0
 80076ce:	b911      	cbnz	r1, 80076d6 <sbrk_aligned+0x12>
 80076d0:	f000 fe2c 	bl	800832c <_sbrk_r>
 80076d4:	6030      	str	r0, [r6, #0]
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 fe27 	bl	800832c <_sbrk_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d103      	bne.n	80076ea <sbrk_aligned+0x26>
 80076e2:	f04f 34ff 	mov.w	r4, #4294967295
 80076e6:	4620      	mov	r0, r4
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d0f8      	beq.n	80076e6 <sbrk_aligned+0x22>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 fe18 	bl	800832c <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d1f2      	bne.n	80076e6 <sbrk_aligned+0x22>
 8007700:	e7ef      	b.n	80076e2 <sbrk_aligned+0x1e>
 8007702:	bf00      	nop
 8007704:	20000a60 	.word	0x20000a60

08007708 <_malloc_r>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	1ccd      	adds	r5, r1, #3
 800770e:	f025 0503 	bic.w	r5, r5, #3
 8007712:	3508      	adds	r5, #8
 8007714:	2d0c      	cmp	r5, #12
 8007716:	bf38      	it	cc
 8007718:	250c      	movcc	r5, #12
 800771a:	2d00      	cmp	r5, #0
 800771c:	4606      	mov	r6, r0
 800771e:	db01      	blt.n	8007724 <_malloc_r+0x1c>
 8007720:	42a9      	cmp	r1, r5
 8007722:	d904      	bls.n	800772e <_malloc_r+0x26>
 8007724:	230c      	movs	r3, #12
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	2000      	movs	r0, #0
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007804 <_malloc_r+0xfc>
 8007732:	f000 f869 	bl	8007808 <__malloc_lock>
 8007736:	f8d8 3000 	ldr.w	r3, [r8]
 800773a:	461c      	mov	r4, r3
 800773c:	bb44      	cbnz	r4, 8007790 <_malloc_r+0x88>
 800773e:	4629      	mov	r1, r5
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff ffbf 	bl	80076c4 <sbrk_aligned>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	4604      	mov	r4, r0
 800774a:	d158      	bne.n	80077fe <_malloc_r+0xf6>
 800774c:	f8d8 4000 	ldr.w	r4, [r8]
 8007750:	4627      	mov	r7, r4
 8007752:	2f00      	cmp	r7, #0
 8007754:	d143      	bne.n	80077de <_malloc_r+0xd6>
 8007756:	2c00      	cmp	r4, #0
 8007758:	d04b      	beq.n	80077f2 <_malloc_r+0xea>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	4639      	mov	r1, r7
 800775e:	4630      	mov	r0, r6
 8007760:	eb04 0903 	add.w	r9, r4, r3
 8007764:	f000 fde2 	bl	800832c <_sbrk_r>
 8007768:	4581      	cmp	r9, r0
 800776a:	d142      	bne.n	80077f2 <_malloc_r+0xea>
 800776c:	6821      	ldr	r1, [r4, #0]
 800776e:	1a6d      	subs	r5, r5, r1
 8007770:	4629      	mov	r1, r5
 8007772:	4630      	mov	r0, r6
 8007774:	f7ff ffa6 	bl	80076c4 <sbrk_aligned>
 8007778:	3001      	adds	r0, #1
 800777a:	d03a      	beq.n	80077f2 <_malloc_r+0xea>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	442b      	add	r3, r5
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	f8d8 3000 	ldr.w	r3, [r8]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	bb62      	cbnz	r2, 80077e4 <_malloc_r+0xdc>
 800778a:	f8c8 7000 	str.w	r7, [r8]
 800778e:	e00f      	b.n	80077b0 <_malloc_r+0xa8>
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	1b52      	subs	r2, r2, r5
 8007794:	d420      	bmi.n	80077d8 <_malloc_r+0xd0>
 8007796:	2a0b      	cmp	r2, #11
 8007798:	d917      	bls.n	80077ca <_malloc_r+0xc2>
 800779a:	1961      	adds	r1, r4, r5
 800779c:	42a3      	cmp	r3, r4
 800779e:	6025      	str	r5, [r4, #0]
 80077a0:	bf18      	it	ne
 80077a2:	6059      	strne	r1, [r3, #4]
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	bf08      	it	eq
 80077a8:	f8c8 1000 	streq.w	r1, [r8]
 80077ac:	5162      	str	r2, [r4, r5]
 80077ae:	604b      	str	r3, [r1, #4]
 80077b0:	4630      	mov	r0, r6
 80077b2:	f000 f82f 	bl	8007814 <__malloc_unlock>
 80077b6:	f104 000b 	add.w	r0, r4, #11
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	f020 0007 	bic.w	r0, r0, #7
 80077c0:	1ac2      	subs	r2, r0, r3
 80077c2:	bf1c      	itt	ne
 80077c4:	1a1b      	subne	r3, r3, r0
 80077c6:	50a3      	strne	r3, [r4, r2]
 80077c8:	e7af      	b.n	800772a <_malloc_r+0x22>
 80077ca:	6862      	ldr	r2, [r4, #4]
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	bf0c      	ite	eq
 80077d0:	f8c8 2000 	streq.w	r2, [r8]
 80077d4:	605a      	strne	r2, [r3, #4]
 80077d6:	e7eb      	b.n	80077b0 <_malloc_r+0xa8>
 80077d8:	4623      	mov	r3, r4
 80077da:	6864      	ldr	r4, [r4, #4]
 80077dc:	e7ae      	b.n	800773c <_malloc_r+0x34>
 80077de:	463c      	mov	r4, r7
 80077e0:	687f      	ldr	r7, [r7, #4]
 80077e2:	e7b6      	b.n	8007752 <_malloc_r+0x4a>
 80077e4:	461a      	mov	r2, r3
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d1fb      	bne.n	80077e4 <_malloc_r+0xdc>
 80077ec:	2300      	movs	r3, #0
 80077ee:	6053      	str	r3, [r2, #4]
 80077f0:	e7de      	b.n	80077b0 <_malloc_r+0xa8>
 80077f2:	230c      	movs	r3, #12
 80077f4:	6033      	str	r3, [r6, #0]
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 f80c 	bl	8007814 <__malloc_unlock>
 80077fc:	e794      	b.n	8007728 <_malloc_r+0x20>
 80077fe:	6005      	str	r5, [r0, #0]
 8007800:	e7d6      	b.n	80077b0 <_malloc_r+0xa8>
 8007802:	bf00      	nop
 8007804:	20000a64 	.word	0x20000a64

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	@ (8007810 <__malloc_lock+0x8>)
 800780a:	f7ff b8ac 	b.w	8006966 <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20000a5c 	.word	0x20000a5c

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	@ (800781c <__malloc_unlock+0x8>)
 8007816:	f7ff b8a7 	b.w	8006968 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20000a5c 	.word	0x20000a5c

08007820 <_Balloc>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	69c6      	ldr	r6, [r0, #28]
 8007824:	4604      	mov	r4, r0
 8007826:	460d      	mov	r5, r1
 8007828:	b976      	cbnz	r6, 8007848 <_Balloc+0x28>
 800782a:	2010      	movs	r0, #16
 800782c:	f7ff ff42 	bl	80076b4 <malloc>
 8007830:	4602      	mov	r2, r0
 8007832:	61e0      	str	r0, [r4, #28]
 8007834:	b920      	cbnz	r0, 8007840 <_Balloc+0x20>
 8007836:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <_Balloc+0x78>)
 8007838:	4818      	ldr	r0, [pc, #96]	@ (800789c <_Balloc+0x7c>)
 800783a:	216b      	movs	r1, #107	@ 0x6b
 800783c:	f000 fd86 	bl	800834c <__assert_func>
 8007840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007844:	6006      	str	r6, [r0, #0]
 8007846:	60c6      	str	r6, [r0, #12]
 8007848:	69e6      	ldr	r6, [r4, #28]
 800784a:	68f3      	ldr	r3, [r6, #12]
 800784c:	b183      	cbz	r3, 8007870 <_Balloc+0x50>
 800784e:	69e3      	ldr	r3, [r4, #28]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007856:	b9b8      	cbnz	r0, 8007888 <_Balloc+0x68>
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f605 	lsl.w	r6, r1, r5
 800785e:	1d72      	adds	r2, r6, #5
 8007860:	0092      	lsls	r2, r2, #2
 8007862:	4620      	mov	r0, r4
 8007864:	f000 fd90 	bl	8008388 <_calloc_r>
 8007868:	b160      	cbz	r0, 8007884 <_Balloc+0x64>
 800786a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800786e:	e00e      	b.n	800788e <_Balloc+0x6e>
 8007870:	2221      	movs	r2, #33	@ 0x21
 8007872:	2104      	movs	r1, #4
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fd87 	bl	8008388 <_calloc_r>
 800787a:	69e3      	ldr	r3, [r4, #28]
 800787c:	60f0      	str	r0, [r6, #12]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e4      	bne.n	800784e <_Balloc+0x2e>
 8007884:	2000      	movs	r0, #0
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	6802      	ldr	r2, [r0, #0]
 800788a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800788e:	2300      	movs	r3, #0
 8007890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007894:	e7f7      	b.n	8007886 <_Balloc+0x66>
 8007896:	bf00      	nop
 8007898:	08009285 	.word	0x08009285
 800789c:	08009305 	.word	0x08009305

080078a0 <_Bfree>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	69c6      	ldr	r6, [r0, #28]
 80078a4:	4605      	mov	r5, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b976      	cbnz	r6, 80078c8 <_Bfree+0x28>
 80078aa:	2010      	movs	r0, #16
 80078ac:	f7ff ff02 	bl	80076b4 <malloc>
 80078b0:	4602      	mov	r2, r0
 80078b2:	61e8      	str	r0, [r5, #28]
 80078b4:	b920      	cbnz	r0, 80078c0 <_Bfree+0x20>
 80078b6:	4b09      	ldr	r3, [pc, #36]	@ (80078dc <_Bfree+0x3c>)
 80078b8:	4809      	ldr	r0, [pc, #36]	@ (80078e0 <_Bfree+0x40>)
 80078ba:	218f      	movs	r1, #143	@ 0x8f
 80078bc:	f000 fd46 	bl	800834c <__assert_func>
 80078c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078c4:	6006      	str	r6, [r0, #0]
 80078c6:	60c6      	str	r6, [r0, #12]
 80078c8:	b13c      	cbz	r4, 80078da <_Bfree+0x3a>
 80078ca:	69eb      	ldr	r3, [r5, #28]
 80078cc:	6862      	ldr	r2, [r4, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078d4:	6021      	str	r1, [r4, #0]
 80078d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	08009285 	.word	0x08009285
 80078e0:	08009305 	.word	0x08009305

080078e4 <__multadd>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	690d      	ldr	r5, [r1, #16]
 80078ea:	4607      	mov	r7, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	461e      	mov	r6, r3
 80078f0:	f101 0c14 	add.w	ip, r1, #20
 80078f4:	2000      	movs	r0, #0
 80078f6:	f8dc 3000 	ldr.w	r3, [ip]
 80078fa:	b299      	uxth	r1, r3
 80078fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007900:	0c1e      	lsrs	r6, r3, #16
 8007902:	0c0b      	lsrs	r3, r1, #16
 8007904:	fb02 3306 	mla	r3, r2, r6, r3
 8007908:	b289      	uxth	r1, r1
 800790a:	3001      	adds	r0, #1
 800790c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007910:	4285      	cmp	r5, r0
 8007912:	f84c 1b04 	str.w	r1, [ip], #4
 8007916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800791a:	dcec      	bgt.n	80078f6 <__multadd+0x12>
 800791c:	b30e      	cbz	r6, 8007962 <__multadd+0x7e>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc19      	bgt.n	8007958 <__multadd+0x74>
 8007924:	6861      	ldr	r1, [r4, #4]
 8007926:	4638      	mov	r0, r7
 8007928:	3101      	adds	r1, #1
 800792a:	f7ff ff79 	bl	8007820 <_Balloc>
 800792e:	4680      	mov	r8, r0
 8007930:	b928      	cbnz	r0, 800793e <__multadd+0x5a>
 8007932:	4602      	mov	r2, r0
 8007934:	4b0c      	ldr	r3, [pc, #48]	@ (8007968 <__multadd+0x84>)
 8007936:	480d      	ldr	r0, [pc, #52]	@ (800796c <__multadd+0x88>)
 8007938:	21ba      	movs	r1, #186	@ 0xba
 800793a:	f000 fd07 	bl	800834c <__assert_func>
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	3202      	adds	r2, #2
 8007942:	f104 010c 	add.w	r1, r4, #12
 8007946:	0092      	lsls	r2, r2, #2
 8007948:	300c      	adds	r0, #12
 800794a:	f7ff f80e 	bl	800696a <memcpy>
 800794e:	4621      	mov	r1, r4
 8007950:	4638      	mov	r0, r7
 8007952:	f7ff ffa5 	bl	80078a0 <_Bfree>
 8007956:	4644      	mov	r4, r8
 8007958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800795c:	3501      	adds	r5, #1
 800795e:	615e      	str	r6, [r3, #20]
 8007960:	6125      	str	r5, [r4, #16]
 8007962:	4620      	mov	r0, r4
 8007964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007968:	080092f4 	.word	0x080092f4
 800796c:	08009305 	.word	0x08009305

08007970 <__hi0bits>:
 8007970:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007974:	4603      	mov	r3, r0
 8007976:	bf36      	itet	cc
 8007978:	0403      	lslcc	r3, r0, #16
 800797a:	2000      	movcs	r0, #0
 800797c:	2010      	movcc	r0, #16
 800797e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007982:	bf3c      	itt	cc
 8007984:	021b      	lslcc	r3, r3, #8
 8007986:	3008      	addcc	r0, #8
 8007988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800798c:	bf3c      	itt	cc
 800798e:	011b      	lslcc	r3, r3, #4
 8007990:	3004      	addcc	r0, #4
 8007992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007996:	bf3c      	itt	cc
 8007998:	009b      	lslcc	r3, r3, #2
 800799a:	3002      	addcc	r0, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	db05      	blt.n	80079ac <__hi0bits+0x3c>
 80079a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80079a4:	f100 0001 	add.w	r0, r0, #1
 80079a8:	bf08      	it	eq
 80079aa:	2020      	moveq	r0, #32
 80079ac:	4770      	bx	lr

080079ae <__lo0bits>:
 80079ae:	6803      	ldr	r3, [r0, #0]
 80079b0:	4602      	mov	r2, r0
 80079b2:	f013 0007 	ands.w	r0, r3, #7
 80079b6:	d00b      	beq.n	80079d0 <__lo0bits+0x22>
 80079b8:	07d9      	lsls	r1, r3, #31
 80079ba:	d421      	bmi.n	8007a00 <__lo0bits+0x52>
 80079bc:	0798      	lsls	r0, r3, #30
 80079be:	bf49      	itett	mi
 80079c0:	085b      	lsrmi	r3, r3, #1
 80079c2:	089b      	lsrpl	r3, r3, #2
 80079c4:	2001      	movmi	r0, #1
 80079c6:	6013      	strmi	r3, [r2, #0]
 80079c8:	bf5c      	itt	pl
 80079ca:	6013      	strpl	r3, [r2, #0]
 80079cc:	2002      	movpl	r0, #2
 80079ce:	4770      	bx	lr
 80079d0:	b299      	uxth	r1, r3
 80079d2:	b909      	cbnz	r1, 80079d8 <__lo0bits+0x2a>
 80079d4:	0c1b      	lsrs	r3, r3, #16
 80079d6:	2010      	movs	r0, #16
 80079d8:	b2d9      	uxtb	r1, r3
 80079da:	b909      	cbnz	r1, 80079e0 <__lo0bits+0x32>
 80079dc:	3008      	adds	r0, #8
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	0719      	lsls	r1, r3, #28
 80079e2:	bf04      	itt	eq
 80079e4:	091b      	lsreq	r3, r3, #4
 80079e6:	3004      	addeq	r0, #4
 80079e8:	0799      	lsls	r1, r3, #30
 80079ea:	bf04      	itt	eq
 80079ec:	089b      	lsreq	r3, r3, #2
 80079ee:	3002      	addeq	r0, #2
 80079f0:	07d9      	lsls	r1, r3, #31
 80079f2:	d403      	bmi.n	80079fc <__lo0bits+0x4e>
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	f100 0001 	add.w	r0, r0, #1
 80079fa:	d003      	beq.n	8007a04 <__lo0bits+0x56>
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	4770      	bx	lr
 8007a00:	2000      	movs	r0, #0
 8007a02:	4770      	bx	lr
 8007a04:	2020      	movs	r0, #32
 8007a06:	4770      	bx	lr

08007a08 <__i2b>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	f7ff ff07 	bl	8007820 <_Balloc>
 8007a12:	4602      	mov	r2, r0
 8007a14:	b928      	cbnz	r0, 8007a22 <__i2b+0x1a>
 8007a16:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <__i2b+0x24>)
 8007a18:	4805      	ldr	r0, [pc, #20]	@ (8007a30 <__i2b+0x28>)
 8007a1a:	f240 1145 	movw	r1, #325	@ 0x145
 8007a1e:	f000 fc95 	bl	800834c <__assert_func>
 8007a22:	2301      	movs	r3, #1
 8007a24:	6144      	str	r4, [r0, #20]
 8007a26:	6103      	str	r3, [r0, #16]
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	bf00      	nop
 8007a2c:	080092f4 	.word	0x080092f4
 8007a30:	08009305 	.word	0x08009305

08007a34 <__multiply>:
 8007a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	4614      	mov	r4, r2
 8007a3a:	690a      	ldr	r2, [r1, #16]
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	bfa8      	it	ge
 8007a42:	4623      	movge	r3, r4
 8007a44:	460f      	mov	r7, r1
 8007a46:	bfa4      	itt	ge
 8007a48:	460c      	movge	r4, r1
 8007a4a:	461f      	movge	r7, r3
 8007a4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a54:	68a3      	ldr	r3, [r4, #8]
 8007a56:	6861      	ldr	r1, [r4, #4]
 8007a58:	eb0a 0609 	add.w	r6, sl, r9
 8007a5c:	42b3      	cmp	r3, r6
 8007a5e:	b085      	sub	sp, #20
 8007a60:	bfb8      	it	lt
 8007a62:	3101      	addlt	r1, #1
 8007a64:	f7ff fedc 	bl	8007820 <_Balloc>
 8007a68:	b930      	cbnz	r0, 8007a78 <__multiply+0x44>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	4b44      	ldr	r3, [pc, #272]	@ (8007b80 <__multiply+0x14c>)
 8007a6e:	4845      	ldr	r0, [pc, #276]	@ (8007b84 <__multiply+0x150>)
 8007a70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a74:	f000 fc6a 	bl	800834c <__assert_func>
 8007a78:	f100 0514 	add.w	r5, r0, #20
 8007a7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a80:	462b      	mov	r3, r5
 8007a82:	2200      	movs	r2, #0
 8007a84:	4543      	cmp	r3, r8
 8007a86:	d321      	bcc.n	8007acc <__multiply+0x98>
 8007a88:	f107 0114 	add.w	r1, r7, #20
 8007a8c:	f104 0214 	add.w	r2, r4, #20
 8007a90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a98:	9302      	str	r3, [sp, #8]
 8007a9a:	1b13      	subs	r3, r2, r4
 8007a9c:	3b15      	subs	r3, #21
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	f104 0715 	add.w	r7, r4, #21
 8007aa8:	42ba      	cmp	r2, r7
 8007aaa:	bf38      	it	cc
 8007aac:	2304      	movcc	r3, #4
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	9103      	str	r1, [sp, #12]
 8007ab4:	428b      	cmp	r3, r1
 8007ab6:	d80c      	bhi.n	8007ad2 <__multiply+0x9e>
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	dd03      	ble.n	8007ac4 <__multiply+0x90>
 8007abc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d05b      	beq.n	8007b7c <__multiply+0x148>
 8007ac4:	6106      	str	r6, [r0, #16]
 8007ac6:	b005      	add	sp, #20
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	f843 2b04 	str.w	r2, [r3], #4
 8007ad0:	e7d8      	b.n	8007a84 <__multiply+0x50>
 8007ad2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ad6:	f1ba 0f00 	cmp.w	sl, #0
 8007ada:	d024      	beq.n	8007b26 <__multiply+0xf2>
 8007adc:	f104 0e14 	add.w	lr, r4, #20
 8007ae0:	46a9      	mov	r9, r5
 8007ae2:	f04f 0c00 	mov.w	ip, #0
 8007ae6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007aea:	f8d9 3000 	ldr.w	r3, [r9]
 8007aee:	fa1f fb87 	uxth.w	fp, r7
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007af8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007afc:	f8d9 7000 	ldr.w	r7, [r9]
 8007b00:	4463      	add	r3, ip
 8007b02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b06:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b14:	4572      	cmp	r2, lr
 8007b16:	f849 3b04 	str.w	r3, [r9], #4
 8007b1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b1e:	d8e2      	bhi.n	8007ae6 <__multiply+0xb2>
 8007b20:	9b01      	ldr	r3, [sp, #4]
 8007b22:	f845 c003 	str.w	ip, [r5, r3]
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b2c:	3104      	adds	r1, #4
 8007b2e:	f1b9 0f00 	cmp.w	r9, #0
 8007b32:	d021      	beq.n	8007b78 <__multiply+0x144>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	f104 0c14 	add.w	ip, r4, #20
 8007b3a:	46ae      	mov	lr, r5
 8007b3c:	f04f 0a00 	mov.w	sl, #0
 8007b40:	f8bc b000 	ldrh.w	fp, [ip]
 8007b44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b48:	fb09 770b 	mla	r7, r9, fp, r7
 8007b4c:	4457      	add	r7, sl
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b54:	f84e 3b04 	str.w	r3, [lr], #4
 8007b58:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b60:	f8be 3000 	ldrh.w	r3, [lr]
 8007b64:	fb09 330a 	mla	r3, r9, sl, r3
 8007b68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b6c:	4562      	cmp	r2, ip
 8007b6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b72:	d8e5      	bhi.n	8007b40 <__multiply+0x10c>
 8007b74:	9f01      	ldr	r7, [sp, #4]
 8007b76:	51eb      	str	r3, [r5, r7]
 8007b78:	3504      	adds	r5, #4
 8007b7a:	e799      	b.n	8007ab0 <__multiply+0x7c>
 8007b7c:	3e01      	subs	r6, #1
 8007b7e:	e79b      	b.n	8007ab8 <__multiply+0x84>
 8007b80:	080092f4 	.word	0x080092f4
 8007b84:	08009305 	.word	0x08009305

08007b88 <__pow5mult>:
 8007b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	f012 0203 	ands.w	r2, r2, #3
 8007b92:	4607      	mov	r7, r0
 8007b94:	460e      	mov	r6, r1
 8007b96:	d007      	beq.n	8007ba8 <__pow5mult+0x20>
 8007b98:	4c25      	ldr	r4, [pc, #148]	@ (8007c30 <__pow5mult+0xa8>)
 8007b9a:	3a01      	subs	r2, #1
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ba2:	f7ff fe9f 	bl	80078e4 <__multadd>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	10ad      	asrs	r5, r5, #2
 8007baa:	d03d      	beq.n	8007c28 <__pow5mult+0xa0>
 8007bac:	69fc      	ldr	r4, [r7, #28]
 8007bae:	b97c      	cbnz	r4, 8007bd0 <__pow5mult+0x48>
 8007bb0:	2010      	movs	r0, #16
 8007bb2:	f7ff fd7f 	bl	80076b4 <malloc>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	61f8      	str	r0, [r7, #28]
 8007bba:	b928      	cbnz	r0, 8007bc8 <__pow5mult+0x40>
 8007bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c34 <__pow5mult+0xac>)
 8007bbe:	481e      	ldr	r0, [pc, #120]	@ (8007c38 <__pow5mult+0xb0>)
 8007bc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007bc4:	f000 fbc2 	bl	800834c <__assert_func>
 8007bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bcc:	6004      	str	r4, [r0, #0]
 8007bce:	60c4      	str	r4, [r0, #12]
 8007bd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bd8:	b94c      	cbnz	r4, 8007bee <__pow5mult+0x66>
 8007bda:	f240 2171 	movw	r1, #625	@ 0x271
 8007bde:	4638      	mov	r0, r7
 8007be0:	f7ff ff12 	bl	8007a08 <__i2b>
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bea:	4604      	mov	r4, r0
 8007bec:	6003      	str	r3, [r0, #0]
 8007bee:	f04f 0900 	mov.w	r9, #0
 8007bf2:	07eb      	lsls	r3, r5, #31
 8007bf4:	d50a      	bpl.n	8007c0c <__pow5mult+0x84>
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	f7ff ff1a 	bl	8007a34 <__multiply>
 8007c00:	4631      	mov	r1, r6
 8007c02:	4680      	mov	r8, r0
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7ff fe4b 	bl	80078a0 <_Bfree>
 8007c0a:	4646      	mov	r6, r8
 8007c0c:	106d      	asrs	r5, r5, #1
 8007c0e:	d00b      	beq.n	8007c28 <__pow5mult+0xa0>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	b938      	cbnz	r0, 8007c24 <__pow5mult+0x9c>
 8007c14:	4622      	mov	r2, r4
 8007c16:	4621      	mov	r1, r4
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff ff0b 	bl	8007a34 <__multiply>
 8007c1e:	6020      	str	r0, [r4, #0]
 8007c20:	f8c0 9000 	str.w	r9, [r0]
 8007c24:	4604      	mov	r4, r0
 8007c26:	e7e4      	b.n	8007bf2 <__pow5mult+0x6a>
 8007c28:	4630      	mov	r0, r6
 8007c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2e:	bf00      	nop
 8007c30:	08009360 	.word	0x08009360
 8007c34:	08009285 	.word	0x08009285
 8007c38:	08009305 	.word	0x08009305

08007c3c <__lshift>:
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	460c      	mov	r4, r1
 8007c42:	6849      	ldr	r1, [r1, #4]
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c4a:	68a3      	ldr	r3, [r4, #8]
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	4691      	mov	r9, r2
 8007c50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c54:	f108 0601 	add.w	r6, r8, #1
 8007c58:	42b3      	cmp	r3, r6
 8007c5a:	db0b      	blt.n	8007c74 <__lshift+0x38>
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff fddf 	bl	8007820 <_Balloc>
 8007c62:	4605      	mov	r5, r0
 8007c64:	b948      	cbnz	r0, 8007c7a <__lshift+0x3e>
 8007c66:	4602      	mov	r2, r0
 8007c68:	4b28      	ldr	r3, [pc, #160]	@ (8007d0c <__lshift+0xd0>)
 8007c6a:	4829      	ldr	r0, [pc, #164]	@ (8007d10 <__lshift+0xd4>)
 8007c6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c70:	f000 fb6c 	bl	800834c <__assert_func>
 8007c74:	3101      	adds	r1, #1
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	e7ee      	b.n	8007c58 <__lshift+0x1c>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f100 0114 	add.w	r1, r0, #20
 8007c80:	f100 0210 	add.w	r2, r0, #16
 8007c84:	4618      	mov	r0, r3
 8007c86:	4553      	cmp	r3, sl
 8007c88:	db33      	blt.n	8007cf2 <__lshift+0xb6>
 8007c8a:	6920      	ldr	r0, [r4, #16]
 8007c8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c90:	f104 0314 	add.w	r3, r4, #20
 8007c94:	f019 091f 	ands.w	r9, r9, #31
 8007c98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ca0:	d02b      	beq.n	8007cfa <__lshift+0xbe>
 8007ca2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ca6:	468a      	mov	sl, r1
 8007ca8:	2200      	movs	r2, #0
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	fa00 f009 	lsl.w	r0, r0, r9
 8007cb0:	4310      	orrs	r0, r2
 8007cb2:	f84a 0b04 	str.w	r0, [sl], #4
 8007cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cba:	459c      	cmp	ip, r3
 8007cbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cc0:	d8f3      	bhi.n	8007caa <__lshift+0x6e>
 8007cc2:	ebac 0304 	sub.w	r3, ip, r4
 8007cc6:	3b15      	subs	r3, #21
 8007cc8:	f023 0303 	bic.w	r3, r3, #3
 8007ccc:	3304      	adds	r3, #4
 8007cce:	f104 0015 	add.w	r0, r4, #21
 8007cd2:	4584      	cmp	ip, r0
 8007cd4:	bf38      	it	cc
 8007cd6:	2304      	movcc	r3, #4
 8007cd8:	50ca      	str	r2, [r1, r3]
 8007cda:	b10a      	cbz	r2, 8007ce0 <__lshift+0xa4>
 8007cdc:	f108 0602 	add.w	r6, r8, #2
 8007ce0:	3e01      	subs	r6, #1
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	612e      	str	r6, [r5, #16]
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	f7ff fdda 	bl	80078a0 <_Bfree>
 8007cec:	4628      	mov	r0, r5
 8007cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	e7c5      	b.n	8007c86 <__lshift+0x4a>
 8007cfa:	3904      	subs	r1, #4
 8007cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d00:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d04:	459c      	cmp	ip, r3
 8007d06:	d8f9      	bhi.n	8007cfc <__lshift+0xc0>
 8007d08:	e7ea      	b.n	8007ce0 <__lshift+0xa4>
 8007d0a:	bf00      	nop
 8007d0c:	080092f4 	.word	0x080092f4
 8007d10:	08009305 	.word	0x08009305

08007d14 <__mcmp>:
 8007d14:	690a      	ldr	r2, [r1, #16]
 8007d16:	4603      	mov	r3, r0
 8007d18:	6900      	ldr	r0, [r0, #16]
 8007d1a:	1a80      	subs	r0, r0, r2
 8007d1c:	b530      	push	{r4, r5, lr}
 8007d1e:	d10e      	bne.n	8007d3e <__mcmp+0x2a>
 8007d20:	3314      	adds	r3, #20
 8007d22:	3114      	adds	r1, #20
 8007d24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d34:	4295      	cmp	r5, r2
 8007d36:	d003      	beq.n	8007d40 <__mcmp+0x2c>
 8007d38:	d205      	bcs.n	8007d46 <__mcmp+0x32>
 8007d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3e:	bd30      	pop	{r4, r5, pc}
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d3f3      	bcc.n	8007d2c <__mcmp+0x18>
 8007d44:	e7fb      	b.n	8007d3e <__mcmp+0x2a>
 8007d46:	2001      	movs	r0, #1
 8007d48:	e7f9      	b.n	8007d3e <__mcmp+0x2a>
	...

08007d4c <__mdiff>:
 8007d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4689      	mov	r9, r1
 8007d52:	4606      	mov	r6, r0
 8007d54:	4611      	mov	r1, r2
 8007d56:	4648      	mov	r0, r9
 8007d58:	4614      	mov	r4, r2
 8007d5a:	f7ff ffdb 	bl	8007d14 <__mcmp>
 8007d5e:	1e05      	subs	r5, r0, #0
 8007d60:	d112      	bne.n	8007d88 <__mdiff+0x3c>
 8007d62:	4629      	mov	r1, r5
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff fd5b 	bl	8007820 <_Balloc>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	b928      	cbnz	r0, 8007d7a <__mdiff+0x2e>
 8007d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e6c <__mdiff+0x120>)
 8007d70:	f240 2137 	movw	r1, #567	@ 0x237
 8007d74:	483e      	ldr	r0, [pc, #248]	@ (8007e70 <__mdiff+0x124>)
 8007d76:	f000 fae9 	bl	800834c <__assert_func>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d80:	4610      	mov	r0, r2
 8007d82:	b003      	add	sp, #12
 8007d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d88:	bfbc      	itt	lt
 8007d8a:	464b      	movlt	r3, r9
 8007d8c:	46a1      	movlt	r9, r4
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d94:	bfba      	itte	lt
 8007d96:	461c      	movlt	r4, r3
 8007d98:	2501      	movlt	r5, #1
 8007d9a:	2500      	movge	r5, #0
 8007d9c:	f7ff fd40 	bl	8007820 <_Balloc>
 8007da0:	4602      	mov	r2, r0
 8007da2:	b918      	cbnz	r0, 8007dac <__mdiff+0x60>
 8007da4:	4b31      	ldr	r3, [pc, #196]	@ (8007e6c <__mdiff+0x120>)
 8007da6:	f240 2145 	movw	r1, #581	@ 0x245
 8007daa:	e7e3      	b.n	8007d74 <__mdiff+0x28>
 8007dac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007db0:	6926      	ldr	r6, [r4, #16]
 8007db2:	60c5      	str	r5, [r0, #12]
 8007db4:	f109 0310 	add.w	r3, r9, #16
 8007db8:	f109 0514 	add.w	r5, r9, #20
 8007dbc:	f104 0e14 	add.w	lr, r4, #20
 8007dc0:	f100 0b14 	add.w	fp, r0, #20
 8007dc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007dc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	46d9      	mov	r9, fp
 8007dd0:	f04f 0c00 	mov.w	ip, #0
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007dda:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	fa1f f38a 	uxth.w	r3, sl
 8007de4:	4619      	mov	r1, r3
 8007de6:	b283      	uxth	r3, r0
 8007de8:	1acb      	subs	r3, r1, r3
 8007dea:	0c00      	lsrs	r0, r0, #16
 8007dec:	4463      	add	r3, ip
 8007dee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007df2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dfc:	4576      	cmp	r6, lr
 8007dfe:	f849 3b04 	str.w	r3, [r9], #4
 8007e02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e06:	d8e5      	bhi.n	8007dd4 <__mdiff+0x88>
 8007e08:	1b33      	subs	r3, r6, r4
 8007e0a:	3b15      	subs	r3, #21
 8007e0c:	f023 0303 	bic.w	r3, r3, #3
 8007e10:	3415      	adds	r4, #21
 8007e12:	3304      	adds	r3, #4
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	bf38      	it	cc
 8007e18:	2304      	movcc	r3, #4
 8007e1a:	441d      	add	r5, r3
 8007e1c:	445b      	add	r3, fp
 8007e1e:	461e      	mov	r6, r3
 8007e20:	462c      	mov	r4, r5
 8007e22:	4544      	cmp	r4, r8
 8007e24:	d30e      	bcc.n	8007e44 <__mdiff+0xf8>
 8007e26:	f108 0103 	add.w	r1, r8, #3
 8007e2a:	1b49      	subs	r1, r1, r5
 8007e2c:	f021 0103 	bic.w	r1, r1, #3
 8007e30:	3d03      	subs	r5, #3
 8007e32:	45a8      	cmp	r8, r5
 8007e34:	bf38      	it	cc
 8007e36:	2100      	movcc	r1, #0
 8007e38:	440b      	add	r3, r1
 8007e3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e3e:	b191      	cbz	r1, 8007e66 <__mdiff+0x11a>
 8007e40:	6117      	str	r7, [r2, #16]
 8007e42:	e79d      	b.n	8007d80 <__mdiff+0x34>
 8007e44:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e48:	46e6      	mov	lr, ip
 8007e4a:	0c08      	lsrs	r0, r1, #16
 8007e4c:	fa1c fc81 	uxtah	ip, ip, r1
 8007e50:	4471      	add	r1, lr
 8007e52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e56:	b289      	uxth	r1, r1
 8007e58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e5c:	f846 1b04 	str.w	r1, [r6], #4
 8007e60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e64:	e7dd      	b.n	8007e22 <__mdiff+0xd6>
 8007e66:	3f01      	subs	r7, #1
 8007e68:	e7e7      	b.n	8007e3a <__mdiff+0xee>
 8007e6a:	bf00      	nop
 8007e6c:	080092f4 	.word	0x080092f4
 8007e70:	08009305 	.word	0x08009305

08007e74 <__d2b>:
 8007e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e78:	460f      	mov	r7, r1
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	ec59 8b10 	vmov	r8, r9, d0
 8007e80:	4616      	mov	r6, r2
 8007e82:	f7ff fccd 	bl	8007820 <_Balloc>
 8007e86:	4604      	mov	r4, r0
 8007e88:	b930      	cbnz	r0, 8007e98 <__d2b+0x24>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	4b23      	ldr	r3, [pc, #140]	@ (8007f1c <__d2b+0xa8>)
 8007e8e:	4824      	ldr	r0, [pc, #144]	@ (8007f20 <__d2b+0xac>)
 8007e90:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e94:	f000 fa5a 	bl	800834c <__assert_func>
 8007e98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ea0:	b10d      	cbz	r5, 8007ea6 <__d2b+0x32>
 8007ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	f1b8 0300 	subs.w	r3, r8, #0
 8007eac:	d023      	beq.n	8007ef6 <__d2b+0x82>
 8007eae:	4668      	mov	r0, sp
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	f7ff fd7c 	bl	80079ae <__lo0bits>
 8007eb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007eba:	b1d0      	cbz	r0, 8007ef2 <__d2b+0x7e>
 8007ebc:	f1c0 0320 	rsb	r3, r0, #32
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	40c2      	lsrs	r2, r0
 8007ec8:	6163      	str	r3, [r4, #20]
 8007eca:	9201      	str	r2, [sp, #4]
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	61a3      	str	r3, [r4, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2201      	moveq	r2, #1
 8007ed6:	2202      	movne	r2, #2
 8007ed8:	6122      	str	r2, [r4, #16]
 8007eda:	b1a5      	cbz	r5, 8007f06 <__d2b+0x92>
 8007edc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ee0:	4405      	add	r5, r0
 8007ee2:	603d      	str	r5, [r7, #0]
 8007ee4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ee8:	6030      	str	r0, [r6, #0]
 8007eea:	4620      	mov	r0, r4
 8007eec:	b003      	add	sp, #12
 8007eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ef2:	6161      	str	r1, [r4, #20]
 8007ef4:	e7ea      	b.n	8007ecc <__d2b+0x58>
 8007ef6:	a801      	add	r0, sp, #4
 8007ef8:	f7ff fd59 	bl	80079ae <__lo0bits>
 8007efc:	9b01      	ldr	r3, [sp, #4]
 8007efe:	6163      	str	r3, [r4, #20]
 8007f00:	3020      	adds	r0, #32
 8007f02:	2201      	movs	r2, #1
 8007f04:	e7e8      	b.n	8007ed8 <__d2b+0x64>
 8007f06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f0e:	6038      	str	r0, [r7, #0]
 8007f10:	6918      	ldr	r0, [r3, #16]
 8007f12:	f7ff fd2d 	bl	8007970 <__hi0bits>
 8007f16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f1a:	e7e5      	b.n	8007ee8 <__d2b+0x74>
 8007f1c:	080092f4 	.word	0x080092f4
 8007f20:	08009305 	.word	0x08009305

08007f24 <__ssputs_r>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	688e      	ldr	r6, [r1, #8]
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	42be      	cmp	r6, r7
 8007f2e:	680b      	ldr	r3, [r1, #0]
 8007f30:	4682      	mov	sl, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	4690      	mov	r8, r2
 8007f36:	d82d      	bhi.n	8007f94 <__ssputs_r+0x70>
 8007f38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f40:	d026      	beq.n	8007f90 <__ssputs_r+0x6c>
 8007f42:	6965      	ldr	r5, [r4, #20]
 8007f44:	6909      	ldr	r1, [r1, #16]
 8007f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f4a:	eba3 0901 	sub.w	r9, r3, r1
 8007f4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f52:	1c7b      	adds	r3, r7, #1
 8007f54:	444b      	add	r3, r9
 8007f56:	106d      	asrs	r5, r5, #1
 8007f58:	429d      	cmp	r5, r3
 8007f5a:	bf38      	it	cc
 8007f5c:	461d      	movcc	r5, r3
 8007f5e:	0553      	lsls	r3, r2, #21
 8007f60:	d527      	bpl.n	8007fb2 <__ssputs_r+0x8e>
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7ff fbd0 	bl	8007708 <_malloc_r>
 8007f68:	4606      	mov	r6, r0
 8007f6a:	b360      	cbz	r0, 8007fc6 <__ssputs_r+0xa2>
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	464a      	mov	r2, r9
 8007f70:	f7fe fcfb 	bl	800696a <memcpy>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	6126      	str	r6, [r4, #16]
 8007f82:	6165      	str	r5, [r4, #20]
 8007f84:	444e      	add	r6, r9
 8007f86:	eba5 0509 	sub.w	r5, r5, r9
 8007f8a:	6026      	str	r6, [r4, #0]
 8007f8c:	60a5      	str	r5, [r4, #8]
 8007f8e:	463e      	mov	r6, r7
 8007f90:	42be      	cmp	r6, r7
 8007f92:	d900      	bls.n	8007f96 <__ssputs_r+0x72>
 8007f94:	463e      	mov	r6, r7
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	4632      	mov	r2, r6
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	f7fe fc4b 	bl	8006836 <memmove>
 8007fa0:	68a3      	ldr	r3, [r4, #8]
 8007fa2:	1b9b      	subs	r3, r3, r6
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	4433      	add	r3, r6
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	2000      	movs	r0, #0
 8007fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	f000 fa0e 	bl	80083d4 <_realloc_r>
 8007fb8:	4606      	mov	r6, r0
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d1e0      	bne.n	8007f80 <__ssputs_r+0x5c>
 8007fbe:	6921      	ldr	r1, [r4, #16]
 8007fc0:	4650      	mov	r0, sl
 8007fc2:	f7ff fb2d 	bl	8007620 <_free_r>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	f8ca 3000 	str.w	r3, [sl]
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	e7e9      	b.n	8007fae <__ssputs_r+0x8a>
	...

08007fdc <_svfiprintf_r>:
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	4698      	mov	r8, r3
 8007fe2:	898b      	ldrh	r3, [r1, #12]
 8007fe4:	061b      	lsls	r3, r3, #24
 8007fe6:	b09d      	sub	sp, #116	@ 0x74
 8007fe8:	4607      	mov	r7, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	4614      	mov	r4, r2
 8007fee:	d510      	bpl.n	8008012 <_svfiprintf_r+0x36>
 8007ff0:	690b      	ldr	r3, [r1, #16]
 8007ff2:	b973      	cbnz	r3, 8008012 <_svfiprintf_r+0x36>
 8007ff4:	2140      	movs	r1, #64	@ 0x40
 8007ff6:	f7ff fb87 	bl	8007708 <_malloc_r>
 8007ffa:	6028      	str	r0, [r5, #0]
 8007ffc:	6128      	str	r0, [r5, #16]
 8007ffe:	b930      	cbnz	r0, 800800e <_svfiprintf_r+0x32>
 8008000:	230c      	movs	r3, #12
 8008002:	603b      	str	r3, [r7, #0]
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	b01d      	add	sp, #116	@ 0x74
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	2340      	movs	r3, #64	@ 0x40
 8008010:	616b      	str	r3, [r5, #20]
 8008012:	2300      	movs	r3, #0
 8008014:	9309      	str	r3, [sp, #36]	@ 0x24
 8008016:	2320      	movs	r3, #32
 8008018:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800801c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008020:	2330      	movs	r3, #48	@ 0x30
 8008022:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081c0 <_svfiprintf_r+0x1e4>
 8008026:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800802a:	f04f 0901 	mov.w	r9, #1
 800802e:	4623      	mov	r3, r4
 8008030:	469a      	mov	sl, r3
 8008032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008036:	b10a      	cbz	r2, 800803c <_svfiprintf_r+0x60>
 8008038:	2a25      	cmp	r2, #37	@ 0x25
 800803a:	d1f9      	bne.n	8008030 <_svfiprintf_r+0x54>
 800803c:	ebba 0b04 	subs.w	fp, sl, r4
 8008040:	d00b      	beq.n	800805a <_svfiprintf_r+0x7e>
 8008042:	465b      	mov	r3, fp
 8008044:	4622      	mov	r2, r4
 8008046:	4629      	mov	r1, r5
 8008048:	4638      	mov	r0, r7
 800804a:	f7ff ff6b 	bl	8007f24 <__ssputs_r>
 800804e:	3001      	adds	r0, #1
 8008050:	f000 80a7 	beq.w	80081a2 <_svfiprintf_r+0x1c6>
 8008054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008056:	445a      	add	r2, fp
 8008058:	9209      	str	r2, [sp, #36]	@ 0x24
 800805a:	f89a 3000 	ldrb.w	r3, [sl]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 809f 	beq.w	80081a2 <_svfiprintf_r+0x1c6>
 8008064:	2300      	movs	r3, #0
 8008066:	f04f 32ff 	mov.w	r2, #4294967295
 800806a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800806e:	f10a 0a01 	add.w	sl, sl, #1
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	9307      	str	r3, [sp, #28]
 8008076:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800807a:	931a      	str	r3, [sp, #104]	@ 0x68
 800807c:	4654      	mov	r4, sl
 800807e:	2205      	movs	r2, #5
 8008080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008084:	484e      	ldr	r0, [pc, #312]	@ (80081c0 <_svfiprintf_r+0x1e4>)
 8008086:	f7f8 f8ab 	bl	80001e0 <memchr>
 800808a:	9a04      	ldr	r2, [sp, #16]
 800808c:	b9d8      	cbnz	r0, 80080c6 <_svfiprintf_r+0xea>
 800808e:	06d0      	lsls	r0, r2, #27
 8008090:	bf44      	itt	mi
 8008092:	2320      	movmi	r3, #32
 8008094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008098:	0711      	lsls	r1, r2, #28
 800809a:	bf44      	itt	mi
 800809c:	232b      	movmi	r3, #43	@ 0x2b
 800809e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080a2:	f89a 3000 	ldrb.w	r3, [sl]
 80080a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a8:	d015      	beq.n	80080d6 <_svfiprintf_r+0xfa>
 80080aa:	9a07      	ldr	r2, [sp, #28]
 80080ac:	4654      	mov	r4, sl
 80080ae:	2000      	movs	r0, #0
 80080b0:	f04f 0c0a 	mov.w	ip, #10
 80080b4:	4621      	mov	r1, r4
 80080b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ba:	3b30      	subs	r3, #48	@ 0x30
 80080bc:	2b09      	cmp	r3, #9
 80080be:	d94b      	bls.n	8008158 <_svfiprintf_r+0x17c>
 80080c0:	b1b0      	cbz	r0, 80080f0 <_svfiprintf_r+0x114>
 80080c2:	9207      	str	r2, [sp, #28]
 80080c4:	e014      	b.n	80080f0 <_svfiprintf_r+0x114>
 80080c6:	eba0 0308 	sub.w	r3, r0, r8
 80080ca:	fa09 f303 	lsl.w	r3, r9, r3
 80080ce:	4313      	orrs	r3, r2
 80080d0:	9304      	str	r3, [sp, #16]
 80080d2:	46a2      	mov	sl, r4
 80080d4:	e7d2      	b.n	800807c <_svfiprintf_r+0xa0>
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	1d19      	adds	r1, r3, #4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	9103      	str	r1, [sp, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bfbb      	ittet	lt
 80080e2:	425b      	neglt	r3, r3
 80080e4:	f042 0202 	orrlt.w	r2, r2, #2
 80080e8:	9307      	strge	r3, [sp, #28]
 80080ea:	9307      	strlt	r3, [sp, #28]
 80080ec:	bfb8      	it	lt
 80080ee:	9204      	strlt	r2, [sp, #16]
 80080f0:	7823      	ldrb	r3, [r4, #0]
 80080f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080f4:	d10a      	bne.n	800810c <_svfiprintf_r+0x130>
 80080f6:	7863      	ldrb	r3, [r4, #1]
 80080f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080fa:	d132      	bne.n	8008162 <_svfiprintf_r+0x186>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	1d1a      	adds	r2, r3, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	9203      	str	r2, [sp, #12]
 8008104:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008108:	3402      	adds	r4, #2
 800810a:	9305      	str	r3, [sp, #20]
 800810c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081d0 <_svfiprintf_r+0x1f4>
 8008110:	7821      	ldrb	r1, [r4, #0]
 8008112:	2203      	movs	r2, #3
 8008114:	4650      	mov	r0, sl
 8008116:	f7f8 f863 	bl	80001e0 <memchr>
 800811a:	b138      	cbz	r0, 800812c <_svfiprintf_r+0x150>
 800811c:	9b04      	ldr	r3, [sp, #16]
 800811e:	eba0 000a 	sub.w	r0, r0, sl
 8008122:	2240      	movs	r2, #64	@ 0x40
 8008124:	4082      	lsls	r2, r0
 8008126:	4313      	orrs	r3, r2
 8008128:	3401      	adds	r4, #1
 800812a:	9304      	str	r3, [sp, #16]
 800812c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008130:	4824      	ldr	r0, [pc, #144]	@ (80081c4 <_svfiprintf_r+0x1e8>)
 8008132:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008136:	2206      	movs	r2, #6
 8008138:	f7f8 f852 	bl	80001e0 <memchr>
 800813c:	2800      	cmp	r0, #0
 800813e:	d036      	beq.n	80081ae <_svfiprintf_r+0x1d2>
 8008140:	4b21      	ldr	r3, [pc, #132]	@ (80081c8 <_svfiprintf_r+0x1ec>)
 8008142:	bb1b      	cbnz	r3, 800818c <_svfiprintf_r+0x1b0>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	3307      	adds	r3, #7
 8008148:	f023 0307 	bic.w	r3, r3, #7
 800814c:	3308      	adds	r3, #8
 800814e:	9303      	str	r3, [sp, #12]
 8008150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008152:	4433      	add	r3, r6
 8008154:	9309      	str	r3, [sp, #36]	@ 0x24
 8008156:	e76a      	b.n	800802e <_svfiprintf_r+0x52>
 8008158:	fb0c 3202 	mla	r2, ip, r2, r3
 800815c:	460c      	mov	r4, r1
 800815e:	2001      	movs	r0, #1
 8008160:	e7a8      	b.n	80080b4 <_svfiprintf_r+0xd8>
 8008162:	2300      	movs	r3, #0
 8008164:	3401      	adds	r4, #1
 8008166:	9305      	str	r3, [sp, #20]
 8008168:	4619      	mov	r1, r3
 800816a:	f04f 0c0a 	mov.w	ip, #10
 800816e:	4620      	mov	r0, r4
 8008170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008174:	3a30      	subs	r2, #48	@ 0x30
 8008176:	2a09      	cmp	r2, #9
 8008178:	d903      	bls.n	8008182 <_svfiprintf_r+0x1a6>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0c6      	beq.n	800810c <_svfiprintf_r+0x130>
 800817e:	9105      	str	r1, [sp, #20]
 8008180:	e7c4      	b.n	800810c <_svfiprintf_r+0x130>
 8008182:	fb0c 2101 	mla	r1, ip, r1, r2
 8008186:	4604      	mov	r4, r0
 8008188:	2301      	movs	r3, #1
 800818a:	e7f0      	b.n	800816e <_svfiprintf_r+0x192>
 800818c:	ab03      	add	r3, sp, #12
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	462a      	mov	r2, r5
 8008192:	4b0e      	ldr	r3, [pc, #56]	@ (80081cc <_svfiprintf_r+0x1f0>)
 8008194:	a904      	add	r1, sp, #16
 8008196:	4638      	mov	r0, r7
 8008198:	f7fd fe70 	bl	8005e7c <_printf_float>
 800819c:	1c42      	adds	r2, r0, #1
 800819e:	4606      	mov	r6, r0
 80081a0:	d1d6      	bne.n	8008150 <_svfiprintf_r+0x174>
 80081a2:	89ab      	ldrh	r3, [r5, #12]
 80081a4:	065b      	lsls	r3, r3, #25
 80081a6:	f53f af2d 	bmi.w	8008004 <_svfiprintf_r+0x28>
 80081aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081ac:	e72c      	b.n	8008008 <_svfiprintf_r+0x2c>
 80081ae:	ab03      	add	r3, sp, #12
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	462a      	mov	r2, r5
 80081b4:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <_svfiprintf_r+0x1f0>)
 80081b6:	a904      	add	r1, sp, #16
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7fe f8f7 	bl	80063ac <_printf_i>
 80081be:	e7ed      	b.n	800819c <_svfiprintf_r+0x1c0>
 80081c0:	08009460 	.word	0x08009460
 80081c4:	0800946a 	.word	0x0800946a
 80081c8:	08005e7d 	.word	0x08005e7d
 80081cc:	08007f25 	.word	0x08007f25
 80081d0:	08009466 	.word	0x08009466

080081d4 <__sflush_r>:
 80081d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081dc:	0716      	lsls	r6, r2, #28
 80081de:	4605      	mov	r5, r0
 80081e0:	460c      	mov	r4, r1
 80081e2:	d454      	bmi.n	800828e <__sflush_r+0xba>
 80081e4:	684b      	ldr	r3, [r1, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	dc02      	bgt.n	80081f0 <__sflush_r+0x1c>
 80081ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dd48      	ble.n	8008282 <__sflush_r+0xae>
 80081f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081f2:	2e00      	cmp	r6, #0
 80081f4:	d045      	beq.n	8008282 <__sflush_r+0xae>
 80081f6:	2300      	movs	r3, #0
 80081f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081fc:	682f      	ldr	r7, [r5, #0]
 80081fe:	6a21      	ldr	r1, [r4, #32]
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	d030      	beq.n	8008266 <__sflush_r+0x92>
 8008204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	0759      	lsls	r1, r3, #29
 800820a:	d505      	bpl.n	8008218 <__sflush_r+0x44>
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008212:	b10b      	cbz	r3, 8008218 <__sflush_r+0x44>
 8008214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	2300      	movs	r3, #0
 800821a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	4628      	mov	r0, r5
 8008220:	47b0      	blx	r6
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	d106      	bne.n	8008236 <__sflush_r+0x62>
 8008228:	6829      	ldr	r1, [r5, #0]
 800822a:	291d      	cmp	r1, #29
 800822c:	d82b      	bhi.n	8008286 <__sflush_r+0xb2>
 800822e:	4a2a      	ldr	r2, [pc, #168]	@ (80082d8 <__sflush_r+0x104>)
 8008230:	410a      	asrs	r2, r1
 8008232:	07d6      	lsls	r6, r2, #31
 8008234:	d427      	bmi.n	8008286 <__sflush_r+0xb2>
 8008236:	2200      	movs	r2, #0
 8008238:	6062      	str	r2, [r4, #4]
 800823a:	04d9      	lsls	r1, r3, #19
 800823c:	6922      	ldr	r2, [r4, #16]
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	d504      	bpl.n	800824c <__sflush_r+0x78>
 8008242:	1c42      	adds	r2, r0, #1
 8008244:	d101      	bne.n	800824a <__sflush_r+0x76>
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	b903      	cbnz	r3, 800824c <__sflush_r+0x78>
 800824a:	6560      	str	r0, [r4, #84]	@ 0x54
 800824c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800824e:	602f      	str	r7, [r5, #0]
 8008250:	b1b9      	cbz	r1, 8008282 <__sflush_r+0xae>
 8008252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008256:	4299      	cmp	r1, r3
 8008258:	d002      	beq.n	8008260 <__sflush_r+0x8c>
 800825a:	4628      	mov	r0, r5
 800825c:	f7ff f9e0 	bl	8007620 <_free_r>
 8008260:	2300      	movs	r3, #0
 8008262:	6363      	str	r3, [r4, #52]	@ 0x34
 8008264:	e00d      	b.n	8008282 <__sflush_r+0xae>
 8008266:	2301      	movs	r3, #1
 8008268:	4628      	mov	r0, r5
 800826a:	47b0      	blx	r6
 800826c:	4602      	mov	r2, r0
 800826e:	1c50      	adds	r0, r2, #1
 8008270:	d1c9      	bne.n	8008206 <__sflush_r+0x32>
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0c6      	beq.n	8008206 <__sflush_r+0x32>
 8008278:	2b1d      	cmp	r3, #29
 800827a:	d001      	beq.n	8008280 <__sflush_r+0xac>
 800827c:	2b16      	cmp	r3, #22
 800827e:	d11e      	bne.n	80082be <__sflush_r+0xea>
 8008280:	602f      	str	r7, [r5, #0]
 8008282:	2000      	movs	r0, #0
 8008284:	e022      	b.n	80082cc <__sflush_r+0xf8>
 8008286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800828a:	b21b      	sxth	r3, r3
 800828c:	e01b      	b.n	80082c6 <__sflush_r+0xf2>
 800828e:	690f      	ldr	r7, [r1, #16]
 8008290:	2f00      	cmp	r7, #0
 8008292:	d0f6      	beq.n	8008282 <__sflush_r+0xae>
 8008294:	0793      	lsls	r3, r2, #30
 8008296:	680e      	ldr	r6, [r1, #0]
 8008298:	bf08      	it	eq
 800829a:	694b      	ldreq	r3, [r1, #20]
 800829c:	600f      	str	r7, [r1, #0]
 800829e:	bf18      	it	ne
 80082a0:	2300      	movne	r3, #0
 80082a2:	eba6 0807 	sub.w	r8, r6, r7
 80082a6:	608b      	str	r3, [r1, #8]
 80082a8:	f1b8 0f00 	cmp.w	r8, #0
 80082ac:	dde9      	ble.n	8008282 <__sflush_r+0xae>
 80082ae:	6a21      	ldr	r1, [r4, #32]
 80082b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082b2:	4643      	mov	r3, r8
 80082b4:	463a      	mov	r2, r7
 80082b6:	4628      	mov	r0, r5
 80082b8:	47b0      	blx	r6
 80082ba:	2800      	cmp	r0, #0
 80082bc:	dc08      	bgt.n	80082d0 <__sflush_r+0xfc>
 80082be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	4407      	add	r7, r0
 80082d2:	eba8 0800 	sub.w	r8, r8, r0
 80082d6:	e7e7      	b.n	80082a8 <__sflush_r+0xd4>
 80082d8:	dfbffffe 	.word	0xdfbffffe

080082dc <_fflush_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	690b      	ldr	r3, [r1, #16]
 80082e0:	4605      	mov	r5, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	b913      	cbnz	r3, 80082ec <_fflush_r+0x10>
 80082e6:	2500      	movs	r5, #0
 80082e8:	4628      	mov	r0, r5
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	b118      	cbz	r0, 80082f6 <_fflush_r+0x1a>
 80082ee:	6a03      	ldr	r3, [r0, #32]
 80082f0:	b90b      	cbnz	r3, 80082f6 <_fflush_r+0x1a>
 80082f2:	f7fe fa07 	bl	8006704 <__sinit>
 80082f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0f3      	beq.n	80082e6 <_fflush_r+0xa>
 80082fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008300:	07d0      	lsls	r0, r2, #31
 8008302:	d404      	bmi.n	800830e <_fflush_r+0x32>
 8008304:	0599      	lsls	r1, r3, #22
 8008306:	d402      	bmi.n	800830e <_fflush_r+0x32>
 8008308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800830a:	f7fe fb2c 	bl	8006966 <__retarget_lock_acquire_recursive>
 800830e:	4628      	mov	r0, r5
 8008310:	4621      	mov	r1, r4
 8008312:	f7ff ff5f 	bl	80081d4 <__sflush_r>
 8008316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008318:	07da      	lsls	r2, r3, #31
 800831a:	4605      	mov	r5, r0
 800831c:	d4e4      	bmi.n	80082e8 <_fflush_r+0xc>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	059b      	lsls	r3, r3, #22
 8008322:	d4e1      	bmi.n	80082e8 <_fflush_r+0xc>
 8008324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008326:	f7fe fb1f 	bl	8006968 <__retarget_lock_release_recursive>
 800832a:	e7dd      	b.n	80082e8 <_fflush_r+0xc>

0800832c <_sbrk_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d06      	ldr	r5, [pc, #24]	@ (8008348 <_sbrk_r+0x1c>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	f7f9 fe3e 	bl	8001fb8 <_sbrk>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_sbrk_r+0x1a>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_sbrk_r+0x1a>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	20000a58 	.word	0x20000a58

0800834c <__assert_func>:
 800834c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800834e:	4614      	mov	r4, r2
 8008350:	461a      	mov	r2, r3
 8008352:	4b09      	ldr	r3, [pc, #36]	@ (8008378 <__assert_func+0x2c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4605      	mov	r5, r0
 8008358:	68d8      	ldr	r0, [r3, #12]
 800835a:	b954      	cbnz	r4, 8008372 <__assert_func+0x26>
 800835c:	4b07      	ldr	r3, [pc, #28]	@ (800837c <__assert_func+0x30>)
 800835e:	461c      	mov	r4, r3
 8008360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008364:	9100      	str	r1, [sp, #0]
 8008366:	462b      	mov	r3, r5
 8008368:	4905      	ldr	r1, [pc, #20]	@ (8008380 <__assert_func+0x34>)
 800836a:	f000 f86f 	bl	800844c <fiprintf>
 800836e:	f000 f87f 	bl	8008470 <abort>
 8008372:	4b04      	ldr	r3, [pc, #16]	@ (8008384 <__assert_func+0x38>)
 8008374:	e7f4      	b.n	8008360 <__assert_func+0x14>
 8008376:	bf00      	nop
 8008378:	20000020 	.word	0x20000020
 800837c:	080094b6 	.word	0x080094b6
 8008380:	08009488 	.word	0x08009488
 8008384:	0800947b 	.word	0x0800947b

08008388 <_calloc_r>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	fba1 5402 	umull	r5, r4, r1, r2
 800838e:	b93c      	cbnz	r4, 80083a0 <_calloc_r+0x18>
 8008390:	4629      	mov	r1, r5
 8008392:	f7ff f9b9 	bl	8007708 <_malloc_r>
 8008396:	4606      	mov	r6, r0
 8008398:	b928      	cbnz	r0, 80083a6 <_calloc_r+0x1e>
 800839a:	2600      	movs	r6, #0
 800839c:	4630      	mov	r0, r6
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	220c      	movs	r2, #12
 80083a2:	6002      	str	r2, [r0, #0]
 80083a4:	e7f9      	b.n	800839a <_calloc_r+0x12>
 80083a6:	462a      	mov	r2, r5
 80083a8:	4621      	mov	r1, r4
 80083aa:	f7fe fa5e 	bl	800686a <memset>
 80083ae:	e7f5      	b.n	800839c <_calloc_r+0x14>

080083b0 <__ascii_mbtowc>:
 80083b0:	b082      	sub	sp, #8
 80083b2:	b901      	cbnz	r1, 80083b6 <__ascii_mbtowc+0x6>
 80083b4:	a901      	add	r1, sp, #4
 80083b6:	b142      	cbz	r2, 80083ca <__ascii_mbtowc+0x1a>
 80083b8:	b14b      	cbz	r3, 80083ce <__ascii_mbtowc+0x1e>
 80083ba:	7813      	ldrb	r3, [r2, #0]
 80083bc:	600b      	str	r3, [r1, #0]
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	1e10      	subs	r0, r2, #0
 80083c2:	bf18      	it	ne
 80083c4:	2001      	movne	r0, #1
 80083c6:	b002      	add	sp, #8
 80083c8:	4770      	bx	lr
 80083ca:	4610      	mov	r0, r2
 80083cc:	e7fb      	b.n	80083c6 <__ascii_mbtowc+0x16>
 80083ce:	f06f 0001 	mvn.w	r0, #1
 80083d2:	e7f8      	b.n	80083c6 <__ascii_mbtowc+0x16>

080083d4 <_realloc_r>:
 80083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	4680      	mov	r8, r0
 80083da:	4615      	mov	r5, r2
 80083dc:	460c      	mov	r4, r1
 80083de:	b921      	cbnz	r1, 80083ea <_realloc_r+0x16>
 80083e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	4611      	mov	r1, r2
 80083e6:	f7ff b98f 	b.w	8007708 <_malloc_r>
 80083ea:	b92a      	cbnz	r2, 80083f8 <_realloc_r+0x24>
 80083ec:	f7ff f918 	bl	8007620 <_free_r>
 80083f0:	2400      	movs	r4, #0
 80083f2:	4620      	mov	r0, r4
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	f000 f841 	bl	800847e <_malloc_usable_size_r>
 80083fc:	4285      	cmp	r5, r0
 80083fe:	4606      	mov	r6, r0
 8008400:	d802      	bhi.n	8008408 <_realloc_r+0x34>
 8008402:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008406:	d8f4      	bhi.n	80083f2 <_realloc_r+0x1e>
 8008408:	4629      	mov	r1, r5
 800840a:	4640      	mov	r0, r8
 800840c:	f7ff f97c 	bl	8007708 <_malloc_r>
 8008410:	4607      	mov	r7, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d0ec      	beq.n	80083f0 <_realloc_r+0x1c>
 8008416:	42b5      	cmp	r5, r6
 8008418:	462a      	mov	r2, r5
 800841a:	4621      	mov	r1, r4
 800841c:	bf28      	it	cs
 800841e:	4632      	movcs	r2, r6
 8008420:	f7fe faa3 	bl	800696a <memcpy>
 8008424:	4621      	mov	r1, r4
 8008426:	4640      	mov	r0, r8
 8008428:	f7ff f8fa 	bl	8007620 <_free_r>
 800842c:	463c      	mov	r4, r7
 800842e:	e7e0      	b.n	80083f2 <_realloc_r+0x1e>

08008430 <__ascii_wctomb>:
 8008430:	4603      	mov	r3, r0
 8008432:	4608      	mov	r0, r1
 8008434:	b141      	cbz	r1, 8008448 <__ascii_wctomb+0x18>
 8008436:	2aff      	cmp	r2, #255	@ 0xff
 8008438:	d904      	bls.n	8008444 <__ascii_wctomb+0x14>
 800843a:	228a      	movs	r2, #138	@ 0x8a
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	f04f 30ff 	mov.w	r0, #4294967295
 8008442:	4770      	bx	lr
 8008444:	700a      	strb	r2, [r1, #0]
 8008446:	2001      	movs	r0, #1
 8008448:	4770      	bx	lr
	...

0800844c <fiprintf>:
 800844c:	b40e      	push	{r1, r2, r3}
 800844e:	b503      	push	{r0, r1, lr}
 8008450:	4601      	mov	r1, r0
 8008452:	ab03      	add	r3, sp, #12
 8008454:	4805      	ldr	r0, [pc, #20]	@ (800846c <fiprintf+0x20>)
 8008456:	f853 2b04 	ldr.w	r2, [r3], #4
 800845a:	6800      	ldr	r0, [r0, #0]
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f000 f83f 	bl	80084e0 <_vfiprintf_r>
 8008462:	b002      	add	sp, #8
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b003      	add	sp, #12
 800846a:	4770      	bx	lr
 800846c:	20000020 	.word	0x20000020

08008470 <abort>:
 8008470:	b508      	push	{r3, lr}
 8008472:	2006      	movs	r0, #6
 8008474:	f000 fa08 	bl	8008888 <raise>
 8008478:	2001      	movs	r0, #1
 800847a:	f7f9 fd25 	bl	8001ec8 <_exit>

0800847e <_malloc_usable_size_r>:
 800847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008482:	1f18      	subs	r0, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfbc      	itt	lt
 8008488:	580b      	ldrlt	r3, [r1, r0]
 800848a:	18c0      	addlt	r0, r0, r3
 800848c:	4770      	bx	lr

0800848e <__sfputc_r>:
 800848e:	6893      	ldr	r3, [r2, #8]
 8008490:	3b01      	subs	r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	b410      	push	{r4}
 8008496:	6093      	str	r3, [r2, #8]
 8008498:	da08      	bge.n	80084ac <__sfputc_r+0x1e>
 800849a:	6994      	ldr	r4, [r2, #24]
 800849c:	42a3      	cmp	r3, r4
 800849e:	db01      	blt.n	80084a4 <__sfputc_r+0x16>
 80084a0:	290a      	cmp	r1, #10
 80084a2:	d103      	bne.n	80084ac <__sfputc_r+0x1e>
 80084a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a8:	f000 b932 	b.w	8008710 <__swbuf_r>
 80084ac:	6813      	ldr	r3, [r2, #0]
 80084ae:	1c58      	adds	r0, r3, #1
 80084b0:	6010      	str	r0, [r2, #0]
 80084b2:	7019      	strb	r1, [r3, #0]
 80084b4:	4608      	mov	r0, r1
 80084b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <__sfputs_r>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	4606      	mov	r6, r0
 80084c0:	460f      	mov	r7, r1
 80084c2:	4614      	mov	r4, r2
 80084c4:	18d5      	adds	r5, r2, r3
 80084c6:	42ac      	cmp	r4, r5
 80084c8:	d101      	bne.n	80084ce <__sfputs_r+0x12>
 80084ca:	2000      	movs	r0, #0
 80084cc:	e007      	b.n	80084de <__sfputs_r+0x22>
 80084ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d2:	463a      	mov	r2, r7
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7ff ffda 	bl	800848e <__sfputc_r>
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	d1f3      	bne.n	80084c6 <__sfputs_r+0xa>
 80084de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084e0 <_vfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	460d      	mov	r5, r1
 80084e6:	b09d      	sub	sp, #116	@ 0x74
 80084e8:	4614      	mov	r4, r2
 80084ea:	4698      	mov	r8, r3
 80084ec:	4606      	mov	r6, r0
 80084ee:	b118      	cbz	r0, 80084f8 <_vfiprintf_r+0x18>
 80084f0:	6a03      	ldr	r3, [r0, #32]
 80084f2:	b90b      	cbnz	r3, 80084f8 <_vfiprintf_r+0x18>
 80084f4:	f7fe f906 	bl	8006704 <__sinit>
 80084f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084fa:	07d9      	lsls	r1, r3, #31
 80084fc:	d405      	bmi.n	800850a <_vfiprintf_r+0x2a>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	059a      	lsls	r2, r3, #22
 8008502:	d402      	bmi.n	800850a <_vfiprintf_r+0x2a>
 8008504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008506:	f7fe fa2e 	bl	8006966 <__retarget_lock_acquire_recursive>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	071b      	lsls	r3, r3, #28
 800850e:	d501      	bpl.n	8008514 <_vfiprintf_r+0x34>
 8008510:	692b      	ldr	r3, [r5, #16]
 8008512:	b99b      	cbnz	r3, 800853c <_vfiprintf_r+0x5c>
 8008514:	4629      	mov	r1, r5
 8008516:	4630      	mov	r0, r6
 8008518:	f000 f938 	bl	800878c <__swsetup_r>
 800851c:	b170      	cbz	r0, 800853c <_vfiprintf_r+0x5c>
 800851e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008520:	07dc      	lsls	r4, r3, #31
 8008522:	d504      	bpl.n	800852e <_vfiprintf_r+0x4e>
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b01d      	add	sp, #116	@ 0x74
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	0598      	lsls	r0, r3, #22
 8008532:	d4f7      	bmi.n	8008524 <_vfiprintf_r+0x44>
 8008534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008536:	f7fe fa17 	bl	8006968 <__retarget_lock_release_recursive>
 800853a:	e7f3      	b.n	8008524 <_vfiprintf_r+0x44>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008540:	2320      	movs	r3, #32
 8008542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	2330      	movs	r3, #48	@ 0x30
 800854c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086fc <_vfiprintf_r+0x21c>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008554:	f04f 0901 	mov.w	r9, #1
 8008558:	4623      	mov	r3, r4
 800855a:	469a      	mov	sl, r3
 800855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008560:	b10a      	cbz	r2, 8008566 <_vfiprintf_r+0x86>
 8008562:	2a25      	cmp	r2, #37	@ 0x25
 8008564:	d1f9      	bne.n	800855a <_vfiprintf_r+0x7a>
 8008566:	ebba 0b04 	subs.w	fp, sl, r4
 800856a:	d00b      	beq.n	8008584 <_vfiprintf_r+0xa4>
 800856c:	465b      	mov	r3, fp
 800856e:	4622      	mov	r2, r4
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ffa2 	bl	80084bc <__sfputs_r>
 8008578:	3001      	adds	r0, #1
 800857a:	f000 80a7 	beq.w	80086cc <_vfiprintf_r+0x1ec>
 800857e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008580:	445a      	add	r2, fp
 8008582:	9209      	str	r2, [sp, #36]	@ 0x24
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 809f 	beq.w	80086cc <_vfiprintf_r+0x1ec>
 800858e:	2300      	movs	r3, #0
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80085a6:	4654      	mov	r4, sl
 80085a8:	2205      	movs	r2, #5
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4853      	ldr	r0, [pc, #332]	@ (80086fc <_vfiprintf_r+0x21c>)
 80085b0:	f7f7 fe16 	bl	80001e0 <memchr>
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	b9d8      	cbnz	r0, 80085f0 <_vfiprintf_r+0x110>
 80085b8:	06d1      	lsls	r1, r2, #27
 80085ba:	bf44      	itt	mi
 80085bc:	2320      	movmi	r3, #32
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c2:	0713      	lsls	r3, r2, #28
 80085c4:	bf44      	itt	mi
 80085c6:	232b      	movmi	r3, #43	@ 0x2b
 80085c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80085d2:	d015      	beq.n	8008600 <_vfiprintf_r+0x120>
 80085d4:	9a07      	ldr	r2, [sp, #28]
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4621      	mov	r1, r4
 80085e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e4:	3b30      	subs	r3, #48	@ 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d94b      	bls.n	8008682 <_vfiprintf_r+0x1a2>
 80085ea:	b1b0      	cbz	r0, 800861a <_vfiprintf_r+0x13a>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e014      	b.n	800861a <_vfiprintf_r+0x13a>
 80085f0:	eba0 0308 	sub.w	r3, r0, r8
 80085f4:	fa09 f303 	lsl.w	r3, r9, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	46a2      	mov	sl, r4
 80085fe:	e7d2      	b.n	80085a6 <_vfiprintf_r+0xc6>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bfbb      	ittet	lt
 800860c:	425b      	neglt	r3, r3
 800860e:	f042 0202 	orrlt.w	r2, r2, #2
 8008612:	9307      	strge	r3, [sp, #28]
 8008614:	9307      	strlt	r3, [sp, #28]
 8008616:	bfb8      	it	lt
 8008618:	9204      	strlt	r2, [sp, #16]
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	2b2e      	cmp	r3, #46	@ 0x2e
 800861e:	d10a      	bne.n	8008636 <_vfiprintf_r+0x156>
 8008620:	7863      	ldrb	r3, [r4, #1]
 8008622:	2b2a      	cmp	r3, #42	@ 0x2a
 8008624:	d132      	bne.n	800868c <_vfiprintf_r+0x1ac>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	9203      	str	r2, [sp, #12]
 800862e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008632:	3402      	adds	r4, #2
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800870c <_vfiprintf_r+0x22c>
 800863a:	7821      	ldrb	r1, [r4, #0]
 800863c:	2203      	movs	r2, #3
 800863e:	4650      	mov	r0, sl
 8008640:	f7f7 fdce 	bl	80001e0 <memchr>
 8008644:	b138      	cbz	r0, 8008656 <_vfiprintf_r+0x176>
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	eba0 000a 	sub.w	r0, r0, sl
 800864c:	2240      	movs	r2, #64	@ 0x40
 800864e:	4082      	lsls	r2, r0
 8008650:	4313      	orrs	r3, r2
 8008652:	3401      	adds	r4, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865a:	4829      	ldr	r0, [pc, #164]	@ (8008700 <_vfiprintf_r+0x220>)
 800865c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008660:	2206      	movs	r2, #6
 8008662:	f7f7 fdbd 	bl	80001e0 <memchr>
 8008666:	2800      	cmp	r0, #0
 8008668:	d03f      	beq.n	80086ea <_vfiprintf_r+0x20a>
 800866a:	4b26      	ldr	r3, [pc, #152]	@ (8008704 <_vfiprintf_r+0x224>)
 800866c:	bb1b      	cbnz	r3, 80086b6 <_vfiprintf_r+0x1d6>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	3307      	adds	r3, #7
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	3308      	adds	r3, #8
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800867c:	443b      	add	r3, r7
 800867e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008680:	e76a      	b.n	8008558 <_vfiprintf_r+0x78>
 8008682:	fb0c 3202 	mla	r2, ip, r2, r3
 8008686:	460c      	mov	r4, r1
 8008688:	2001      	movs	r0, #1
 800868a:	e7a8      	b.n	80085de <_vfiprintf_r+0xfe>
 800868c:	2300      	movs	r3, #0
 800868e:	3401      	adds	r4, #1
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	4619      	mov	r1, r3
 8008694:	f04f 0c0a 	mov.w	ip, #10
 8008698:	4620      	mov	r0, r4
 800869a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869e:	3a30      	subs	r2, #48	@ 0x30
 80086a0:	2a09      	cmp	r2, #9
 80086a2:	d903      	bls.n	80086ac <_vfiprintf_r+0x1cc>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0c6      	beq.n	8008636 <_vfiprintf_r+0x156>
 80086a8:	9105      	str	r1, [sp, #20]
 80086aa:	e7c4      	b.n	8008636 <_vfiprintf_r+0x156>
 80086ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b0:	4604      	mov	r4, r0
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7f0      	b.n	8008698 <_vfiprintf_r+0x1b8>
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <_vfiprintf_r+0x228>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7fd fbdb 	bl	8005e7c <_printf_float>
 80086c6:	4607      	mov	r7, r0
 80086c8:	1c78      	adds	r0, r7, #1
 80086ca:	d1d6      	bne.n	800867a <_vfiprintf_r+0x19a>
 80086cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086ce:	07d9      	lsls	r1, r3, #31
 80086d0:	d405      	bmi.n	80086de <_vfiprintf_r+0x1fe>
 80086d2:	89ab      	ldrh	r3, [r5, #12]
 80086d4:	059a      	lsls	r2, r3, #22
 80086d6:	d402      	bmi.n	80086de <_vfiprintf_r+0x1fe>
 80086d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086da:	f7fe f945 	bl	8006968 <__retarget_lock_release_recursive>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	065b      	lsls	r3, r3, #25
 80086e2:	f53f af1f 	bmi.w	8008524 <_vfiprintf_r+0x44>
 80086e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e8:	e71e      	b.n	8008528 <_vfiprintf_r+0x48>
 80086ea:	ab03      	add	r3, sp, #12
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	462a      	mov	r2, r5
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <_vfiprintf_r+0x228>)
 80086f2:	a904      	add	r1, sp, #16
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7fd fe59 	bl	80063ac <_printf_i>
 80086fa:	e7e4      	b.n	80086c6 <_vfiprintf_r+0x1e6>
 80086fc:	08009460 	.word	0x08009460
 8008700:	0800946a 	.word	0x0800946a
 8008704:	08005e7d 	.word	0x08005e7d
 8008708:	080084bd 	.word	0x080084bd
 800870c:	08009466 	.word	0x08009466

08008710 <__swbuf_r>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	460e      	mov	r6, r1
 8008714:	4614      	mov	r4, r2
 8008716:	4605      	mov	r5, r0
 8008718:	b118      	cbz	r0, 8008722 <__swbuf_r+0x12>
 800871a:	6a03      	ldr	r3, [r0, #32]
 800871c:	b90b      	cbnz	r3, 8008722 <__swbuf_r+0x12>
 800871e:	f7fd fff1 	bl	8006704 <__sinit>
 8008722:	69a3      	ldr	r3, [r4, #24]
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	071a      	lsls	r2, r3, #28
 800872a:	d501      	bpl.n	8008730 <__swbuf_r+0x20>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	b943      	cbnz	r3, 8008742 <__swbuf_r+0x32>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f82a 	bl	800878c <__swsetup_r>
 8008738:	b118      	cbz	r0, 8008742 <__swbuf_r+0x32>
 800873a:	f04f 37ff 	mov.w	r7, #4294967295
 800873e:	4638      	mov	r0, r7
 8008740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	1a98      	subs	r0, r3, r2
 8008748:	6963      	ldr	r3, [r4, #20]
 800874a:	b2f6      	uxtb	r6, r6
 800874c:	4283      	cmp	r3, r0
 800874e:	4637      	mov	r7, r6
 8008750:	dc05      	bgt.n	800875e <__swbuf_r+0x4e>
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f7ff fdc1 	bl	80082dc <_fflush_r>
 800875a:	2800      	cmp	r0, #0
 800875c:	d1ed      	bne.n	800873a <__swbuf_r+0x2a>
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	3b01      	subs	r3, #1
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	701e      	strb	r6, [r3, #0]
 800876c:	6962      	ldr	r2, [r4, #20]
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	429a      	cmp	r2, r3
 8008772:	d004      	beq.n	800877e <__swbuf_r+0x6e>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	07db      	lsls	r3, r3, #31
 8008778:	d5e1      	bpl.n	800873e <__swbuf_r+0x2e>
 800877a:	2e0a      	cmp	r6, #10
 800877c:	d1df      	bne.n	800873e <__swbuf_r+0x2e>
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff fdab 	bl	80082dc <_fflush_r>
 8008786:	2800      	cmp	r0, #0
 8008788:	d0d9      	beq.n	800873e <__swbuf_r+0x2e>
 800878a:	e7d6      	b.n	800873a <__swbuf_r+0x2a>

0800878c <__swsetup_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4b29      	ldr	r3, [pc, #164]	@ (8008834 <__swsetup_r+0xa8>)
 8008790:	4605      	mov	r5, r0
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	460c      	mov	r4, r1
 8008796:	b118      	cbz	r0, 80087a0 <__swsetup_r+0x14>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <__swsetup_r+0x14>
 800879c:	f7fd ffb2 	bl	8006704 <__sinit>
 80087a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a4:	0719      	lsls	r1, r3, #28
 80087a6:	d422      	bmi.n	80087ee <__swsetup_r+0x62>
 80087a8:	06da      	lsls	r2, r3, #27
 80087aa:	d407      	bmi.n	80087bc <__swsetup_r+0x30>
 80087ac:	2209      	movs	r2, #9
 80087ae:	602a      	str	r2, [r5, #0]
 80087b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	e033      	b.n	8008824 <__swsetup_r+0x98>
 80087bc:	0758      	lsls	r0, r3, #29
 80087be:	d512      	bpl.n	80087e6 <__swsetup_r+0x5a>
 80087c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087c2:	b141      	cbz	r1, 80087d6 <__swsetup_r+0x4a>
 80087c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <__swsetup_r+0x46>
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7fe ff27 	bl	8007620 <_free_r>
 80087d2:	2300      	movs	r3, #0
 80087d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	2300      	movs	r3, #0
 80087e0:	6063      	str	r3, [r4, #4]
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f043 0308 	orr.w	r3, r3, #8
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	b94b      	cbnz	r3, 8008806 <__swsetup_r+0x7a>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087fc:	d003      	beq.n	8008806 <__swsetup_r+0x7a>
 80087fe:	4621      	mov	r1, r4
 8008800:	4628      	mov	r0, r5
 8008802:	f000 f883 	bl	800890c <__smakebuf_r>
 8008806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880a:	f013 0201 	ands.w	r2, r3, #1
 800880e:	d00a      	beq.n	8008826 <__swsetup_r+0x9a>
 8008810:	2200      	movs	r2, #0
 8008812:	60a2      	str	r2, [r4, #8]
 8008814:	6962      	ldr	r2, [r4, #20]
 8008816:	4252      	negs	r2, r2
 8008818:	61a2      	str	r2, [r4, #24]
 800881a:	6922      	ldr	r2, [r4, #16]
 800881c:	b942      	cbnz	r2, 8008830 <__swsetup_r+0xa4>
 800881e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008822:	d1c5      	bne.n	80087b0 <__swsetup_r+0x24>
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	0799      	lsls	r1, r3, #30
 8008828:	bf58      	it	pl
 800882a:	6962      	ldrpl	r2, [r4, #20]
 800882c:	60a2      	str	r2, [r4, #8]
 800882e:	e7f4      	b.n	800881a <__swsetup_r+0x8e>
 8008830:	2000      	movs	r0, #0
 8008832:	e7f7      	b.n	8008824 <__swsetup_r+0x98>
 8008834:	20000020 	.word	0x20000020

08008838 <_raise_r>:
 8008838:	291f      	cmp	r1, #31
 800883a:	b538      	push	{r3, r4, r5, lr}
 800883c:	4605      	mov	r5, r0
 800883e:	460c      	mov	r4, r1
 8008840:	d904      	bls.n	800884c <_raise_r+0x14>
 8008842:	2316      	movs	r3, #22
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	f04f 30ff 	mov.w	r0, #4294967295
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800884e:	b112      	cbz	r2, 8008856 <_raise_r+0x1e>
 8008850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008854:	b94b      	cbnz	r3, 800886a <_raise_r+0x32>
 8008856:	4628      	mov	r0, r5
 8008858:	f000 f830 	bl	80088bc <_getpid_r>
 800885c:	4622      	mov	r2, r4
 800885e:	4601      	mov	r1, r0
 8008860:	4628      	mov	r0, r5
 8008862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008866:	f000 b817 	b.w	8008898 <_kill_r>
 800886a:	2b01      	cmp	r3, #1
 800886c:	d00a      	beq.n	8008884 <_raise_r+0x4c>
 800886e:	1c59      	adds	r1, r3, #1
 8008870:	d103      	bne.n	800887a <_raise_r+0x42>
 8008872:	2316      	movs	r3, #22
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	2001      	movs	r0, #1
 8008878:	e7e7      	b.n	800884a <_raise_r+0x12>
 800887a:	2100      	movs	r1, #0
 800887c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008880:	4620      	mov	r0, r4
 8008882:	4798      	blx	r3
 8008884:	2000      	movs	r0, #0
 8008886:	e7e0      	b.n	800884a <_raise_r+0x12>

08008888 <raise>:
 8008888:	4b02      	ldr	r3, [pc, #8]	@ (8008894 <raise+0xc>)
 800888a:	4601      	mov	r1, r0
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	f7ff bfd3 	b.w	8008838 <_raise_r>
 8008892:	bf00      	nop
 8008894:	20000020 	.word	0x20000020

08008898 <_kill_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d07      	ldr	r5, [pc, #28]	@ (80088b8 <_kill_r+0x20>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	f7f9 faff 	bl	8001ea8 <_kill>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	d102      	bne.n	80088b4 <_kill_r+0x1c>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b103      	cbz	r3, 80088b4 <_kill_r+0x1c>
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	bd38      	pop	{r3, r4, r5, pc}
 80088b6:	bf00      	nop
 80088b8:	20000a58 	.word	0x20000a58

080088bc <_getpid_r>:
 80088bc:	f7f9 baec 	b.w	8001e98 <_getpid>

080088c0 <__swhatbuf_r>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	460c      	mov	r4, r1
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	2900      	cmp	r1, #0
 80088ca:	b096      	sub	sp, #88	@ 0x58
 80088cc:	4615      	mov	r5, r2
 80088ce:	461e      	mov	r6, r3
 80088d0:	da0d      	bge.n	80088ee <__swhatbuf_r+0x2e>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088d8:	f04f 0100 	mov.w	r1, #0
 80088dc:	bf14      	ite	ne
 80088de:	2340      	movne	r3, #64	@ 0x40
 80088e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088e4:	2000      	movs	r0, #0
 80088e6:	6031      	str	r1, [r6, #0]
 80088e8:	602b      	str	r3, [r5, #0]
 80088ea:	b016      	add	sp, #88	@ 0x58
 80088ec:	bd70      	pop	{r4, r5, r6, pc}
 80088ee:	466a      	mov	r2, sp
 80088f0:	f000 f848 	bl	8008984 <_fstat_r>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	dbec      	blt.n	80088d2 <__swhatbuf_r+0x12>
 80088f8:	9901      	ldr	r1, [sp, #4]
 80088fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008902:	4259      	negs	r1, r3
 8008904:	4159      	adcs	r1, r3
 8008906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800890a:	e7eb      	b.n	80088e4 <__swhatbuf_r+0x24>

0800890c <__smakebuf_r>:
 800890c:	898b      	ldrh	r3, [r1, #12]
 800890e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008910:	079d      	lsls	r5, r3, #30
 8008912:	4606      	mov	r6, r0
 8008914:	460c      	mov	r4, r1
 8008916:	d507      	bpl.n	8008928 <__smakebuf_r+0x1c>
 8008918:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	2301      	movs	r3, #1
 8008922:	6163      	str	r3, [r4, #20]
 8008924:	b003      	add	sp, #12
 8008926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008928:	ab01      	add	r3, sp, #4
 800892a:	466a      	mov	r2, sp
 800892c:	f7ff ffc8 	bl	80088c0 <__swhatbuf_r>
 8008930:	9f00      	ldr	r7, [sp, #0]
 8008932:	4605      	mov	r5, r0
 8008934:	4639      	mov	r1, r7
 8008936:	4630      	mov	r0, r6
 8008938:	f7fe fee6 	bl	8007708 <_malloc_r>
 800893c:	b948      	cbnz	r0, 8008952 <__smakebuf_r+0x46>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	059a      	lsls	r2, r3, #22
 8008944:	d4ee      	bmi.n	8008924 <__smakebuf_r+0x18>
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	f043 0302 	orr.w	r3, r3, #2
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	e7e2      	b.n	8008918 <__smakebuf_r+0xc>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	6020      	str	r0, [r4, #0]
 8008956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	9b01      	ldr	r3, [sp, #4]
 800895e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008962:	b15b      	cbz	r3, 800897c <__smakebuf_r+0x70>
 8008964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008968:	4630      	mov	r0, r6
 800896a:	f000 f81d 	bl	80089a8 <_isatty_r>
 800896e:	b128      	cbz	r0, 800897c <__smakebuf_r+0x70>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	431d      	orrs	r5, r3
 8008980:	81a5      	strh	r5, [r4, #12]
 8008982:	e7cf      	b.n	8008924 <__smakebuf_r+0x18>

08008984 <_fstat_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d07      	ldr	r5, [pc, #28]	@ (80089a4 <_fstat_r+0x20>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	4611      	mov	r1, r2
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	f7f9 fae9 	bl	8001f68 <_fstat>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d102      	bne.n	80089a0 <_fstat_r+0x1c>
 800899a:	682b      	ldr	r3, [r5, #0]
 800899c:	b103      	cbz	r3, 80089a0 <_fstat_r+0x1c>
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	bf00      	nop
 80089a4:	20000a58 	.word	0x20000a58

080089a8 <_isatty_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	@ (80089c4 <_isatty_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f9 fae8 	bl	8001f88 <_isatty>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_isatty_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_isatty_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20000a58 	.word	0x20000a58

080089c8 <_init>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr

080089d4 <_fini>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	bf00      	nop
 80089d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089da:	bc08      	pop	{r3}
 80089dc:	469e      	mov	lr, r3
 80089de:	4770      	bx	lr
