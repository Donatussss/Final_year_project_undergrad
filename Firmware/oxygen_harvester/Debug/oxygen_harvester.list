
oxygen_harvester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  08008b88  08008b88  00009b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009720  08009720  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009720  08009720  0000a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009728  08009728  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009728  08009728  0000a728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009730  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  200001dc  0800990c  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800990c  0000bac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a6  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4f  00000000  00000000  0001bab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b83  00000000  00000000  0001f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019434  00000000  00000000  0001ff73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dae  00000000  00000000  000393a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f21  00000000  00000000  0004d155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  000e60bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000eaf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b70 	.word	0x08008b70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008b70 	.word	0x08008b70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <check_buf>:
uint32_t gasPressureBitBuffer[1];
GAS_t gas1;
char oled_buf2[200];

int check_buf(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
	for (int i = 0; i < GASRXBUFSIZE; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e019      	b.n	8000f88 <check_buf+0x40>
	{
		if ((gasRxBuffer[i] == 0x16) && (gasRxBuffer[i + 1] == 0x09) && (gasRxBuffer[i + 2] == 0x01))
 8000f54:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <check_buf+0x58>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b16      	cmp	r3, #22
 8000f5e:	d10d      	bne.n	8000f7c <check_buf+0x34>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <check_buf+0x58>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d107      	bne.n	8000f7c <check_buf+0x34>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <check_buf+0x58>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <check_buf+0x34>
			return 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e00b      	b.n	8000f94 <check_buf+0x4c>
		if (i > 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dc06      	bgt.n	8000f90 <check_buf+0x48>
	for (int i = 0; i < GASRXBUFSIZE; i++)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b0b      	cmp	r3, #11
 8000f8c:	dde2      	ble.n	8000f54 <check_buf+0xc>
 8000f8e:	e000      	b.n	8000f92 <check_buf+0x4a>
			break;
 8000f90:	bf00      	nop
	}

	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	20000200 	.word	0x20000200

08000fa4 <get_oxygen_params>:


void get_oxygen_params(void)
{
 8000fa4:	b598      	push	{r3, r4, r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	gas_counter = 0;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <get_oxygen_params+0xb0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
	gas_counter2 = 3;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	601a      	str	r2, [r3, #0]

	if (check_buf())
 8000fb4:	f7ff ffc8 	bl	8000f48 <check_buf>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d041      	beq.n	8001042 <get_oxygen_params+0x9e>
	{
		while (gas_counter < 3)
 8000fbe:	e02e      	b.n	800101e <get_oxygen_params+0x7a>
		{
			gas1.gas_params[gas_counter] = (gasRxBuffer[gas_counter2 + gas_counter] * 256 + gasRxBuffer[(++gas_counter2) + gas_counter])/10.0;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <get_oxygen_params+0xb0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a24      	ldr	r2, [pc, #144]	@ (800105c <get_oxygen_params+0xb8>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	3201      	adds	r2, #1
 8000fd6:	4920      	ldr	r1, [pc, #128]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fd8:	600a      	str	r2, [r1, #0]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fdc:	6811      	ldr	r1, [r2, #0]
 8000fde:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <get_oxygen_params+0xb0>)
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	440a      	add	r2, r1
 8000fe4:	491d      	ldr	r1, [pc, #116]	@ (800105c <get_oxygen_params+0xb8>)
 8000fe6:	5c8a      	ldrb	r2, [r1, r2]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff faa2 	bl	8000534 <__aeabi_i2d>
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <get_oxygen_params+0xbc>)
 8000ff6:	f7ff fc31 	bl	800085c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4915      	ldr	r1, [pc, #84]	@ (8001054 <get_oxygen_params+0xb0>)
 8001000:	680c      	ldr	r4, [r1, #0]
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fdd7 	bl	8000bb8 <__aeabi_d2f>
 800100a:	4602      	mov	r2, r0
 800100c:	4915      	ldr	r1, [pc, #84]	@ (8001064 <get_oxygen_params+0xc0>)
 800100e:	00a3      	lsls	r3, r4, #2
 8001010:	440b      	add	r3, r1
 8001012:	601a      	str	r2, [r3, #0]
			gas_counter++;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <get_oxygen_params+0xb0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <get_oxygen_params+0xb0>)
 800101c:	6013      	str	r3, [r2, #0]
		while (gas_counter < 3)
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <get_oxygen_params+0xb0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	ddcc      	ble.n	8000fc0 <get_oxygen_params+0x1c>
 8001026:	e010      	b.n	800104a <get_oxygen_params+0xa6>

	else
	{
		while (gas_counter < 3)
		{
			gas1.gas_params[gas_counter] = 0;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <get_oxygen_params+0xb0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <get_oxygen_params+0xc0>)
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
			gas_counter++;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <get_oxygen_params+0xb0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <get_oxygen_params+0xb0>)
 8001040:	6013      	str	r3, [r2, #0]
		while (gas_counter < 3)
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <get_oxygen_params+0xb0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b02      	cmp	r3, #2
 8001048:	ddee      	ble.n	8001028 <get_oxygen_params+0x84>
		}
	}
	gas_bit_to_bar();
 800104a:	f000 f80d 	bl	8001068 <gas_bit_to_bar>
}
 800104e:	bf00      	nop
 8001050:	bd98      	pop	{r3, r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	200001f8 	.word	0x200001f8
 8001058:	200001fc 	.word	0x200001fc
 800105c:	20000200 	.word	0x20000200
 8001060:	40240000 	.word	0x40240000
 8001064:	20000210 	.word	0x20000210

08001068 <gas_bit_to_bar>:


void gas_bit_to_bar(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	 * adc int to voltage -> voltage = int * 3.3/4096
	 * Using a resistance r:
	 * 	0bar is 4ma*r -> 4ma * 150R = 0.6V
	 * 	16bar is 20ma*r -> 20ma * 150R = 3V
	 */
	HAL_ADC_Start(&hadc1);
 800106c:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <gas_bit_to_bar+0x68>)
 800106e:	f001 fa63 	bl	8002538 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001072:	210a      	movs	r1, #10
 8001074:	4816      	ldr	r0, [pc, #88]	@ (80010d0 <gas_bit_to_bar+0x68>)
 8001076:	f001 fb13 	bl	80026a0 <HAL_ADC_PollForConversion>
	*gasPressureBitBuffer = HAL_ADC_GetValue(&hadc1);
 800107a:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <gas_bit_to_bar+0x68>)
 800107c:	f001 fb9b 	bl	80027b6 <HAL_ADC_GetValue>
 8001080:	4603      	mov	r3, r0
 8001082:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <gas_bit_to_bar+0x6c>)
 8001084:	6013      	str	r3, [r2, #0]
	gas1.gas_pressure = ((*gasPressureBitBuffer) * (3.3 / 4096.0)) / (PRESSURE_R_DROP / 3.0);
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <gas_bit_to_bar+0x6c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa42 	bl	8000514 <__aeabi_ui2d>
 8001090:	a30d      	add	r3, pc, #52	@ (adr r3, 80010c8 <gas_bit_to_bar+0x60>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fab7 	bl	8000608 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <gas_bit_to_bar+0x70>)
 80010a8:	f7ff fbd8 	bl	800085c <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fd80 	bl	8000bb8 <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <gas_bit_to_bar+0x74>)
 80010bc:	60d3      	str	r3, [r2, #12]
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	66666666 	.word	0x66666666
 80010cc:	3f4a6666 	.word	0x3f4a6666
 80010d0:	200002e8 	.word	0x200002e8
 80010d4:	2000020c 	.word	0x2000020c
 80010d8:	40490000 	.word	0x40490000
 80010dc:	20000210 	.word	0x20000210

080010e0 <power_electrodes>:

void power_electrodes(int power_direction, int *electrode_power_status)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Electrode1_Output_GPIO_Port, Electrode1_Output_Pin, power_direction);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <power_electrodes+0x48>)
 80010f6:	f002 fc49 	bl	800398c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Electrode2_Output_GPIO_Port, Electrode2_Output_Pin, power_direction);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <power_electrodes+0x48>)
 8001106:	f002 fc41 	bl	800398c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(Electrode3_Output_GPIO_Port, Electrode3_Output_Pin, power_direction);
	HAL_GPIO_WritePin(Electrode4_Output_GPIO_Port, Electrode4_Output_Pin, power_direction);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	2110      	movs	r1, #16
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <power_electrodes+0x4c>)
 8001114:	f002 fc3a 	bl	800398c <HAL_GPIO_WritePin>
	*electrode_power_status = 1;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400

08001130 <manage_chambers>:

void manage_chambers(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	if (gas1.gas_pressure >= PRESSURE_THRESH && *electrode_power_status)
 8001134:	4b36      	ldr	r3, [pc, #216]	@ (8001210 <manage_chambers+0xe0>)
 8001136:	edd3 7a03 	vldr	s15, [r3, #12]
 800113a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800113e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	db0e      	blt.n	8001166 <manage_chambers+0x36>
 8001148:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <manage_chambers+0xe4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d009      	beq.n	8001166 <manage_chambers+0x36>
	{
		// stop operation as gas is full in reservoir
		display_message_overwrite("Pressure limit reached");
 8001152:	4831      	ldr	r0, [pc, #196]	@ (8001218 <manage_chambers+0xe8>)
 8001154:	f000 fd7a 	bl	8001c4c <display_message_overwrite>
		power_electrodes(0, electrode_power_status);
 8001158:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <manage_chambers+0xe4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff ffbe 	bl	80010e0 <power_electrodes>
		return;
 8001164:	e053      	b.n	800120e <manage_chambers+0xde>
	}

	if (gas1.gas_concentration < CONCENTRATION_THRESH && *electrode_power_status)
 8001166:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <manage_chambers+0xe0>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d50e      	bpl.n	8001198 <manage_chambers+0x68>
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <manage_chambers+0xe4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <manage_chambers+0x68>
	{
		// possible leakage
		display_message_overwrite("Possible GAS leakage");
 8001184:	4825      	ldr	r0, [pc, #148]	@ (800121c <manage_chambers+0xec>)
 8001186:	f000 fd61 	bl	8001c4c <display_message_overwrite>
		power_electrodes(0, electrode_power_status);
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <manage_chambers+0xe4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ffa5 	bl	80010e0 <power_electrodes>
		return;
 8001196:	e03a      	b.n	800120e <manage_chambers+0xde>
	}

	if (gas1.gas_temperature >= TEMPERATURE_THRESH && *electrode_power_status)
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <manage_chambers+0xe0>)
 800119a:	edd3 7a02 	vldr	s15, [r3, #8]
 800119e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001220 <manage_chambers+0xf0>
 80011a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	db0e      	blt.n	80011ca <manage_chambers+0x9a>
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <manage_chambers+0xe4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <manage_chambers+0x9a>
	{
		// possible overheating
		display_message_overwrite("Possible Overheating");
 80011b6:	481b      	ldr	r0, [pc, #108]	@ (8001224 <manage_chambers+0xf4>)
 80011b8:	f000 fd48 	bl	8001c4c <display_message_overwrite>
		power_electrodes(0, electrode_power_status);
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <manage_chambers+0xe4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff ff8c 	bl	80010e0 <power_electrodes>
		return;
 80011c8:	e021      	b.n	800120e <manage_chambers+0xde>
	}

	if (gas1.gas_pressure < PRESSURE_THRESH &&
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <manage_chambers+0xe0>)
 80011cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80011d0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80011d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d517      	bpl.n	800120e <manage_chambers+0xde>
			gas1.gas_temperature < TEMPERATURE_THRESH &&
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <manage_chambers+0xe0>)
 80011e0:	edd3 7a02 	vldr	s15, [r3, #8]
	if (gas1.gas_pressure < PRESSURE_THRESH &&
 80011e4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001220 <manage_chambers+0xf0>
 80011e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d50d      	bpl.n	800120e <manage_chambers+0xde>
			!(*electrode_power_status))
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <manage_chambers+0xe4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
			gas1.gas_temperature < TEMPERATURE_THRESH &&
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d108      	bne.n	800120e <manage_chambers+0xde>
	{
		// gas parameters within threshold
		display_message_overwrite("Powering Electrodes");
 80011fc:	480a      	ldr	r0, [pc, #40]	@ (8001228 <manage_chambers+0xf8>)
 80011fe:	f000 fd25 	bl	8001c4c <display_message_overwrite>
		power_electrodes(1, electrode_power_status);
 8001202:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <manage_chambers+0xe4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ff69 	bl	80010e0 <power_electrodes>
	}

}
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000210 	.word	0x20000210
 8001214:	2000096c 	.word	0x2000096c
 8001218:	08008b88 	.word	0x08008b88
 800121c:	08008ba0 	.word	0x08008ba0
 8001220:	42700000 	.word	0x42700000
 8001224:	08008bb8 	.word	0x08008bb8
 8001228:	08008bd0 	.word	0x08008bd0

0800122c <display_gas_parameters>:

void display_gas_parameters(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001230:	2000      	movs	r0, #0
 8001232:	f000 fb6d 	bl	8001910 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f000 fcbd 	bl	8001bb8 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 800123e:	22c8      	movs	r2, #200	@ 0xc8
 8001240:	2100      	movs	r1, #0
 8001242:	4833      	ldr	r0, [pc, #204]	@ (8001310 <display_gas_parameters+0xe4>)
 8001244:	f005 fbe5 	bl	8006a12 <memset>
	sprintf(oled_buf2, "P: %.4fbar", gas1.gas_pressure);
 8001248:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <display_gas_parameters+0xe8>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f983 	bl	8000558 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4930      	ldr	r1, [pc, #192]	@ (8001318 <display_gas_parameters+0xec>)
 8001258:	482d      	ldr	r0, [pc, #180]	@ (8001310 <display_gas_parameters+0xe4>)
 800125a:	f005 fb5d 	bl	8006918 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 800125e:	4a2f      	ldr	r2, [pc, #188]	@ (800131c <display_gas_parameters+0xf0>)
 8001260:	2301      	movs	r3, #1
 8001262:	ca06      	ldmia	r2, {r1, r2}
 8001264:	482a      	ldr	r0, [pc, #168]	@ (8001310 <display_gas_parameters+0xe4>)
 8001266:	f000 fc81 	bl	8001b6c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 10);
 800126a:	210a      	movs	r1, #10
 800126c:	2000      	movs	r0, #0
 800126e:	f000 fca3 	bl	8001bb8 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 8001272:	22c8      	movs	r2, #200	@ 0xc8
 8001274:	2100      	movs	r1, #0
 8001276:	4826      	ldr	r0, [pc, #152]	@ (8001310 <display_gas_parameters+0xe4>)
 8001278:	f005 fbcb 	bl	8006a12 <memset>
	sprintf(oled_buf2, "Conc: %.2f%%", gas1.gas_concentration);
 800127c:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <display_gas_parameters+0xe8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f969 	bl	8000558 <__aeabi_f2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4925      	ldr	r1, [pc, #148]	@ (8001320 <display_gas_parameters+0xf4>)
 800128c:	4820      	ldr	r0, [pc, #128]	@ (8001310 <display_gas_parameters+0xe4>)
 800128e:	f005 fb43 	bl	8006918 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 8001292:	4a22      	ldr	r2, [pc, #136]	@ (800131c <display_gas_parameters+0xf0>)
 8001294:	2301      	movs	r3, #1
 8001296:	ca06      	ldmia	r2, {r1, r2}
 8001298:	481d      	ldr	r0, [pc, #116]	@ (8001310 <display_gas_parameters+0xe4>)
 800129a:	f000 fc67 	bl	8001b6c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 800129e:	2114      	movs	r1, #20
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 fc89 	bl	8001bb8 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 80012a6:	22c8      	movs	r2, #200	@ 0xc8
 80012a8:	2100      	movs	r1, #0
 80012aa:	4819      	ldr	r0, [pc, #100]	@ (8001310 <display_gas_parameters+0xe4>)
 80012ac:	f005 fbb1 	bl	8006a12 <memset>
	sprintf(oled_buf2, "Flow: %.2fL/min", gas1.gas_flowrate);
 80012b0:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <display_gas_parameters+0xe8>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f94f 	bl	8000558 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4919      	ldr	r1, [pc, #100]	@ (8001324 <display_gas_parameters+0xf8>)
 80012c0:	4813      	ldr	r0, [pc, #76]	@ (8001310 <display_gas_parameters+0xe4>)
 80012c2:	f005 fb29 	bl	8006918 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 80012c6:	4a15      	ldr	r2, [pc, #84]	@ (800131c <display_gas_parameters+0xf0>)
 80012c8:	2301      	movs	r3, #1
 80012ca:	ca06      	ldmia	r2, {r1, r2}
 80012cc:	4810      	ldr	r0, [pc, #64]	@ (8001310 <display_gas_parameters+0xe4>)
 80012ce:	f000 fc4d 	bl	8001b6c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 80012d2:	211e      	movs	r1, #30
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 fc6f 	bl	8001bb8 <ssd1306_SetCursor>
	memset(oled_buf2, 0, sizeof(oled_buf2));
 80012da:	22c8      	movs	r2, #200	@ 0xc8
 80012dc:	2100      	movs	r1, #0
 80012de:	480c      	ldr	r0, [pc, #48]	@ (8001310 <display_gas_parameters+0xe4>)
 80012e0:	f005 fb97 	bl	8006a12 <memset>
	sprintf(oled_buf2, "Temp: %.2fdegC", gas1.gas_temperature);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <display_gas_parameters+0xe8>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	490d      	ldr	r1, [pc, #52]	@ (8001328 <display_gas_parameters+0xfc>)
 80012f4:	4806      	ldr	r0, [pc, #24]	@ (8001310 <display_gas_parameters+0xe4>)
 80012f6:	f005 fb0f 	bl	8006918 <siprintf>
	ssd1306_WriteString(oled_buf2, Font_7x10, White);
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <display_gas_parameters+0xf0>)
 80012fc:	2301      	movs	r3, #1
 80012fe:	ca06      	ldmia	r2, {r1, r2}
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <display_gas_parameters+0xe4>)
 8001302:	f000 fc33 	bl	8001b6c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001306:	f000 fb1b 	bl	8001940 <ssd1306_UpdateScreen>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000220 	.word	0x20000220
 8001314:	20000210 	.word	0x20000210
 8001318:	08008be4 	.word	0x08008be4
 800131c:	20000000 	.word	0x20000000
 8001320:	08008bf0 	.word	0x08008bf0
 8001324:	08008c00 	.word	0x08008c00
 8001328:	08008c10 	.word	0x08008c10

0800132c <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* GAS CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x34>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10c      	bne.n	8001358 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_DMA(huart, gasRxBuffer, GASRXBUFSIZE);
 800133e:	220c      	movs	r2, #12
 8001340:	4908      	ldr	r1, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x38>)
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f003 fd1b 	bl	8004d7e <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_UART_RxCpltCallback+0x3c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_UART_RxCpltCallback+0x3c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0208 	bic.w	r2, r2, #8
 8001356:	601a      	str	r2, [r3, #0]
	}
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40004400 	.word	0x40004400
 8001364:	20000200 	.word	0x20000200
 8001368:	20000424 	.word	0x20000424

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001370:	f001 f808 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001374:	f000 f83a 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001378:	f000 f99c 	bl	80016b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800137c:	f000 f97a 	bl	8001674 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001380:	f000 f94e 	bl	8001620 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001384:	f000 f89a 	bl	80014bc <MX_ADC1_Init>
  MX_I2C2_Init();
 8001388:	f000 f8ea 	bl	8001560 <MX_I2C2_Init>
  MX_SPI1_Init();
 800138c:	f000 f916 	bl	80015bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1500);
 8001390:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001394:	f001 f868 	bl	8002468 <HAL_Delay>
	ssd1306_Init();
 8001398:	f000 fa50 	bl	800183c <ssd1306_Init>
	/* GAS CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, gasRxBuffer, GASRXBUFSIZE);
 800139c:	220c      	movs	r2, #12
 800139e:	490f      	ldr	r1, [pc, #60]	@ (80013dc <main+0x70>)
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <main+0x74>)
 80013a2:	f003 fcec 	bl	8004d7e <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <main+0x78>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <main+0x78>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0208 	bic.w	r2, r2, #8
 80013b4:	601a      	str	r2, [r3, #0]
	/* GAS CODE END 2 */
	/* WATER CODE BEGIN 2 */
//	waterInitialization();
	power_electrodes(1, electrode_power_status);
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <main+0x7c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fe8f 	bl	80010e0 <power_electrodes>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/* GAS CODE BEGIN WHILE */
		waterManagement();
 80013c2:	f000 ff1d 	bl	8002200 <waterManagement>
		get_oxygen_params();
 80013c6:	f7ff fded 	bl	8000fa4 <get_oxygen_params>
		manage_chambers();
 80013ca:	f7ff feb1 	bl	8001130 <manage_chambers>
		display_gas_parameters();
 80013ce:	f7ff ff2d 	bl	800122c <display_gas_parameters>
		HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	@ 0x64
 80013d4:	f001 f848 	bl	8002468 <HAL_Delay>
		waterManagement();
 80013d8:	bf00      	nop
 80013da:	e7f2      	b.n	80013c2 <main+0x56>
 80013dc:	20000200 	.word	0x20000200
 80013e0:	200003dc 	.word	0x200003dc
 80013e4:	20000424 	.word	0x20000424
 80013e8:	2000096c 	.word	0x2000096c

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	@ 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	@ 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fb09 	bl	8006a12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <SystemClock_Config+0xc8>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a26      	ldr	r2, [pc, #152]	@ (80014b4 <SystemClock_Config+0xc8>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <SystemClock_Config+0xc8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <SystemClock_Config+0xcc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <SystemClock_Config+0xcc>)
 8001436:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <SystemClock_Config+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800145c:	2319      	movs	r3, #25
 800145e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001460:	23c0      	movs	r3, #192	@ 0xc0
 8001462:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f002 ff53 	bl	800431c <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800147c:	f000 f99e 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001480:	230f      	movs	r3, #15
 8001482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001484:	2302      	movs	r3, #2
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	2103      	movs	r1, #3
 800149c:	4618      	mov	r0, r3
 800149e:	f003 f9b5 	bl	800480c <HAL_RCC_ClockConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014a8:	f000 f988 	bl	80017bc <Error_Handler>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3750      	adds	r7, #80	@ 0x50
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000

080014bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <MX_ADC1_Init+0x9c>)
 80014d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fc:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_ADC1_Init+0x98>)
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <MX_ADC1_Init+0xa0>)
 8001500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_ADC1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <MX_ADC1_Init+0x98>)
 800150a:	2201      	movs	r2, #1
 800150c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_ADC1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_ADC1_Init+0x98>)
 8001518:	2201      	movs	r2, #1
 800151a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151c:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_ADC1_Init+0x98>)
 800151e:	f000 ffc7 	bl	80024b0 <HAL_ADC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001528:	f000 f948 	bl	80017bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800152c:	2309      	movs	r3, #9
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_ADC1_Init+0x98>)
 800153e:	f001 f947 	bl	80027d0 <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001548:	f000 f938 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200002e8 	.word	0x200002e8
 8001558:	40012000 	.word	0x40012000
 800155c:	0f000001 	.word	0x0f000001

08001560 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2C2_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <MX_I2C2_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_I2C2_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_I2C2_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_I2C2_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2C2_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_I2C2_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_I2C2_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2C2_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_I2C2_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2C2_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_I2C2_Init+0x50>)
 800159e:	f002 fa0f 	bl	80039c0 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f000 f908 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000330 	.word	0x20000330
 80015b4:	40005800 	.word	0x40005800
 80015b8:	00061a80 	.word	0x00061a80

080015bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015c2:	4a16      	ldr	r2, [pc, #88]	@ (800161c <MX_SPI1_Init+0x60>)
 80015c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_SPI1_Init+0x5c>)
 80015fe:	220a      	movs	r2, #10
 8001600:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_SPI1_Init+0x5c>)
 8001604:	f003 fae2 	bl	8004bcc <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800160e:	f000 f8d5 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000384 	.word	0x20000384
 800161c:	40013000 	.word	0x40013000

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <MX_USART2_UART_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 800162c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_USART2_UART_Init+0x4c>)
 8001658:	f003 fb41 	bl	8004cde <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001662:	f000 f8ab 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200003dc 	.word	0x200003dc
 8001670:	40004400 	.word	0x40004400

08001674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_DMA_Init+0x3c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <MX_DMA_Init+0x3c>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_DMA_Init+0x3c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2010      	movs	r0, #16
 800169c:	f001 fba1 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016a0:	2010      	movs	r0, #16
 80016a2:	f001 fbba 	bl	8002e1a <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a37      	ldr	r2, [pc, #220]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 80016d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a30      	ldr	r2, [pc, #192]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b2e      	ldr	r3, [pc, #184]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a29      	ldr	r2, [pc, #164]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <MX_GPIO_Init+0xfc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Electrode1_Output_Pin|Electrode2_Output_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001724:	4823      	ldr	r0, [pc, #140]	@ (80017b4 <MX_GPIO_Init+0x100>)
 8001726:	f002 f931 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Electrode3_Output_Pin|Electrode4_Output_Pin|Solenoid1_Output_Pin|Solenoid2_Output_Pin
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8001730:	4821      	ldr	r0, [pc, #132]	@ (80017b8 <MX_GPIO_Init+0x104>)
 8001732:	f002 f92b 	bl	800398c <HAL_GPIO_WritePin>
                          |Solenoid3_Output_Pin|Solenoid4_Output_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Float_Chamber1_min_Pin Float_Chamber1_max_Pin Float_Chamber2_min_Pin Float_Chamber2_max_Pin */
  GPIO_InitStruct.Pin = Float_Chamber1_min_Pin|Float_Chamber1_max_Pin|Float_Chamber2_min_Pin|Float_Chamber2_max_Pin;
 8001736:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	481b      	ldr	r0, [pc, #108]	@ (80017b8 <MX_GPIO_Init+0x104>)
 800174c:	f001 ff82 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : Float_Chamber3_min_Pin Float_Chamber3_max_Pin Float_Chamber4_min_Pin Float_Chamber4_max_Pin */
  GPIO_InitStruct.Pin = Float_Chamber3_min_Pin|Float_Chamber3_max_Pin|Float_Chamber4_min_Pin|Float_Chamber4_max_Pin;
 8001750:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4813      	ldr	r0, [pc, #76]	@ (80017b4 <MX_GPIO_Init+0x100>)
 8001766:	f001 ff75 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : Electrode1_Output_Pin Electrode2_Output_Pin */
  GPIO_InitStruct.Pin = Electrode1_Output_Pin|Electrode2_Output_Pin;
 800176a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800176e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <MX_GPIO_Init+0x100>)
 8001784:	f001 ff66 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : Electrode3_Output_Pin Electrode4_Output_Pin Solenoid1_Output_Pin Solenoid2_Output_Pin
                           Solenoid3_Output_Pin Solenoid4_Output_Pin */
  GPIO_InitStruct.Pin = Electrode3_Output_Pin|Electrode4_Output_Pin|Solenoid1_Output_Pin|Solenoid2_Output_Pin
 8001788:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 800178c:	60fb      	str	r3, [r7, #12]
                          |Solenoid3_Output_Pin|Solenoid4_Output_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_GPIO_Init+0x104>)
 80017a2:	f001 ff57 	bl	8003654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a6:	bf00      	nop
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <Error_Handler+0x8>

080017c8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af04      	add	r7, sp, #16
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2301      	movs	r3, #1
 80017f2:	2200      	movs	r2, #0
 80017f4:	2178      	movs	r1, #120	@ 0x78
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <ssd1306_WriteCommand+0x2c>)
 80017f8:	f002 fa26 	bl	8003c48 <HAL_I2C_Mem_Write>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000330 	.word	0x20000330

08001808 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af04      	add	r7, sp, #16
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	f04f 32ff 	mov.w	r2, #4294967295
 800181a:	9202      	str	r2, [sp, #8]
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	2240      	movs	r2, #64	@ 0x40
 8001826:	2178      	movs	r1, #120	@ 0x78
 8001828:	4803      	ldr	r0, [pc, #12]	@ (8001838 <ssd1306_WriteData+0x30>)
 800182a:	f002 fa0d 	bl	8003c48 <HAL_I2C_Mem_Write>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000330 	.word	0x20000330

0800183c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001840:	f7ff ffc2 	bl	80017c8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001844:	2064      	movs	r0, #100	@ 0x64
 8001846:	f000 fe0f 	bl	8002468 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f9e0 	bl	8001c10 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001850:	2020      	movs	r0, #32
 8001852:	f7ff ffc1 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ffbe 	bl	80017d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800185c:	20b0      	movs	r0, #176	@ 0xb0
 800185e:	f7ff ffbb 	bl	80017d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001862:	20c8      	movs	r0, #200	@ 0xc8
 8001864:	f7ff ffb8 	bl	80017d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff ffb5 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800186e:	2010      	movs	r0, #16
 8001870:	f7ff ffb2 	bl	80017d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001874:	2040      	movs	r0, #64	@ 0x40
 8001876:	f7ff ffaf 	bl	80017d8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800187a:	20ff      	movs	r0, #255	@ 0xff
 800187c:	f000 f9b4 	bl	8001be8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001880:	20a1      	movs	r0, #161	@ 0xa1
 8001882:	f7ff ffa9 	bl	80017d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001886:	20a6      	movs	r0, #166	@ 0xa6
 8001888:	f7ff ffa6 	bl	80017d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800188c:	20a8      	movs	r0, #168	@ 0xa8
 800188e:	f7ff ffa3 	bl	80017d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001892:	203f      	movs	r0, #63	@ 0x3f
 8001894:	f7ff ffa0 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001898:	20a4      	movs	r0, #164	@ 0xa4
 800189a:	f7ff ff9d 	bl	80017d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800189e:	20d3      	movs	r0, #211	@ 0xd3
 80018a0:	f7ff ff9a 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff ff97 	bl	80017d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80018aa:	20d5      	movs	r0, #213	@ 0xd5
 80018ac:	f7ff ff94 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80018b0:	20f0      	movs	r0, #240	@ 0xf0
 80018b2:	f7ff ff91 	bl	80017d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80018b6:	20d9      	movs	r0, #217	@ 0xd9
 80018b8:	f7ff ff8e 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80018bc:	2022      	movs	r0, #34	@ 0x22
 80018be:	f7ff ff8b 	bl	80017d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80018c2:	20da      	movs	r0, #218	@ 0xda
 80018c4:	f7ff ff88 	bl	80017d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80018c8:	2012      	movs	r0, #18
 80018ca:	f7ff ff85 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80018ce:	20db      	movs	r0, #219	@ 0xdb
 80018d0:	f7ff ff82 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80018d4:	2020      	movs	r0, #32
 80018d6:	f7ff ff7f 	bl	80017d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80018da:	208d      	movs	r0, #141	@ 0x8d
 80018dc:	f7ff ff7c 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80018e0:	2014      	movs	r0, #20
 80018e2:	f7ff ff79 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80018e6:	2001      	movs	r0, #1
 80018e8:	f000 f992 	bl	8001c10 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 f80f 	bl	8001910 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80018f2:	f000 f825 	bl	8001940 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80018f6:	4b05      	ldr	r3, [pc, #20]	@ (800190c <ssd1306_Init+0xd0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <ssd1306_Init+0xd0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001902:	4b02      	ldr	r3, [pc, #8]	@ (800190c <ssd1306_Init+0xd0>)
 8001904:	2201      	movs	r2, #1
 8001906:	711a      	strb	r2, [r3, #4]
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000894 	.word	0x20000894

08001910 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <ssd1306_Fill+0x14>
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <ssd1306_Fill+0x16>
 8001924:	23ff      	movs	r3, #255	@ 0xff
 8001926:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 800192a:	4619      	mov	r1, r3
 800192c:	4803      	ldr	r0, [pc, #12]	@ (800193c <ssd1306_Fill+0x2c>)
 800192e:	f005 f870 	bl	8006a12 <memset>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000484 	.word	0x20000484

08001940 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001946:	2300      	movs	r3, #0
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	e01a      	b.n	8001982 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	3b50      	subs	r3, #80	@ 0x50
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff40 	bl	80017d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff ff3d 	bl	80017d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800195e:	2010      	movs	r0, #16
 8001960:	f7ff ff3a 	bl	80017d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_DISP_WIDTH *i],SSD1306_DISP_WIDTH);
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	4613      	mov	r3, r2
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	461a      	mov	r2, r3
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <ssd1306_UpdateScreen+0x54>)
 8001972:	4413      	add	r3, r2
 8001974:	2182      	movs	r1, #130	@ 0x82
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff46 	bl	8001808 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	3301      	adds	r3, #1
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b07      	cmp	r3, #7
 8001986:	d9e1      	bls.n	800194c <ssd1306_UpdateScreen+0xc>
    }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000484 	.word	0x20000484

08001998 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001998:	b490      	push	{r4, r7}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	460b      	mov	r3, r1
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	4613      	mov	r3, r2
 80019a8:	717b      	strb	r3, [r7, #5]
    if((x + SSD1306_X_SC_OFFSET) >= SSD1306_DISP_WIDTH  || y >= SSD1306_HEIGHT) {
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db4d      	blt.n	8001a4e <ssd1306_DrawPixel+0xb6>
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80019b6:	d84a      	bhi.n	8001a4e <ssd1306_DrawPixel+0xb6>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d122      	bne.n	8001a04 <ssd1306_DrawPixel+0x6c>
        SSD1306_Buffer[(x + SSD1306_X_SC_OFFSET) + (y / 8) * SSD1306_DISP_WIDTH ] |= 1 << (y % 8);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	1c9a      	adds	r2, r3, #2
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	b2d8      	uxtb	r0, r3
 80019c8:	4601      	mov	r1, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	440b      	add	r3, r1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	4a20      	ldr	r2, [pc, #128]	@ (8001a58 <ssd1306_DrawPixel+0xc0>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	b25a      	sxtb	r2, r3
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b25c      	sxtb	r4, r3
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	1c9a      	adds	r2, r3, #2
 80019f0:	4601      	mov	r1, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	440b      	add	r3, r1
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	b2e1      	uxtb	r1, r4
 80019fe:	4a16      	ldr	r2, [pc, #88]	@ (8001a58 <ssd1306_DrawPixel+0xc0>)
 8001a00:	54d1      	strb	r1, [r2, r3]
 8001a02:	e025      	b.n	8001a50 <ssd1306_DrawPixel+0xb8>
    } else { 
        SSD1306_Buffer[(x + SSD1306_X_SC_OFFSET) + (y / 8) * SSD1306_DISP_WIDTH ] &= ~(1 << (y % 8));
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	1c9a      	adds	r2, r3, #2
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	b2d8      	uxtb	r0, r3
 8001a0e:	4601      	mov	r1, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	019b      	lsls	r3, r3, #6
 8001a14:	440b      	add	r3, r1
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <ssd1306_DrawPixel+0xc0>)
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	4013      	ands	r3, r2
 8001a34:	b25c      	sxtb	r4, r3
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	1c9a      	adds	r2, r3, #2
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	019b      	lsls	r3, r3, #6
 8001a40:	440b      	add	r3, r1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	b2e1      	uxtb	r1, r4
 8001a48:	4a03      	ldr	r2, [pc, #12]	@ (8001a58 <ssd1306_DrawPixel+0xc0>)
 8001a4a:	54d1      	strb	r1, [r2, r3]
 8001a4c:	e000      	b.n	8001a50 <ssd1306_DrawPixel+0xb8>
        return;
 8001a4e:	bf00      	nop
    }
}
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc90      	pop	{r4, r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000484 	.word	0x20000484

08001a5c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4604      	mov	r4, r0
 8001a64:	1d38      	adds	r0, r7, #4
 8001a66:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	4613      	mov	r3, r2
 8001a72:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b1f      	cmp	r3, #31
 8001a78:	d902      	bls.n	8001a80 <ssd1306_WriteChar+0x24>
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a7e:	d901      	bls.n	8001a84 <ssd1306_WriteChar+0x28>
        return 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e06c      	b.n	8001b5e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001a84:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	793b      	ldrb	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2b80      	cmp	r3, #128	@ 0x80
 8001a90:	dc06      	bgt.n	8001aa0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001a92:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001a94:	885b      	ldrh	r3, [r3, #2]
 8001a96:	461a      	mov	r2, r3
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001a9c:	2b40      	cmp	r3, #64	@ 0x40
 8001a9e:	dd01      	ble.n	8001aa4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e05c      	b.n	8001b5e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	e04c      	b.n	8001b44 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	3b20      	subs	r3, #32
 8001ab0:	7979      	ldrb	r1, [r7, #5]
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	440b      	add	r3, r1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	e034      	b.n	8001b34 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d012      	beq.n	8001b00 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ada:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2d8      	uxtb	r0, r3
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001aea:	885b      	ldrh	r3, [r3, #2]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	7bba      	ldrb	r2, [r7, #14]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff ff4d 	bl	8001998 <ssd1306_DrawPixel>
 8001afe:	e016      	b.n	8001b2e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2d8      	uxtb	r0, r3
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001b10:	885b      	ldrh	r3, [r3, #2]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2d9      	uxtb	r1, r3
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f7ff ff35 	bl	8001998 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	793b      	ldrb	r3, [r7, #4]
 8001b36:	461a      	mov	r2, r3
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d3c5      	bcc.n	8001aca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	797b      	ldrb	r3, [r7, #5]
 8001b46:	461a      	mov	r2, r3
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d3ad      	bcc.n	8001aaa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	793a      	ldrb	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <ssd1306_WriteChar+0x10c>)
 8001b5a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000894 	.word	0x20000894

08001b6c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	1d38      	adds	r0, r7, #4
 8001b76:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b7a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001b7c:	e012      	b.n	8001ba4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	7818      	ldrb	r0, [r3, #0]
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	1d3a      	adds	r2, r7, #4
 8001b86:	ca06      	ldmia	r2, {r1, r2}
 8001b88:	f7ff ff68 	bl	8001a5c <ssd1306_WriteChar>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d002      	beq.n	8001b9e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	e008      	b.n	8001bb0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e8      	bne.n	8001b7e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	781b      	ldrb	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <ssd1306_SetCursor+0x2c>)
 8001bce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <ssd1306_SetCursor+0x2c>)
 8001bd6:	805a      	strh	r2, [r3, #2]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20000894 	.word	0x20000894

08001be8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001bf2:	2381      	movs	r3, #129	@ 0x81
 8001bf4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fded 	bl	80017d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fde9 	bl	80017d8 <ssd1306_WriteCommand>
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c20:	23af      	movs	r3, #175	@ 0xaf
 8001c22:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <ssd1306_SetDisplayOn+0x38>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	715a      	strb	r2, [r3, #5]
 8001c2a:	e004      	b.n	8001c36 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001c2c:	23ae      	movs	r3, #174	@ 0xae
 8001c2e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <ssd1306_SetDisplayOn+0x38>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fdcd 	bl	80017d8 <ssd1306_WriteCommand>
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000894 	.word	0x20000894

08001c4c <display_message_overwrite>:
    ssd1306_WriteString(display1.oled_buf, Font_7x10, White);
    ssd1306_UpdateScreen();
}

void display_message_overwrite(char *message)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fe5b 	bl	8001910 <ssd1306_Fill>
	display1.cur_y = 0;
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <display_message_overwrite+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
	display1.cur_x = 0;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <display_message_overwrite+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	705a      	strb	r2, [r3, #1]
	ssd1306_SetCursor(display1.cur_x, display1.cur_y);
 8001c66:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <display_message_overwrite+0x4c>)
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <display_message_overwrite+0x4c>)
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffa1 	bl	8001bb8 <ssd1306_SetCursor>
	sprintf(display1.oled_buf, "%s", message);
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <display_message_overwrite+0x50>)
 8001c7a:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <display_message_overwrite+0x54>)
 8001c7c:	f004 fe4c 	bl	8006918 <siprintf>
    ssd1306_WriteString(display1.oled_buf, Font_7x10, White);
 8001c80:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <display_message_overwrite+0x58>)
 8001c82:	2301      	movs	r3, #1
 8001c84:	ca06      	ldmia	r2, {r1, r2}
 8001c86:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <display_message_overwrite+0x54>)
 8001c88:	f7ff ff70 	bl	8001b6c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001c8c:	f7ff fe58 	bl	8001940 <ssd1306_UpdateScreen>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000089c 	.word	0x2000089c
 8001c9c:	08008c20 	.word	0x08008c20
 8001ca0:	2000089e 	.word	0x2000089e
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	@ (8001d74 <HAL_ADC_MspInit+0x7c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d127      	bne.n	8001d6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a15      	ldr	r2, [pc, #84]	@ (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Gas_Pressure_Pin;
 8001d52:	2302      	movs	r3, #2
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d56:	2303      	movs	r3, #3
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Gas_Pressure_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <HAL_ADC_MspInit+0x84>)
 8001d66:	f001 fc75 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	@ 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40012000 	.word	0x40012000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020400 	.word	0x40020400

08001d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a22      	ldr	r2, [pc, #136]	@ (8001e28 <HAL_I2C_MspInit+0xa8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d13d      	bne.n	8001e1e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <HAL_I2C_MspInit+0xac>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a20      	ldr	r2, [pc, #128]	@ (8001e2c <HAL_I2C_MspInit+0xac>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <HAL_I2C_MspInit+0xac>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4815      	ldr	r0, [pc, #84]	@ (8001e30 <HAL_I2C_MspInit+0xb0>)
 8001ddc:	f001 fc3a 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001de0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	2312      	movs	r3, #18
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001df2:	2309      	movs	r3, #9
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <HAL_I2C_MspInit+0xb0>)
 8001dfe:	f001 fc29 	bl	8003654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_I2C_MspInit+0xac>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_I2C_MspInit+0xac>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_I2C_MspInit+0xac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005800 	.word	0x40005800
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020400 	.word	0x40020400

08001e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	@ 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_SPI_MspInit+0x84>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12b      	bne.n	8001eae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	4a17      	ldr	r2, [pc, #92]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <HAL_SPI_MspInit+0x88>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e8e:	23f0      	movs	r3, #240	@ 0xf0
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <HAL_SPI_MspInit+0x8c>)
 8001eaa:	f001 fbd3 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	@ 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40013000 	.word	0x40013000
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a34      	ldr	r2, [pc, #208]	@ (8001fb4 <HAL_UART_MspInit+0xf0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d162      	bne.n	8001fac <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b33      	ldr	r3, [pc, #204]	@ (8001fb8 <HAL_UART_MspInit+0xf4>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	4a32      	ldr	r2, [pc, #200]	@ (8001fb8 <HAL_UART_MspInit+0xf4>)
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef6:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_UART_MspInit+0xf4>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb8 <HAL_UART_MspInit+0xf4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_UART_MspInit+0xf4>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <HAL_UART_MspInit+0xf4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f1e:	230c      	movs	r3, #12
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4820      	ldr	r0, [pc, #128]	@ (8001fbc <HAL_UART_MspInit+0xf8>)
 8001f3a:	f001 fb8b 	bl	8003654 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <HAL_UART_MspInit+0x100>)
 8001f42:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f52:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f60:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f66:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f80:	480f      	ldr	r0, [pc, #60]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f82:	f000 ff65 	bl	8002e50 <HAL_DMA_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f8c:	f7ff fc16 	bl	80017bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2026      	movs	r0, #38	@ 0x26
 8001fa2:	f000 ff1e 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fa6:	2026      	movs	r0, #38	@ 0x26
 8001fa8:	f000 ff37 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	@ 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	20000424 	.word	0x20000424
 8001fc4:	40026088 	.word	0x40026088

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <NMI_Handler+0x4>

08001fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <MemManage_Handler+0x4>

08001fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <UsageFault_Handler+0x4>

08001ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201e:	f000 fa03 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <DMA1_Stream5_IRQHandler+0x10>)
 800202e:	f001 f8a7 	bl	8003180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000424 	.word	0x20000424

0800203c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <USART2_IRQHandler+0x10>)
 8002042:	f002 fec1 	bl	8004dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200003dc 	.word	0x200003dc

08002050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_kill>:

int _kill(int pid, int sig)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206a:	f004 fd25 	bl	8006ab8 <__errno>
 800206e:	4603      	mov	r3, r0
 8002070:	2216      	movs	r2, #22
 8002072:	601a      	str	r2, [r3, #0]
  return -1;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_exit>:

void _exit (int status)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ffe7 	bl	8002060 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002092:	bf00      	nop
 8002094:	e7fd      	b.n	8002092 <_exit+0x12>

08002096 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e00a      	b.n	80020be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020a8:	f3af 8000 	nop.w
 80020ac:	4601      	mov	r1, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	b2ca      	uxtb	r2, r1
 80020b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbf0      	blt.n	80020a8 <_read+0x12>
  }

  return len;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e009      	b.n	80020f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	60ba      	str	r2, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dbf1      	blt.n	80020e2 <_write+0x12>
  }
  return len;
 80020fe:	687b      	ldr	r3, [r7, #4]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_close>:

int _close(int file)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002130:	605a      	str	r2, [r3, #4]
  return 0;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_isatty>:

int _isatty(int file)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	@ (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f004 fc8a 	bl	8006ab8 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	220c      	movs	r2, #12
 80021a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	@ (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	20000968 	.word	0x20000968
 80021d8:	20000ac0 	.word	0x20000ac0

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <SystemInit+0x20>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <SystemInit+0x20>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <waterManagement>:
		}
	}
	power_electrodes(1, electrode_power_status);
}

void waterManagement(){
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
	int current_min_1 = HAL_GPIO_ReadPin(Float_Chamber1_min_GPIO_Port, Float_Chamber1_min_Pin);
 8002206:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800220a:	481c      	ldr	r0, [pc, #112]	@ (800227c <waterManagement+0x7c>)
 800220c:	f001 fba6 	bl	800395c <HAL_GPIO_ReadPin>
 8002210:	4603      	mov	r3, r0
 8002212:	617b      	str	r3, [r7, #20]
	int current_max_1 = HAL_GPIO_ReadPin(Float_Chamber1_max_GPIO_Port, Float_Chamber1_max_Pin);
 8002214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002218:	4818      	ldr	r0, [pc, #96]	@ (800227c <waterManagement+0x7c>)
 800221a:	f001 fb9f 	bl	800395c <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	613b      	str	r3, [r7, #16]
	int current_min_2 = HAL_GPIO_ReadPin(Float_Chamber2_min_GPIO_Port, Float_Chamber2_min_Pin);
 8002222:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002226:	4815      	ldr	r0, [pc, #84]	@ (800227c <waterManagement+0x7c>)
 8002228:	f001 fb98 	bl	800395c <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	60fb      	str	r3, [r7, #12]
	int current_max_2 = HAL_GPIO_ReadPin(Float_Chamber2_max_GPIO_Port, Float_Chamber2_max_Pin);
 8002230:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002234:	4811      	ldr	r0, [pc, #68]	@ (800227c <waterManagement+0x7c>)
 8002236:	f001 fb91 	bl	800395c <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	60bb      	str	r3, [r7, #8]
	//	int current_min_3 = HAL_GPIO_ReadPin(Float_Chamber3_min_GPIO_Port, Float_Chamber3_min_Pin);
	//	int current_max_3 = HAL_GPIO_ReadPin(Float_Chamber3_max_GPIO_Port, Float_Chamber3_max_Pin);
	int current_min_4 = HAL_GPIO_ReadPin(Float_Chamber4_min_GPIO_Port, Float_Chamber4_min_Pin);
 800223e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002242:	480f      	ldr	r0, [pc, #60]	@ (8002280 <waterManagement+0x80>)
 8002244:	f001 fb8a 	bl	800395c <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	607b      	str	r3, [r7, #4]
	int current_max_4 = HAL_GPIO_ReadPin(Float_Chamber4_max_GPIO_Port, Float_Chamber4_max_Pin);
 800224c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002250:	480b      	ldr	r0, [pc, #44]	@ (8002280 <waterManagement+0x80>)
 8002252:	f001 fb83 	bl	800395c <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	603b      	str	r3, [r7, #0]

	waterLevel_Chamber_1(current_min_1, current_max_1);
 800225a:	6939      	ldr	r1, [r7, #16]
 800225c:	6978      	ldr	r0, [r7, #20]
 800225e:	f000 f811 	bl	8002284 <waterLevel_Chamber_1>
	waterLevel_Chamber_2(current_min_2, current_max_2);
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f829 	bl	80022bc <waterLevel_Chamber_2>
	//	waterLevel_Chamber_3(current_min_3, current_max_3);
	waterLevel_Chamber_4(current_min_4, current_max_4);
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f841 	bl	80022f4 <waterLevel_Chamber_4>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40020400 	.word	0x40020400
 8002280:	40020000 	.word	0x40020000

08002284 <waterLevel_Chamber_1>:

void waterLevel_Chamber_1(int chamberMin, int chamberMax){
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	if(chamberMax == 0){
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <waterLevel_Chamber_1+0x1a>
		HAL_GPIO_WritePin(Solenoid1_Output_GPIO_Port, Solenoid1_Output_Pin, 1);
 8002294:	2201      	movs	r2, #1
 8002296:	2120      	movs	r1, #32
 8002298:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <waterLevel_Chamber_1+0x34>)
 800229a:	f001 fb77 	bl	800398c <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d104      	bne.n	80022ae <waterLevel_Chamber_1+0x2a>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid1_Output_GPIO_Port, Solenoid1_Output_Pin, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2120      	movs	r1, #32
 80022a8:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <waterLevel_Chamber_1+0x34>)
 80022aa:	f001 fb6f 	bl	800398c <HAL_GPIO_WritePin>
	}
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40020400 	.word	0x40020400

080022bc <waterLevel_Chamber_2>:

void waterLevel_Chamber_2(int chamberMin, int chamberMax){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
//	if(chamberMin == 0 && chamberMax == 0){
	if(chamberMax == 0){
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <waterLevel_Chamber_2+0x1a>
		HAL_GPIO_WritePin(Solenoid2_Output_GPIO_Port, Solenoid2_Output_Pin, 1);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2140      	movs	r1, #64	@ 0x40
 80022d0:	4807      	ldr	r0, [pc, #28]	@ (80022f0 <waterLevel_Chamber_2+0x34>)
 80022d2:	f001 fb5b 	bl	800398c <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d104      	bne.n	80022e6 <waterLevel_Chamber_2+0x2a>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid2_Output_GPIO_Port, Solenoid2_Output_Pin, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2140      	movs	r1, #64	@ 0x40
 80022e0:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <waterLevel_Chamber_2+0x34>)
 80022e2:	f001 fb53 	bl	800398c <HAL_GPIO_WritePin>
	}
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40020400 	.word	0x40020400

080022f4 <waterLevel_Chamber_4>:
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid3_Output_GPIO_Port, Solenoid3_Output_Pin, 0);
	}
}

void waterLevel_Chamber_4(int chamberMin, int chamberMax){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	if(chamberMax == 0){
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <waterLevel_Chamber_4+0x1c>
		HAL_GPIO_WritePin(Solenoid4_Output_GPIO_Port, Solenoid4_Output_Pin, 1);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800230a:	4808      	ldr	r0, [pc, #32]	@ (800232c <waterLevel_Chamber_4+0x38>)
 800230c:	f001 fb3e 	bl	800398c <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <waterLevel_Chamber_4+0x2e>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid4_Output_GPIO_Port, Solenoid4_Output_Pin, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <waterLevel_Chamber_4+0x38>)
 800231e:	f001 fb35 	bl	800398c <HAL_GPIO_WritePin>
	}
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40020400 	.word	0x40020400

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002334:	f7ff ff52 	bl	80021dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800233a:	490d      	ldr	r1, [pc, #52]	@ (8002370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002350:	4c0a      	ldr	r4, [pc, #40]	@ (800237c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235e:	f004 fbb1 	bl	8006ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002362:	f7ff f803 	bl	800136c <main>
  bx  lr    
 8002366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002374:	08009730 	.word	0x08009730
  ldr r2, =_sbss
 8002378:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800237c:	20000ac0 	.word	0x20000ac0

08002380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>
	...

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002388:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <HAL_Init+0x40>)
 800238e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <HAL_Init+0x40>)
 800239a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800239e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a07      	ldr	r2, [pc, #28]	@ (80023c4 <HAL_Init+0x40>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ac:	2003      	movs	r0, #3
 80023ae:	f000 fd0d 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b2:	200f      	movs	r0, #15
 80023b4:	f000 f808 	bl	80023c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b8:	f7ff fc76 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023c00 	.word	0x40023c00

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_InitTick+0x54>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_InitTick+0x58>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023de:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fd25 	bl	8002e36 <HAL_SYSTICK_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00e      	b.n	8002414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d80a      	bhi.n	8002412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f000 fced 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002408:	4a06      	ldr	r2, [pc, #24]	@ (8002424 <HAL_InitTick+0x5c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000008 	.word	0x20000008
 8002420:	20000010 	.word	0x20000010
 8002424:	2000000c 	.word	0x2000000c

08002428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_IncTick+0x20>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_IncTick+0x24>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_IncTick+0x24>)
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000010 	.word	0x20000010
 800244c:	20000970 	.word	0x20000970

08002450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return uwTick;
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <HAL_GetTick+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000970 	.word	0x20000970

08002468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff ffee 	bl	8002450 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d005      	beq.n	800248e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_Delay+0x44>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800248e:	bf00      	nop
 8002490:	f7ff ffde 	bl	8002450 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8f7      	bhi.n	8002490 <HAL_Delay+0x28>
  {
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000010 	.word	0x20000010

080024b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e033      	b.n	800252e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fc12 	bl	8001cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d118      	bne.n	8002520 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024f6:	f023 0302 	bic.w	r3, r3, #2
 80024fa:	f043 0202 	orr.w	r2, r3, #2
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa96 	bl	8002a34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	@ 0x40
 800251e:	e001      	b.n	8002524 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Start+0x1a>
 800254e:	2302      	movs	r3, #2
 8002550:	e097      	b.n	8002682 <HAL_ADC_Start+0x14a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d018      	beq.n	800259a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002578:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <HAL_ADC_Start+0x158>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a45      	ldr	r2, [pc, #276]	@ (8002694 <HAL_ADC_Start+0x15c>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9a      	lsrs	r2, r3, #18
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800258c:	e002      	b.n	8002594 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3b01      	subs	r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f9      	bne.n	800258e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d15f      	bne.n	8002668 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025e6:	d106      	bne.n	80025f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ec:	f023 0206 	bic.w	r2, r3, #6
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80025f4:	e002      	b.n	80025fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002604:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <HAL_ADC_Start+0x160>)
 8002606:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002610:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d129      	bne.n	8002680 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e020      	b.n	8002680 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a16      	ldr	r2, [pc, #88]	@ (800269c <HAL_ADC_Start+0x164>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d11b      	bne.n	8002680 <HAL_ADC_Start+0x148>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d114      	bne.n	8002680 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	e00b      	b.n	8002680 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f043 0210 	orr.w	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000008 	.word	0x20000008
 8002694:	431bde83 	.word	0x431bde83
 8002698:	40012300 	.word	0x40012300
 800269c:	40012000 	.word	0x40012000

080026a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026bc:	d113      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026cc:	d10b      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f043 0220 	orr.w	r2, r3, #32
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e063      	b.n	80027ae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e6:	f7ff feb3 	bl	8002450 <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026ec:	e021      	b.n	8002732 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d01d      	beq.n	8002732 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_ADC_PollForConversion+0x6c>
 80026fc:	f7ff fea8 	bl	8002450 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d212      	bcs.n	8002732 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d00b      	beq.n	8002732 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f043 0204 	orr.w	r2, r3, #4
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e03d      	b.n	80027ae <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d1d6      	bne.n	80026ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0212 	mvn.w	r2, #18
 8002748:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d123      	bne.n	80027ac <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11f      	bne.n	80027ac <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002784:	2b00      	cmp	r3, #0
 8002786:	d111      	bne.n	80027ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e113      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x244>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d925      	bls.n	8002848 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68d9      	ldr	r1, [r3, #12]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	3b1e      	subs	r3, #30
 8002812:	2207      	movs	r2, #7
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	4603      	mov	r3, r0
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4403      	add	r3, r0
 800283a:	3b1e      	subs	r3, #30
 800283c:	409a      	lsls	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	e022      	b.n	800288e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	2207      	movs	r2, #7
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	400a      	ands	r2, r1
 800286a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4618      	mov	r0, r3
 800287e:	4603      	mov	r3, r0
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4403      	add	r3, r0
 8002884:	409a      	lsls	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d824      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b05      	subs	r3, #5
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	400a      	ands	r2, r1
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b05      	subs	r3, #5
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028de:	e04c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d824      	bhi.n	8002932 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b23      	subs	r3, #35	@ 0x23
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43da      	mvns	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	400a      	ands	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	3b23      	subs	r3, #35	@ 0x23
 8002924:	fa00 f203 	lsl.w	r2, r0, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002930:	e023      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b41      	subs	r3, #65	@ 0x41
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	400a      	ands	r2, r1
 8002952:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b41      	subs	r3, #65	@ 0x41
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297a:	4b29      	ldr	r3, [pc, #164]	@ (8002a20 <HAL_ADC_ConfigChannel+0x250>)
 800297c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a28      	ldr	r2, [pc, #160]	@ (8002a24 <HAL_ADC_ConfigChannel+0x254>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10f      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b12      	cmp	r3, #18
 800298e:	d10b      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002a24 <HAL_ADC_ConfigChannel+0x254>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12b      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <HAL_ADC_ConfigChannel+0x258>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x1f4>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b11      	cmp	r3, #17
 80029c2:	d122      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a11      	ldr	r2, [pc, #68]	@ (8002a28 <HAL_ADC_ConfigChannel+0x258>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029e6:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_ADC_ConfigChannel+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a11      	ldr	r2, [pc, #68]	@ (8002a30 <HAL_ADC_ConfigChannel+0x260>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	0c9a      	lsrs	r2, r3, #18
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40012300 	.word	0x40012300
 8002a24:	40012000 	.word	0x40012000
 8002a28:	10000012 	.word	0x10000012
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	431bde83 	.word	0x431bde83

08002a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3c:	4b79      	ldr	r3, [pc, #484]	@ (8002c24 <ADC_Init+0x1f0>)
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	4a58      	ldr	r2, [pc, #352]	@ (8002c28 <ADC_Init+0x1f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e00f      	b.n	8002b32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0202 	bic.w	r2, r2, #2
 8002b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7e1b      	ldrb	r3, [r3, #24]
 8002b4c:	005a      	lsls	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	035a      	lsls	r2, r3, #13
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e007      	b.n	8002ba8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051a      	lsls	r2, r3, #20
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bea:	025a      	lsls	r2, r3, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	029a      	lsls	r2, r3, #10
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40012300 	.word	0x40012300
 8002c28:	0f000001 	.word	0x0f000001

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	@ (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	@ (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	@ (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff faf8 	bl	8002450 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e099      	b.n	8002fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8c:	e00f      	b.n	8002eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8e:	f7ff fadf 	bl	8002450 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d908      	bls.n	8002eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e078      	b.n	8002fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e8      	bne.n	8002e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <HAL_DMA_Init+0x158>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d107      	bne.n	8002f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	4313      	orrs	r3, r2
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0307 	bic.w	r3, r3, #7
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d117      	bne.n	8002f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fb01 	bl	800355c <DMA_CheckFifoParam>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2240      	movs	r2, #64	@ 0x40
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e016      	b.n	8002fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fab8 	bl	80034f0 <DMA_CalcBaseAndBitshift>
 8002f80:	4603      	mov	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f88:	223f      	movs	r2, #63	@ 0x3f
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	f010803f 	.word	0xf010803f

08002fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Start_IT+0x26>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e040      	b.n	8003054 <HAL_DMA_Start_IT+0xa8>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d12f      	bne.n	8003046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fa4a 	bl	8003494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	223f      	movs	r2, #63	@ 0x3f
 8003006:	409a      	lsls	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0216 	orr.w	r2, r2, #22
 800301a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0208 	orr.w	r2, r2, #8
 8003032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e005      	b.n	8003052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800304e:	2302      	movs	r3, #2
 8003050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003052:	7dfb      	ldrb	r3, [r7, #23]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800306a:	f7ff f9f1 	bl	8002450 <HAL_GetTick>
 800306e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d008      	beq.n	800308e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e052      	b.n	8003134 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0216 	bic.w	r2, r2, #22
 800309c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_DMA_Abort+0x62>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0208 	bic.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030de:	e013      	b.n	8003108 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030e0:	f7ff f9b6 	bl	8002450 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d90c      	bls.n	8003108 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e015      	b.n	8003134 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311a:	223f      	movs	r2, #63	@ 0x3f
 800311c:	409a      	lsls	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d004      	beq.n	800315a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2280      	movs	r2, #128	@ 0x80
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e00c      	b.n	8003174 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2205      	movs	r2, #5
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800318c:	4b8e      	ldr	r3, [pc, #568]	@ (80033c8 <HAL_DMA_IRQHandler+0x248>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a8e      	ldr	r2, [pc, #568]	@ (80033cc <HAL_DMA_IRQHandler+0x24c>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031aa:	2208      	movs	r2, #8
 80031ac:	409a      	lsls	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01a      	beq.n	80031ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	2208      	movs	r2, #8
 80031da:	409a      	lsls	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	2201      	movs	r2, #1
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	2201      	movs	r2, #1
 8003210:	409a      	lsls	r2, r3
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	f043 0202 	orr.w	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	2204      	movs	r2, #4
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d012      	beq.n	8003258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	2204      	movs	r2, #4
 8003246:	409a      	lsls	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003250:	f043 0204 	orr.w	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325c:	2210      	movs	r2, #16
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d043      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d03c      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327a:	2210      	movs	r2, #16
 800327c:	409a      	lsls	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d024      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
 80032ae:	e01f      	b.n	80032f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e016      	b.n	80032f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0208 	bic.w	r2, r2, #8
 80032de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	2220      	movs	r2, #32
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 808f 	beq.w	8003420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8087 	beq.w	8003420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	2220      	movs	r2, #32
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b05      	cmp	r3, #5
 8003328:	d136      	bne.n	8003398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0216 	bic.w	r2, r2, #22
 8003338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <HAL_DMA_IRQHandler+0x1da>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0208 	bic.w	r2, r2, #8
 8003368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336e:	223f      	movs	r2, #63	@ 0x3f
 8003370:	409a      	lsls	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338a:	2b00      	cmp	r3, #0
 800338c:	d07e      	beq.n	800348c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
        }
        return;
 8003396:	e079      	b.n	800348c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d031      	beq.n	8003420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
 80033c4:	e02c      	b.n	8003420 <HAL_DMA_IRQHandler+0x2a0>
 80033c6:	bf00      	nop
 80033c8:	20000008 	.word	0x20000008
 80033cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d023      	beq.n	8003420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
 80033e0:	e01e      	b.n	8003420 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10f      	bne.n	8003410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0210 	bic.w	r2, r2, #16
 80033fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	2b00      	cmp	r3, #0
 8003426:	d032      	beq.n	800348e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d022      	beq.n	800347a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2205      	movs	r2, #5
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3301      	adds	r3, #1
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d307      	bcc.n	8003468 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f2      	bne.n	800344c <HAL_DMA_IRQHandler+0x2cc>
 8003466:	e000      	b.n	800346a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
 800348a:	e000      	b.n	800348e <HAL_DMA_IRQHandler+0x30e>
        return;
 800348c:	bf00      	nop
    }
  }
}
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b40      	cmp	r3, #64	@ 0x40
 80034c0:	d108      	bne.n	80034d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034d2:	e007      	b.n	80034e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	3b10      	subs	r3, #16
 8003500:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <DMA_CalcBaseAndBitshift+0x64>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800350a:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <DMA_CalcBaseAndBitshift+0x68>)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d909      	bls.n	8003532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003530:	e007      	b.n	8003542 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	aaaaaaab 	.word	0xaaaaaaab
 8003558:	080093a8 	.word	0x080093a8

0800355c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d11f      	bne.n	80035b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d856      	bhi.n	800362a <DMA_CheckFifoParam+0xce>
 800357c:	a201      	add	r2, pc, #4	@ (adr r2, 8003584 <DMA_CheckFifoParam+0x28>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003595 	.word	0x08003595
 8003588:	080035a7 	.word	0x080035a7
 800358c:	08003595 	.word	0x08003595
 8003590:	0800362b 	.word	0x0800362b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d046      	beq.n	800362e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e043      	b.n	800362e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035ae:	d140      	bne.n	8003632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b4:	e03d      	b.n	8003632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035be:	d121      	bne.n	8003604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d837      	bhi.n	8003636 <DMA_CheckFifoParam+0xda>
 80035c6:	a201      	add	r2, pc, #4	@ (adr r2, 80035cc <DMA_CheckFifoParam+0x70>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035dd 	.word	0x080035dd
 80035d0:	080035e3 	.word	0x080035e3
 80035d4:	080035dd 	.word	0x080035dd
 80035d8:	080035f5 	.word	0x080035f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	e030      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d025      	beq.n	800363a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f2:	e022      	b.n	800363a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035fc:	d11f      	bne.n	800363e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003602:	e01c      	b.n	800363e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d903      	bls.n	8003612 <DMA_CheckFifoParam+0xb6>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d003      	beq.n	8003618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003610:	e018      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      break;
 8003616:	e015      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      break;
 8003628:	e00b      	b.n	8003642 <DMA_CheckFifoParam+0xe6>
      break;
 800362a:	bf00      	nop
 800362c:	e00a      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 800362e:	bf00      	nop
 8003630:	e008      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 8003632:	bf00      	nop
 8003634:	e006      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 8003636:	bf00      	nop
 8003638:	e004      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 800363a:	bf00      	nop
 800363c:	e002      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;   
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
    }
  } 
  
  return status; 
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	@ 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e159      	b.n	8003924 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003670:	2201      	movs	r2, #1
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	f040 8148 	bne.w	800391e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d005      	beq.n	80036a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d130      	bne.n	8003708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	2203      	movs	r2, #3
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036dc:	2201      	movs	r2, #1
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 0201 	and.w	r2, r3, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b03      	cmp	r3, #3
 8003712:	d017      	beq.n	8003744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d123      	bne.n	8003798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	08da      	lsrs	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3208      	adds	r2, #8
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	220f      	movs	r2, #15
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	08da      	lsrs	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	69b9      	ldr	r1, [r7, #24]
 8003794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0203 	and.w	r2, r3, #3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a2 	beq.w	800391e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b57      	ldr	r3, [pc, #348]	@ (800393c <HAL_GPIO_Init+0x2e8>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	4a56      	ldr	r2, [pc, #344]	@ (800393c <HAL_GPIO_Init+0x2e8>)
 80037e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ea:	4b54      	ldr	r3, [pc, #336]	@ (800393c <HAL_GPIO_Init+0x2e8>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037f6:	4a52      	ldr	r2, [pc, #328]	@ (8003940 <HAL_GPIO_Init+0x2ec>)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	3302      	adds	r3, #2
 80037fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a49      	ldr	r2, [pc, #292]	@ (8003944 <HAL_GPIO_Init+0x2f0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d019      	beq.n	8003856 <HAL_GPIO_Init+0x202>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a48      	ldr	r2, [pc, #288]	@ (8003948 <HAL_GPIO_Init+0x2f4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_GPIO_Init+0x1fe>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a47      	ldr	r2, [pc, #284]	@ (800394c <HAL_GPIO_Init+0x2f8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00d      	beq.n	800384e <HAL_GPIO_Init+0x1fa>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a46      	ldr	r2, [pc, #280]	@ (8003950 <HAL_GPIO_Init+0x2fc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x1f6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a45      	ldr	r2, [pc, #276]	@ (8003954 <HAL_GPIO_Init+0x300>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_GPIO_Init+0x1f2>
 8003842:	2304      	movs	r3, #4
 8003844:	e008      	b.n	8003858 <HAL_GPIO_Init+0x204>
 8003846:	2307      	movs	r3, #7
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x204>
 800384a:	2303      	movs	r3, #3
 800384c:	e004      	b.n	8003858 <HAL_GPIO_Init+0x204>
 800384e:	2302      	movs	r3, #2
 8003850:	e002      	b.n	8003858 <HAL_GPIO_Init+0x204>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_GPIO_Init+0x204>
 8003856:	2300      	movs	r3, #0
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	f002 0203 	and.w	r2, r2, #3
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	4093      	lsls	r3, r2
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003868:	4935      	ldr	r1, [pc, #212]	@ (8003940 <HAL_GPIO_Init+0x2ec>)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003876:	4b38      	ldr	r3, [pc, #224]	@ (8003958 <HAL_GPIO_Init+0x304>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800389a:	4a2f      	ldr	r2, [pc, #188]	@ (8003958 <HAL_GPIO_Init+0x304>)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_GPIO_Init+0x304>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038c4:	4a24      	ldr	r2, [pc, #144]	@ (8003958 <HAL_GPIO_Init+0x304>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ca:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <HAL_GPIO_Init+0x304>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003958 <HAL_GPIO_Init+0x304>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f4:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <HAL_GPIO_Init+0x304>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003918:	4a0f      	ldr	r2, [pc, #60]	@ (8003958 <HAL_GPIO_Init+0x304>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	f67f aea2 	bls.w	8003670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3724      	adds	r7, #36	@ 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	40013800 	.word	0x40013800
 8003944:	40020000 	.word	0x40020000
 8003948:	40020400 	.word	0x40020400
 800394c:	40020800 	.word	0x40020800
 8003950:	40020c00 	.word	0x40020c00
 8003954:	40021000 	.word	0x40021000
 8003958:	40013c00 	.word	0x40013c00

0800395c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e001      	b.n	800397e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a8:	e003      	b.n	80039b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	041a      	lsls	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	619a      	str	r2, [r3, #24]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e12b      	b.n	8003c2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe f9ca 	bl	8001d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	@ 0x24
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a24:	f001 f8aa 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8003a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a81      	ldr	r2, [pc, #516]	@ (8003c34 <HAL_I2C_Init+0x274>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d807      	bhi.n	8003a44 <HAL_I2C_Init+0x84>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a80      	ldr	r2, [pc, #512]	@ (8003c38 <HAL_I2C_Init+0x278>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	bf94      	ite	ls
 8003a3c:	2301      	movls	r3, #1
 8003a3e:	2300      	movhi	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e006      	b.n	8003a52 <HAL_I2C_Init+0x92>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a7d      	ldr	r2, [pc, #500]	@ (8003c3c <HAL_I2C_Init+0x27c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	bf94      	ite	ls
 8003a4c:	2301      	movls	r3, #1
 8003a4e:	2300      	movhi	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0e7      	b.n	8003c2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a78      	ldr	r2, [pc, #480]	@ (8003c40 <HAL_I2C_Init+0x280>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	0c9b      	lsrs	r3, r3, #18
 8003a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a6a      	ldr	r2, [pc, #424]	@ (8003c34 <HAL_I2C_Init+0x274>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d802      	bhi.n	8003a94 <HAL_I2C_Init+0xd4>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3301      	adds	r3, #1
 8003a92:	e009      	b.n	8003aa8 <HAL_I2C_Init+0xe8>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	4a69      	ldr	r2, [pc, #420]	@ (8003c44 <HAL_I2C_Init+0x284>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003aba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	495c      	ldr	r1, [pc, #368]	@ (8003c34 <HAL_I2C_Init+0x274>)
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	d819      	bhi.n	8003afc <HAL_I2C_Init+0x13c>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e59      	subs	r1, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad6:	1c59      	adds	r1, r3, #1
 8003ad8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003adc:	400b      	ands	r3, r1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_I2C_Init+0x138>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1e59      	subs	r1, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003af0:	3301      	adds	r3, #1
 8003af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af6:	e051      	b.n	8003b9c <HAL_I2C_Init+0x1dc>
 8003af8:	2304      	movs	r3, #4
 8003afa:	e04f      	b.n	8003b9c <HAL_I2C_Init+0x1dc>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d111      	bne.n	8003b28 <HAL_I2C_Init+0x168>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1e58      	subs	r0, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e012      	b.n	8003b4e <HAL_I2C_Init+0x18e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	0099      	lsls	r1, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Init+0x196>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e022      	b.n	8003b9c <HAL_I2C_Init+0x1dc>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10e      	bne.n	8003b7c <HAL_I2C_Init+0x1bc>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1e58      	subs	r0, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	440b      	add	r3, r1
 8003b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b7a:	e00f      	b.n	8003b9c <HAL_I2C_Init+0x1dc>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1e58      	subs	r0, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6859      	ldr	r1, [r3, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	0099      	lsls	r1, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	6809      	ldr	r1, [r1, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6911      	ldr	r1, [r2, #16]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68d2      	ldr	r2, [r2, #12]
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	000186a0 	.word	0x000186a0
 8003c38:	001e847f 	.word	0x001e847f
 8003c3c:	003d08ff 	.word	0x003d08ff
 8003c40:	431bde83 	.word	0x431bde83
 8003c44:	10624dd3 	.word	0x10624dd3

08003c48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	4608      	mov	r0, r1
 8003c52:	4611      	mov	r1, r2
 8003c54:	461a      	mov	r2, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	817b      	strh	r3, [r7, #10]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	813b      	strh	r3, [r7, #8]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c62:	f7fe fbf5 	bl	8002450 <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	f040 80d9 	bne.w	8003e28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2319      	movs	r3, #25
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	496d      	ldr	r1, [pc, #436]	@ (8003e34 <HAL_I2C_Mem_Write+0x1ec>)
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f971 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e0cc      	b.n	8003e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_I2C_Mem_Write+0x56>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e0c5      	b.n	8003e2a <HAL_I2C_Mem_Write+0x1e2>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d007      	beq.n	8003cc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2221      	movs	r2, #33	@ 0x21
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2240      	movs	r2, #64	@ 0x40
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a4d      	ldr	r2, [pc, #308]	@ (8003e38 <HAL_I2C_Mem_Write+0x1f0>)
 8003d04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d06:	88f8      	ldrh	r0, [r7, #6]
 8003d08:	893a      	ldrh	r2, [r7, #8]
 8003d0a:	8979      	ldrh	r1, [r7, #10]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	4603      	mov	r3, r0
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f890 	bl	8003e3c <I2C_RequestMemoryWrite>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d052      	beq.n	8003dc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e081      	b.n	8003e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fa36 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d107      	bne.n	8003d4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06b      	b.n	8003e2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_I2C_Mem_Write+0x180>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d017      	beq.n	8003dc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1aa      	bne.n	8003d26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fa29 	bl	800422c <I2C_WaitOnBTFFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e016      	b.n	8003e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	00100002 	.word	0x00100002
 8003e38:	ffff0000 	.word	0xffff0000

08003e3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f878 	bl	8003f68 <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8c:	d103      	bne.n	8003e96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e05f      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e9a:	897b      	ldrh	r3, [r7, #10]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ea8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	492d      	ldr	r1, [pc, #180]	@ (8003f64 <I2C_RequestMemoryWrite+0x128>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f8d3 	bl	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e04c      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f95e 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e02b      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]
 8003f12:	e021      	b.n	8003f58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f938 	bl	800419c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e005      	b.n	8003f5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4e:	893b      	ldrh	r3, [r7, #8]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	00010002 	.word	0x00010002

08003f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f78:	e048      	b.n	800400c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d044      	beq.n	800400c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe fa65 	bl	8002450 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d139      	bne.n	800400c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10d      	bne.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	e00c      	b.n	8003fd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d116      	bne.n	800400c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e023      	b.n	8004054 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d10d      	bne.n	8004032 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	43da      	mvns	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	e00c      	b.n	800404c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	43da      	mvns	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4013      	ands	r3, r2
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	429a      	cmp	r2, r3
 8004050:	d093      	beq.n	8003f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800406a:	e071      	b.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407a:	d123      	bne.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	f043 0204 	orr.w	r2, r3, #4
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e067      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d041      	beq.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fe f9c0 	bl	8002450 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d136      	bne.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10c      	bne.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	e00b      	b.n	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	43da      	mvns	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4013      	ands	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e021      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d10c      	bne.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	43da      	mvns	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4013      	ands	r3, r2
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e00b      	b.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	f47f af6d 	bne.w	800406c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a8:	e034      	b.n	8004214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f886 	bl	80042bc <I2C_IsAcknowledgeFailed>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e034      	b.n	8004224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d028      	beq.n	8004214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe f945 	bl	8002450 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11d      	bne.n	8004214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e2:	2b80      	cmp	r3, #128	@ 0x80
 80041e4:	d016      	beq.n	8004214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	f043 0220 	orr.w	r2, r3, #32
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e007      	b.n	8004224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b80      	cmp	r3, #128	@ 0x80
 8004220:	d1c3      	bne.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004238:	e034      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f83e 	bl	80042bc <I2C_IsAcknowledgeFailed>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e034      	b.n	80042b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d028      	beq.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fe f8fd 	bl	8002450 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11d      	bne.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b04      	cmp	r3, #4
 8004274:	d016      	beq.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e007      	b.n	80042b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d1c3      	bne.n	800423a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d2:	d11b      	bne.n	800430c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	f043 0204 	orr.w	r2, r3, #4
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e267      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d075      	beq.n	8004426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433a:	4b88      	ldr	r3, [pc, #544]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b04      	cmp	r3, #4
 8004344:	d00c      	beq.n	8004360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004346:	4b85      	ldr	r3, [pc, #532]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434e:	2b08      	cmp	r3, #8
 8004350:	d112      	bne.n	8004378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b82      	ldr	r3, [pc, #520]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800435e:	d10b      	bne.n	8004378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	4b7e      	ldr	r3, [pc, #504]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d05b      	beq.n	8004424 <HAL_RCC_OscConfig+0x108>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d157      	bne.n	8004424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e242      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x74>
 8004382:	4b76      	ldr	r3, [pc, #472]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a75      	ldr	r2, [pc, #468]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e01d      	b.n	80043cc <HAL_RCC_OscConfig+0xb0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x98>
 800439a:	4b70      	ldr	r3, [pc, #448]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a6f      	ldr	r2, [pc, #444]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b6d      	ldr	r3, [pc, #436]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6c      	ldr	r2, [pc, #432]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0xb0>
 80043b4:	4b69      	ldr	r3, [pc, #420]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a68      	ldr	r2, [pc, #416]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b66      	ldr	r3, [pc, #408]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a65      	ldr	r2, [pc, #404]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fe f83c 	bl	8002450 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fe f838 	bl	8002450 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	@ 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e207      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	4b5b      	ldr	r3, [pc, #364]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0xc0>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fe f828 	bl	8002450 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004404:	f7fe f824 	bl	8002450 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e1f3      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	4b51      	ldr	r3, [pc, #324]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0xe8>
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d063      	beq.n	80044fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004432:	4b4a      	ldr	r3, [pc, #296]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443e:	4b47      	ldr	r3, [pc, #284]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004446:	2b08      	cmp	r3, #8
 8004448:	d11c      	bne.n	8004484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444a:	4b44      	ldr	r3, [pc, #272]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004456:	4b41      	ldr	r3, [pc, #260]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x152>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e1c7      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446e:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4937      	ldr	r1, [pc, #220]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004482:	e03a      	b.n	80044fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448c:	4b34      	ldr	r3, [pc, #208]	@ (8004560 <HAL_RCC_OscConfig+0x244>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fd ffdd 	bl	8002450 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449a:	f7fd ffd9 	bl	8002450 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e1a8      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ac:	4b2b      	ldr	r3, [pc, #172]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b8:	4b28      	ldr	r3, [pc, #160]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4925      	ldr	r1, [pc, #148]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
 80044cc:	e015      	b.n	80044fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ce:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <HAL_RCC_OscConfig+0x244>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fd ffbc 	bl	8002450 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044dc:	f7fd ffb8 	bl	8002450 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e187      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d036      	beq.n	8004574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d016      	beq.n	800453c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450e:	4b15      	ldr	r3, [pc, #84]	@ (8004564 <HAL_RCC_OscConfig+0x248>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fd ff9c 	bl	8002450 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800451c:	f7fd ff98 	bl	8002450 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e167      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452e:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_RCC_OscConfig+0x240>)
 8004530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x200>
 800453a:	e01b      	b.n	8004574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453c:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <HAL_RCC_OscConfig+0x248>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004542:	f7fd ff85 	bl	8002450 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004548:	e00e      	b.n	8004568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454a:	f7fd ff81 	bl	8002450 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d907      	bls.n	8004568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e150      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
 800455c:	40023800 	.word	0x40023800
 8004560:	42470000 	.word	0x42470000
 8004564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	4b88      	ldr	r3, [pc, #544]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 800456a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ea      	bne.n	800454a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8097 	beq.w	80046b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004586:	4b81      	ldr	r3, [pc, #516]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	4b7d      	ldr	r3, [pc, #500]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	4a7c      	ldr	r2, [pc, #496]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a2:	4b7a      	ldr	r3, [pc, #488]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b2:	4b77      	ldr	r3, [pc, #476]	@ (8004790 <HAL_RCC_OscConfig+0x474>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d118      	bne.n	80045f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045be:	4b74      	ldr	r3, [pc, #464]	@ (8004790 <HAL_RCC_OscConfig+0x474>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a73      	ldr	r2, [pc, #460]	@ (8004790 <HAL_RCC_OscConfig+0x474>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ca:	f7fd ff41 	bl	8002450 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fd ff3d 	bl	8002450 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e10c      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004790 <HAL_RCC_OscConfig+0x474>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x2ea>
 80045f8:	4b64      	ldr	r3, [pc, #400]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fc:	4a63      	ldr	r2, [pc, #396]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	@ 0x70
 8004604:	e01c      	b.n	8004640 <HAL_RCC_OscConfig+0x324>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b05      	cmp	r3, #5
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0x30c>
 800460e:	4b5f      	ldr	r3, [pc, #380]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	4a5e      	ldr	r2, [pc, #376]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004614:	f043 0304 	orr.w	r3, r3, #4
 8004618:	6713      	str	r3, [r2, #112]	@ 0x70
 800461a:	4b5c      	ldr	r3, [pc, #368]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	4a5b      	ldr	r2, [pc, #364]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6713      	str	r3, [r2, #112]	@ 0x70
 8004626:	e00b      	b.n	8004640 <HAL_RCC_OscConfig+0x324>
 8004628:	4b58      	ldr	r3, [pc, #352]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462c:	4a57      	ldr	r2, [pc, #348]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	6713      	str	r3, [r2, #112]	@ 0x70
 8004634:	4b55      	ldr	r3, [pc, #340]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004638:	4a54      	ldr	r2, [pc, #336]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 800463a:	f023 0304 	bic.w	r3, r3, #4
 800463e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d015      	beq.n	8004674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fd ff02 	bl	8002450 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	e00a      	b.n	8004666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004650:	f7fd fefe 	bl	8002450 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e0cb      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	4b49      	ldr	r3, [pc, #292]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0ee      	beq.n	8004650 <HAL_RCC_OscConfig+0x334>
 8004672:	e014      	b.n	800469e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004674:	f7fd feec 	bl	8002450 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467a:	e00a      	b.n	8004692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fd fee8 	bl	8002450 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0b5      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004692:	4b3e      	ldr	r3, [pc, #248]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ee      	bne.n	800467c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469e:	7dfb      	ldrb	r3, [r7, #23]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a4:	4b39      	ldr	r3, [pc, #228]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	4a38      	ldr	r2, [pc, #224]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 80046aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80a1 	beq.w	80047fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ba:	4b34      	ldr	r3, [pc, #208]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d05c      	beq.n	8004780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d141      	bne.n	8004752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ce:	4b31      	ldr	r3, [pc, #196]	@ (8004794 <HAL_RCC_OscConfig+0x478>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fd febc 	bl	8002450 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd feb8 	bl	8002450 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e087      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	4b27      	ldr	r3, [pc, #156]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	019b      	lsls	r3, r3, #6
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	085b      	lsrs	r3, r3, #1
 8004712:	3b01      	subs	r3, #1
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	061b      	lsls	r3, r3, #24
 800471e:	491b      	ldr	r1, [pc, #108]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004720:	4313      	orrs	r3, r2
 8004722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x478>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472a:	f7fd fe91 	bl	8002450 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004732:	f7fd fe8d 	bl	8002450 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e05c      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004744:	4b11      	ldr	r3, [pc, #68]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x416>
 8004750:	e054      	b.n	80047fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004752:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <HAL_RCC_OscConfig+0x478>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fd fe7a 	bl	8002450 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004760:	f7fd fe76 	bl	8002450 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e045      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_RCC_OscConfig+0x470>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x444>
 800477e:	e03d      	b.n	80047fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e038      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
 800478c:	40023800 	.word	0x40023800
 8004790:	40007000 	.word	0x40007000
 8004794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004798:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <HAL_RCC_OscConfig+0x4ec>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d028      	beq.n	80047f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d121      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d11a      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047c8:	4013      	ands	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d111      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	3b01      	subs	r3, #1
 80047e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800

0800480c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0cc      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b68      	ldr	r3, [pc, #416]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90c      	bls.n	8004848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b65      	ldr	r3, [pc, #404]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b63      	ldr	r3, [pc, #396]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0b8      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004860:	4b59      	ldr	r3, [pc, #356]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a58      	ldr	r2, [pc, #352]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800486a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004878:	4b53      	ldr	r3, [pc, #332]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a52      	ldr	r2, [pc, #328]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b50      	ldr	r3, [pc, #320]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	494d      	ldr	r1, [pc, #308]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d044      	beq.n	800492c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d119      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d003      	beq.n	80048ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b3f      	ldr	r3, [pc, #252]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e06f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	4b3b      	ldr	r3, [pc, #236]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e067      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b37      	ldr	r3, [pc, #220]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4934      	ldr	r1, [pc, #208]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048fc:	f7fd fda8 	bl	8002450 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fd fda4 	bl	8002450 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e04f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b2b      	ldr	r3, [pc, #172]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492c:	4b25      	ldr	r3, [pc, #148]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d20c      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b22      	ldr	r3, [pc, #136]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b20      	ldr	r3, [pc, #128]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e032      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b19      	ldr	r3, [pc, #100]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4916      	ldr	r1, [pc, #88]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497e:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490e      	ldr	r1, [pc, #56]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004992:	f000 f821 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490a      	ldr	r1, [pc, #40]	@ (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	4a09      	ldr	r2, [pc, #36]	@ (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ae:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fd fd08 	bl	80023c8 <HAL_InitTick>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023c00 	.word	0x40023c00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	08009390 	.word	0x08009390
 80049d0:	20000008 	.word	0x20000008
 80049d4:	2000000c 	.word	0x2000000c

080049d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049dc:	b090      	sub	sp, #64	@ 0x40
 80049de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e8:	2300      	movs	r3, #0
 80049ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f0:	4b59      	ldr	r3, [pc, #356]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d00d      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x40>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	f200 80a1 	bhi.w	8004b44 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0x34>
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a0a:	e09b      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004a10:	e09b      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a12:	4b53      	ldr	r3, [pc, #332]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a16:	e098      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a18:	4b4f      	ldr	r3, [pc, #316]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a22:	4b4d      	ldr	r3, [pc, #308]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d028      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	2200      	movs	r2, #0
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a40:	2100      	movs	r1, #0
 8004a42:	4b47      	ldr	r3, [pc, #284]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a44:	fb03 f201 	mul.w	r2, r3, r1
 8004a48:	2300      	movs	r3, #0
 8004a4a:	fb00 f303 	mul.w	r3, r0, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a43      	ldr	r2, [pc, #268]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a52:	fba0 1202 	umull	r1, r2, r0, r2
 8004a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a58:	460a      	mov	r2, r1
 8004a5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a5e:	4413      	add	r3, r2
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a64:	2200      	movs	r2, #0
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	61fa      	str	r2, [r7, #28]
 8004a6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a72:	f7fc f8f1 	bl	8000c58 <__aeabi_uldivmod>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a7e:	e053      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a80:	4b35      	ldr	r3, [pc, #212]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	2200      	movs	r2, #0
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	617a      	str	r2, [r7, #20]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a92:	f04f 0b00 	mov.w	fp, #0
 8004a96:	4652      	mov	r2, sl
 8004a98:	465b      	mov	r3, fp
 8004a9a:	f04f 0000 	mov.w	r0, #0
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	0159      	lsls	r1, r3, #5
 8004aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa8:	0150      	lsls	r0, r2, #5
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	ebb2 080a 	subs.w	r8, r2, sl
 8004ab2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ac2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ac6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004aca:	ebb2 0408 	subs.w	r4, r2, r8
 8004ace:	eb63 0509 	sbc.w	r5, r3, r9
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	00eb      	lsls	r3, r5, #3
 8004adc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae0:	00e2      	lsls	r2, r4, #3
 8004ae2:	4614      	mov	r4, r2
 8004ae4:	461d      	mov	r5, r3
 8004ae6:	eb14 030a 	adds.w	r3, r4, sl
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	eb45 030b 	adc.w	r3, r5, fp
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afe:	4629      	mov	r1, r5
 8004b00:	028b      	lsls	r3, r1, #10
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b08:	4621      	mov	r1, r4
 8004b0a:	028a      	lsls	r2, r1, #10
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b12:	2200      	movs	r2, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	60fa      	str	r2, [r7, #12]
 8004b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b1c:	f7fc f89c 	bl	8000c58 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	3301      	adds	r3, #1
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3740      	adds	r7, #64	@ 0x40
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	017d7840 	.word	0x017d7840

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000008 	.word	0x20000008

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff fff0 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a9b      	lsrs	r3, r3, #10
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	@ (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	080093a0 	.word	0x080093a0

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffdc 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0b5b      	lsrs	r3, r3, #13
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	@ (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	080093a0 	.word	0x080093a0

08004bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07b      	b.n	8004cd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bee:	d009      	beq.n	8004c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]
 8004bf6:	e005      	b.n	8004c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd f908 	bl	8001e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c88:	ea42 0103 	orr.w	r1, r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0104 	and.w	r1, r3, #4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	f003 0210 	and.w	r2, r3, #16
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e042      	b.n	8004d76 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fd f8dd 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2224      	movs	r2, #36	@ 0x24
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fe6a 	bl	80059fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d112      	bne.n	8004dbe <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_Receive_DMA+0x26>
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e00b      	b.n	8004dc0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	461a      	mov	r2, r3
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fbc1 	bl	800553c <UART_Start_Receive_DMA>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	e000      	b.n	8004dc0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b0ba      	sub	sp, #232	@ 0xe8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_UART_IRQHandler+0x66>
 8004e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fd29 	bl	800587e <UART_Receive_IT>
      return;
 8004e2c:	e25b      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80de 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x22c>
 8004e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80d1 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <HAL_UART_IRQHandler+0xae>
 8004e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f043 0201 	orr.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_UART_IRQHandler+0xd2>
 8004e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	f043 0202 	orr.w	r2, r3, #2
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_UART_IRQHandler+0xf6>
 8004ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d011      	beq.n	8004eee <HAL_UART_IRQHandler+0x126>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d105      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 81f2 	beq.w	80052dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_UART_IRQHandler+0x14e>
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fcb4 	bl	800587e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <HAL_UART_IRQHandler+0x17a>
 8004f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04f      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fbbc 	bl	80056c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f52:	2b40      	cmp	r3, #64	@ 0x40
 8004f54:	d141      	bne.n	8004fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1d9      	bne.n	8004f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d013      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fae:	4a7e      	ldr	r2, [pc, #504]	@ (80051a8 <HAL_UART_IRQHandler+0x3e0>)
 8004fb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe f8c0 	bl	800313c <HAL_DMA_Abort_IT>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d016      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	e00e      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f99e 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd8:	e00a      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f99a 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe0:	e006      	b.n	8004ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f996 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fee:	e175      	b.n	80052dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	bf00      	nop
    return;
 8004ff2:	e173      	b.n	80052dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 814f 	bne.w	800529c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8148 	beq.w	800529c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8141 	beq.w	800529c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	f040 80b6 	bne.w	80051ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800504c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8145 	beq.w	80052e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800505e:	429a      	cmp	r2, r3
 8005060:	f080 813e 	bcs.w	80052e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800506a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005076:	f000 8088 	beq.w	800518a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1d9      	bne.n	800507a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e1      	bne.n	80050c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3314      	adds	r3, #20
 8005108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800512c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e3      	bne.n	8005102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800515a:	f023 0310 	bic.w	r3, r3, #16
 800515e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800516c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800516e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800517a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e3      	bne.n	8005148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd ff69 	bl	800305c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005198:	b29b      	uxth	r3, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8c1 	bl	8005328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051a6:	e09b      	b.n	80052e0 <HAL_UART_IRQHandler+0x518>
 80051a8:	08005787 	.word	0x08005787
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 808e 	beq.w	80052e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8089 	beq.w	80052e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e3      	bne.n	80051d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	623b      	str	r3, [r7, #32]
   return(result);
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800522e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e3      	bne.n	800520a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	69b9      	ldr	r1, [r7, #24]
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	617b      	str	r3, [r7, #20]
   return(result);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e3      	bne.n	8005250 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800528e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f847 	bl	8005328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800529a:	e023      	b.n	80052e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_UART_IRQHandler+0x4f4>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fa7a 	bl	80057ae <UART_Transmit_IT>
    return;
 80052ba:	e014      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <HAL_UART_IRQHandler+0x51e>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 faba 	bl	800584e <UART_EndTransmit_IT>
    return;
 80052da:	e004      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80052dc:	bf00      	nop
 80052de:	e002      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052e4:	bf00      	nop
  }
}
 80052e6:	37e8      	adds	r7, #232	@ 0xe8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b09c      	sub	sp, #112	@ 0x70
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d172      	bne.n	8005442 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800535c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800535e:	2200      	movs	r2, #0
 8005360:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800537a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005382:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005384:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80053ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80053b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e5      	bne.n	8005396 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	623b      	str	r3, [r7, #32]
   return(result);
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005400:	2220      	movs	r2, #32
 8005402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540a:	2b01      	cmp	r3, #1
 800540c:	d119      	bne.n	8005442 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	60fb      	str	r3, [r7, #12]
   return(result);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f023 0310 	bic.w	r3, r3, #16
 8005424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800542e:	61fa      	str	r2, [r7, #28]
 8005430:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	69b9      	ldr	r1, [r7, #24]
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	617b      	str	r3, [r7, #20]
   return(result);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005444:	2200      	movs	r2, #0
 8005446:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800544a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544c:	2b01      	cmp	r3, #1
 800544e:	d106      	bne.n	800545e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005452:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005454:	4619      	mov	r1, r3
 8005456:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005458:	f7ff ff66 	bl	8005328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800545c:	e002      	b.n	8005464 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800545e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005460:	f7fb ff64 	bl	800132c <HAL_UART_RxCpltCallback>
}
 8005464:	bf00      	nop
 8005466:	3770      	adds	r7, #112	@ 0x70
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005478:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005484:	2b01      	cmp	r3, #1
 8005486:	d108      	bne.n	800549a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	4619      	mov	r1, r3
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff ff48 	bl	8005328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005498:	e002      	b.n	80054a0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff ff30 	bl	8005300 <HAL_UART_RxHalfCpltCallback>
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c4:	2b80      	cmp	r3, #128	@ 0x80
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b21      	cmp	r3, #33	@ 0x21
 80054da:	d108      	bne.n	80054ee <UART_DMAError+0x46>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2200      	movs	r2, #0
 80054e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80054e8:	68b8      	ldr	r0, [r7, #8]
 80054ea:	f000 f8c1 	bl	8005670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f8:	2b40      	cmp	r3, #64	@ 0x40
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b22      	cmp	r3, #34	@ 0x22
 800550e:	d108      	bne.n	8005522 <UART_DMAError+0x7a>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2200      	movs	r2, #0
 800551a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800551c:	68b8      	ldr	r0, [r7, #8]
 800551e:	f000 f8cf 	bl	80056c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800552e:	68b8      	ldr	r0, [r7, #8]
 8005530:	f7ff fef0 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b098      	sub	sp, #96	@ 0x60
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2222      	movs	r2, #34	@ 0x22
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005568:	4a3e      	ldr	r2, [pc, #248]	@ (8005664 <UART_Start_Receive_DMA+0x128>)
 800556a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	4a3d      	ldr	r2, [pc, #244]	@ (8005668 <UART_Start_Receive_DMA+0x12c>)
 8005572:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	4a3c      	ldr	r2, [pc, #240]	@ (800566c <UART_Start_Receive_DMA+0x130>)
 800557a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	2200      	movs	r2, #0
 8005582:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	f7fd fd06 	bl	8002fac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d019      	beq.n	80055f2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055de:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80055e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80055e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e5      	bne.n	80055be <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	657b      	str	r3, [r7, #84]	@ 0x54
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005612:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e5      	bne.n	80055f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3314      	adds	r3, #20
 800562c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	617b      	str	r3, [r7, #20]
   return(result);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800563c:	653b      	str	r3, [r7, #80]	@ 0x50
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005646:	627a      	str	r2, [r7, #36]	@ 0x24
 8005648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6a39      	ldr	r1, [r7, #32]
 800564c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	61fb      	str	r3, [r7, #28]
   return(result);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e5      	bne.n	8005626 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3760      	adds	r7, #96	@ 0x60
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	08005341 	.word	0x08005341
 8005668:	0800546d 	.word	0x0800546d
 800566c:	080054a9 	.word	0x080054a9

08005670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b089      	sub	sp, #36	@ 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	60bb      	str	r3, [r7, #8]
   return(result);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	61ba      	str	r2, [r7, #24]
 800569a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6979      	ldr	r1, [r7, #20]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	613b      	str	r3, [r7, #16]
   return(result);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80056b4:	bf00      	nop
 80056b6:	3724      	adds	r7, #36	@ 0x24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b095      	sub	sp, #84	@ 0x54
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	61fb      	str	r3, [r7, #28]
   return(result);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3314      	adds	r3, #20
 800571a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800571c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	d119      	bne.n	800576c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60bb      	str	r3, [r7, #8]
   return(result);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005758:	61ba      	str	r2, [r7, #24]
 800575a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	613b      	str	r3, [r7, #16]
   return(result);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800577a:	bf00      	nop
 800577c:	3754      	adds	r7, #84	@ 0x54
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff fdb7 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b21      	cmp	r3, #33	@ 0x21
 80057c0:	d13e      	bne.n	8005840 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ca:	d114      	bne.n	80057f6 <UART_Transmit_IT+0x48>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d110      	bne.n	80057f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	1c9a      	adds	r2, r3, #2
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]
 80057f4:	e008      	b.n	8005808 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	1c59      	adds	r1, r3, #1
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6211      	str	r1, [r2, #32]
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10f      	bne.n	800583c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800582a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800583a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005864:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fd3c 	bl	80052ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b08c      	sub	sp, #48	@ 0x30
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b22      	cmp	r3, #34	@ 0x22
 8005890:	f040 80ae 	bne.w	80059f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800589c:	d117      	bne.n	80058ce <UART_Receive_IT+0x50>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d113      	bne.n	80058ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	1c9a      	adds	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80058cc:	e026      	b.n	800591c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e0:	d007      	beq.n	80058f2 <UART_Receive_IT+0x74>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <UART_Receive_IT+0x82>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e008      	b.n	8005912 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800590c:	b2da      	uxtb	r2, r3
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29b      	uxth	r3, r3
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4619      	mov	r1, r3
 800592a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800592c:	2b00      	cmp	r3, #0
 800592e:	d15d      	bne.n	80059ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0220 	bic.w	r2, r2, #32
 800593e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800594e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005972:	2b01      	cmp	r3, #1
 8005974:	d135      	bne.n	80059e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	613b      	str	r3, [r7, #16]
   return(result);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599c:	623a      	str	r2, [r7, #32]
 800599e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	69f9      	ldr	r1, [r7, #28]
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d10a      	bne.n	80059d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fca4 	bl	8005328 <HAL_UARTEx_RxEventCallback>
 80059e0:	e002      	b.n	80059e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb fca2 	bl	800132c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e002      	b.n	80059f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3730      	adds	r7, #48	@ 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a00:	b0c0      	sub	sp, #256	@ 0x100
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	68d9      	ldr	r1, [r3, #12]
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	ea40 0301 	orr.w	r3, r0, r1
 8005a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a54:	f021 010c 	bic.w	r1, r1, #12
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a62:	430b      	orrs	r3, r1
 8005a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a76:	6999      	ldr	r1, [r3, #24]
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	ea40 0301 	orr.w	r3, r0, r1
 8005a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc8 <UART_SetConfig+0x2cc>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d005      	beq.n	8005a9c <UART_SetConfig+0xa0>
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b8d      	ldr	r3, [pc, #564]	@ (8005ccc <UART_SetConfig+0x2d0>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d104      	bne.n	8005aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7ff f882 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005aa4:	e003      	b.n	8005aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aa6:	f7ff f869 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab8:	f040 810c 	bne.w	8005cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ade:	4621      	mov	r1, r4
 8005ae0:	eb12 0801 	adds.w	r8, r2, r1
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb43 0901 	adc.w	r9, r3, r1
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005afe:	4690      	mov	r8, r2
 8005b00:	4699      	mov	r9, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	eb18 0303 	adds.w	r3, r8, r3
 8005b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	eb49 0303 	adc.w	r3, r9, r3
 8005b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	18db      	adds	r3, r3, r3
 8005b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b30:	4613      	mov	r3, r2
 8005b32:	eb42 0303 	adc.w	r3, r2, r3
 8005b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b40:	f7fb f88a 	bl	8000c58 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b61      	ldr	r3, [pc, #388]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011c      	lsls	r4, r3, #4
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b74:	4641      	mov	r1, r8
 8005b76:	eb12 0a01 	adds.w	sl, r2, r1
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b94:	4692      	mov	sl, r2
 8005b96:	469b      	mov	fp, r3
 8005b98:	4643      	mov	r3, r8
 8005b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	18db      	adds	r3, r3, r3
 8005bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	eb42 0303 	adc.w	r3, r2, r3
 8005bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bd6:	f7fb f83f 	bl	8000c58 <__aeabi_uldivmod>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005be2:	fba3 2301 	umull	r2, r3, r3, r1
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	2264      	movs	r2, #100	@ 0x64
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	1acb      	subs	r3, r1, r3
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bf6:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c04:	441c      	add	r4, r3
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	1891      	adds	r1, r2, r2
 8005c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c20:	415b      	adcs	r3, r3
 8005c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c28:	4641      	mov	r1, r8
 8005c2a:	1851      	adds	r1, r2, r1
 8005c2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c2e:	4649      	mov	r1, r9
 8005c30:	414b      	adcs	r3, r1
 8005c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c40:	4659      	mov	r1, fp
 8005c42:	00cb      	lsls	r3, r1, #3
 8005c44:	4651      	mov	r1, sl
 8005c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	00ca      	lsls	r2, r1, #3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	4642      	mov	r2, r8
 8005c56:	189b      	adds	r3, r3, r2
 8005c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	460a      	mov	r2, r1
 8005c60:	eb42 0303 	adc.w	r3, r2, r3
 8005c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	18db      	adds	r3, r3, r3
 8005c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c82:	4613      	mov	r3, r2
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c92:	f7fa ffe1 	bl	8000c58 <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	2164      	movs	r1, #100	@ 0x64
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	3332      	adds	r3, #50	@ 0x32
 8005cae:	4a08      	ldr	r2, [pc, #32]	@ (8005cd0 <UART_SetConfig+0x2d4>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	f003 0207 	and.w	r2, r3, #7
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4422      	add	r2, r4
 8005cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cc4:	e106      	b.n	8005ed4 <UART_SetConfig+0x4d8>
 8005cc6:	bf00      	nop
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	6239      	str	r1, [r7, #32]
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	1854      	adds	r4, r2, r1
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	eb43 0501 	adc.w	r5, r3, r1
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	00eb      	lsls	r3, r5, #3
 8005d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0e:	00e2      	lsls	r2, r4, #3
 8005d10:	4614      	mov	r4, r2
 8005d12:	461d      	mov	r5, r3
 8005d14:	4643      	mov	r3, r8
 8005d16:	18e3      	adds	r3, r4, r3
 8005d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	eb45 0303 	adc.w	r3, r5, r3
 8005d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d42:	4629      	mov	r1, r5
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	4621      	mov	r1, r4
 8005d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	008a      	lsls	r2, r1, #2
 8005d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d54:	f7fa ff80 	bl	8000c58 <__aeabi_uldivmod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4b60      	ldr	r3, [pc, #384]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	011c      	lsls	r4, r3, #4
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	61b9      	str	r1, [r7, #24]
 8005d80:	415b      	adcs	r3, r3
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d88:	4641      	mov	r1, r8
 8005d8a:	1851      	adds	r1, r2, r1
 8005d8c:	6139      	str	r1, [r7, #16]
 8005d8e:	4649      	mov	r1, r9
 8005d90:	414b      	adcs	r3, r1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da0:	4659      	mov	r1, fp
 8005da2:	00cb      	lsls	r3, r1, #3
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005daa:	4651      	mov	r1, sl
 8005dac:	00ca      	lsls	r2, r1, #3
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	4642      	mov	r2, r8
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005de0:	4649      	mov	r1, r9
 8005de2:	008b      	lsls	r3, r1, #2
 8005de4:	4641      	mov	r1, r8
 8005de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dea:	4641      	mov	r1, r8
 8005dec:	008a      	lsls	r2, r1, #2
 8005dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005df2:	f7fa ff31 	bl	8000c58 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4b38      	ldr	r3, [pc, #224]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2264      	movs	r2, #100	@ 0x64
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	1acb      	subs	r3, r1, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	@ 0x32
 8005e10:	4a33      	ldr	r2, [pc, #204]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e1c:	441c      	add	r4, r3
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e22:	2200      	movs	r2, #0
 8005e24:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e26:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	1891      	adds	r1, r2, r2
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	415b      	adcs	r3, r3
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	1851      	adds	r1, r2, r1
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	4649      	mov	r1, r9
 8005e44:	414b      	adcs	r3, r1
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e54:	4659      	mov	r1, fp
 8005e56:	00cb      	lsls	r3, r1, #3
 8005e58:	4651      	mov	r1, sl
 8005e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e5e:	4651      	mov	r1, sl
 8005e60:	00ca      	lsls	r2, r1, #3
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	4642      	mov	r2, r8
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e6e:	464b      	mov	r3, r9
 8005e70:	460a      	mov	r2, r1
 8005e72:	eb42 0303 	adc.w	r3, r2, r3
 8005e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e82:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e90:	4649      	mov	r1, r9
 8005e92:	008b      	lsls	r3, r1, #2
 8005e94:	4641      	mov	r1, r8
 8005e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	008a      	lsls	r2, r1, #2
 8005e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ea2:	f7fa fed9 	bl	8000c58 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005eac:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2164      	movs	r1, #100	@ 0x64
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	3332      	adds	r3, #50	@ 0x32
 8005ebe:	4a08      	ldr	r2, [pc, #32]	@ (8005ee0 <UART_SetConfig+0x4e4>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4422      	add	r2, r4
 8005ed2:	609a      	str	r2, [r3, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005eda:	46bd      	mov	sp, r7
 8005edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee0:	51eb851f 	.word	0x51eb851f

08005ee4 <__cvt>:
 8005ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	ec57 6b10 	vmov	r6, r7, d0
 8005eec:	2f00      	cmp	r7, #0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	bfbb      	ittet	lt
 8005ef6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005efa:	461f      	movlt	r7, r3
 8005efc:	2300      	movge	r3, #0
 8005efe:	232d      	movlt	r3, #45	@ 0x2d
 8005f00:	700b      	strb	r3, [r1, #0]
 8005f02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f08:	4691      	mov	r9, r2
 8005f0a:	f023 0820 	bic.w	r8, r3, #32
 8005f0e:	bfbc      	itt	lt
 8005f10:	4632      	movlt	r2, r6
 8005f12:	4616      	movlt	r6, r2
 8005f14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f18:	d005      	beq.n	8005f26 <__cvt+0x42>
 8005f1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f1e:	d100      	bne.n	8005f22 <__cvt+0x3e>
 8005f20:	3401      	adds	r4, #1
 8005f22:	2102      	movs	r1, #2
 8005f24:	e000      	b.n	8005f28 <__cvt+0x44>
 8005f26:	2103      	movs	r1, #3
 8005f28:	ab03      	add	r3, sp, #12
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	ab02      	add	r3, sp, #8
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	ec47 6b10 	vmov	d0, r6, r7
 8005f34:	4653      	mov	r3, sl
 8005f36:	4622      	mov	r2, r4
 8005f38:	f000 fe82 	bl	8006c40 <_dtoa_r>
 8005f3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f40:	4605      	mov	r5, r0
 8005f42:	d119      	bne.n	8005f78 <__cvt+0x94>
 8005f44:	f019 0f01 	tst.w	r9, #1
 8005f48:	d00e      	beq.n	8005f68 <__cvt+0x84>
 8005f4a:	eb00 0904 	add.w	r9, r0, r4
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2300      	movs	r3, #0
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f7fa fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f5a:	b108      	cbz	r0, 8005f60 <__cvt+0x7c>
 8005f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f60:	2230      	movs	r2, #48	@ 0x30
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	454b      	cmp	r3, r9
 8005f66:	d31e      	bcc.n	8005fa6 <__cvt+0xc2>
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f6c:	1b5b      	subs	r3, r3, r5
 8005f6e:	4628      	mov	r0, r5
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	b004      	add	sp, #16
 8005f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f7c:	eb00 0904 	add.w	r9, r0, r4
 8005f80:	d1e5      	bne.n	8005f4e <__cvt+0x6a>
 8005f82:	7803      	ldrb	r3, [r0, #0]
 8005f84:	2b30      	cmp	r3, #48	@ 0x30
 8005f86:	d10a      	bne.n	8005f9e <__cvt+0xba>
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	4639      	mov	r1, r7
 8005f90:	f7fa fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f94:	b918      	cbnz	r0, 8005f9e <__cvt+0xba>
 8005f96:	f1c4 0401 	rsb	r4, r4, #1
 8005f9a:	f8ca 4000 	str.w	r4, [sl]
 8005f9e:	f8da 3000 	ldr.w	r3, [sl]
 8005fa2:	4499      	add	r9, r3
 8005fa4:	e7d3      	b.n	8005f4e <__cvt+0x6a>
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	9103      	str	r1, [sp, #12]
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	e7d9      	b.n	8005f62 <__cvt+0x7e>

08005fae <__exponent>:
 8005fae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	bfba      	itte	lt
 8005fb4:	4249      	neglt	r1, r1
 8005fb6:	232d      	movlt	r3, #45	@ 0x2d
 8005fb8:	232b      	movge	r3, #43	@ 0x2b
 8005fba:	2909      	cmp	r1, #9
 8005fbc:	7002      	strb	r2, [r0, #0]
 8005fbe:	7043      	strb	r3, [r0, #1]
 8005fc0:	dd29      	ble.n	8006016 <__exponent+0x68>
 8005fc2:	f10d 0307 	add.w	r3, sp, #7
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	270a      	movs	r7, #10
 8005fca:	461a      	mov	r2, r3
 8005fcc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fd0:	fb07 1416 	mls	r4, r7, r6, r1
 8005fd4:	3430      	adds	r4, #48	@ 0x30
 8005fd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fda:	460c      	mov	r4, r1
 8005fdc:	2c63      	cmp	r4, #99	@ 0x63
 8005fde:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	dcf1      	bgt.n	8005fca <__exponent+0x1c>
 8005fe6:	3130      	adds	r1, #48	@ 0x30
 8005fe8:	1e94      	subs	r4, r2, #2
 8005fea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fee:	1c41      	adds	r1, r0, #1
 8005ff0:	4623      	mov	r3, r4
 8005ff2:	42ab      	cmp	r3, r5
 8005ff4:	d30a      	bcc.n	800600c <__exponent+0x5e>
 8005ff6:	f10d 0309 	add.w	r3, sp, #9
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ac      	cmp	r4, r5
 8005ffe:	bf88      	it	hi
 8006000:	2300      	movhi	r3, #0
 8006002:	3302      	adds	r3, #2
 8006004:	4403      	add	r3, r0
 8006006:	1a18      	subs	r0, r3, r0
 8006008:	b003      	add	sp, #12
 800600a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800600c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006010:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006014:	e7ed      	b.n	8005ff2 <__exponent+0x44>
 8006016:	2330      	movs	r3, #48	@ 0x30
 8006018:	3130      	adds	r1, #48	@ 0x30
 800601a:	7083      	strb	r3, [r0, #2]
 800601c:	70c1      	strb	r1, [r0, #3]
 800601e:	1d03      	adds	r3, r0, #4
 8006020:	e7f1      	b.n	8006006 <__exponent+0x58>
	...

08006024 <_printf_float>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	b08d      	sub	sp, #52	@ 0x34
 800602a:	460c      	mov	r4, r1
 800602c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006030:	4616      	mov	r6, r2
 8006032:	461f      	mov	r7, r3
 8006034:	4605      	mov	r5, r0
 8006036:	f000 fcf5 	bl	8006a24 <_localeconv_r>
 800603a:	6803      	ldr	r3, [r0, #0]
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa f91e 	bl	8000280 <strlen>
 8006044:	2300      	movs	r3, #0
 8006046:	930a      	str	r3, [sp, #40]	@ 0x28
 8006048:	f8d8 3000 	ldr.w	r3, [r8]
 800604c:	9005      	str	r0, [sp, #20]
 800604e:	3307      	adds	r3, #7
 8006050:	f023 0307 	bic.w	r3, r3, #7
 8006054:	f103 0208 	add.w	r2, r3, #8
 8006058:	f894 a018 	ldrb.w	sl, [r4, #24]
 800605c:	f8d4 b000 	ldr.w	fp, [r4]
 8006060:	f8c8 2000 	str.w	r2, [r8]
 8006064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006068:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800606c:	9307      	str	r3, [sp, #28]
 800606e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006072:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800607a:	4b9c      	ldr	r3, [pc, #624]	@ (80062ec <_printf_float+0x2c8>)
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	f7fa fd5c 	bl	8000b3c <__aeabi_dcmpun>
 8006084:	bb70      	cbnz	r0, 80060e4 <_printf_float+0xc0>
 8006086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800608a:	4b98      	ldr	r3, [pc, #608]	@ (80062ec <_printf_float+0x2c8>)
 800608c:	f04f 32ff 	mov.w	r2, #4294967295
 8006090:	f7fa fd36 	bl	8000b00 <__aeabi_dcmple>
 8006094:	bb30      	cbnz	r0, 80060e4 <_printf_float+0xc0>
 8006096:	2200      	movs	r2, #0
 8006098:	2300      	movs	r3, #0
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	f7fa fd25 	bl	8000aec <__aeabi_dcmplt>
 80060a2:	b110      	cbz	r0, 80060aa <_printf_float+0x86>
 80060a4:	232d      	movs	r3, #45	@ 0x2d
 80060a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060aa:	4a91      	ldr	r2, [pc, #580]	@ (80062f0 <_printf_float+0x2cc>)
 80060ac:	4b91      	ldr	r3, [pc, #580]	@ (80062f4 <_printf_float+0x2d0>)
 80060ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060b2:	bf94      	ite	ls
 80060b4:	4690      	movls	r8, r2
 80060b6:	4698      	movhi	r8, r3
 80060b8:	2303      	movs	r3, #3
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	f02b 0304 	bic.w	r3, fp, #4
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	f04f 0900 	mov.w	r9, #0
 80060c6:	9700      	str	r7, [sp, #0]
 80060c8:	4633      	mov	r3, r6
 80060ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060cc:	4621      	mov	r1, r4
 80060ce:	4628      	mov	r0, r5
 80060d0:	f000 f9d2 	bl	8006478 <_printf_common>
 80060d4:	3001      	adds	r0, #1
 80060d6:	f040 808d 	bne.w	80061f4 <_printf_float+0x1d0>
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	b00d      	add	sp, #52	@ 0x34
 80060e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e4:	4642      	mov	r2, r8
 80060e6:	464b      	mov	r3, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa fd26 	bl	8000b3c <__aeabi_dcmpun>
 80060f0:	b140      	cbz	r0, 8006104 <_printf_float+0xe0>
 80060f2:	464b      	mov	r3, r9
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bfbc      	itt	lt
 80060f8:	232d      	movlt	r3, #45	@ 0x2d
 80060fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060fe:	4a7e      	ldr	r2, [pc, #504]	@ (80062f8 <_printf_float+0x2d4>)
 8006100:	4b7e      	ldr	r3, [pc, #504]	@ (80062fc <_printf_float+0x2d8>)
 8006102:	e7d4      	b.n	80060ae <_printf_float+0x8a>
 8006104:	6863      	ldr	r3, [r4, #4]
 8006106:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800610a:	9206      	str	r2, [sp, #24]
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	d13b      	bne.n	8006188 <_printf_float+0x164>
 8006110:	2306      	movs	r3, #6
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006118:	2300      	movs	r3, #0
 800611a:	6022      	str	r2, [r4, #0]
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006120:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006124:	ab09      	add	r3, sp, #36	@ 0x24
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	6861      	ldr	r1, [r4, #4]
 800612a:	ec49 8b10 	vmov	d0, r8, r9
 800612e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff fed6 	bl	8005ee4 <__cvt>
 8006138:	9b06      	ldr	r3, [sp, #24]
 800613a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800613c:	2b47      	cmp	r3, #71	@ 0x47
 800613e:	4680      	mov	r8, r0
 8006140:	d129      	bne.n	8006196 <_printf_float+0x172>
 8006142:	1cc8      	adds	r0, r1, #3
 8006144:	db02      	blt.n	800614c <_printf_float+0x128>
 8006146:	6863      	ldr	r3, [r4, #4]
 8006148:	4299      	cmp	r1, r3
 800614a:	dd41      	ble.n	80061d0 <_printf_float+0x1ac>
 800614c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006150:	fa5f fa8a 	uxtb.w	sl, sl
 8006154:	3901      	subs	r1, #1
 8006156:	4652      	mov	r2, sl
 8006158:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800615c:	9109      	str	r1, [sp, #36]	@ 0x24
 800615e:	f7ff ff26 	bl	8005fae <__exponent>
 8006162:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006164:	1813      	adds	r3, r2, r0
 8006166:	2a01      	cmp	r2, #1
 8006168:	4681      	mov	r9, r0
 800616a:	6123      	str	r3, [r4, #16]
 800616c:	dc02      	bgt.n	8006174 <_printf_float+0x150>
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	07d2      	lsls	r2, r2, #31
 8006172:	d501      	bpl.n	8006178 <_printf_float+0x154>
 8006174:	3301      	adds	r3, #1
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0a2      	beq.n	80060c6 <_printf_float+0xa2>
 8006180:	232d      	movs	r3, #45	@ 0x2d
 8006182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006186:	e79e      	b.n	80060c6 <_printf_float+0xa2>
 8006188:	9a06      	ldr	r2, [sp, #24]
 800618a:	2a47      	cmp	r2, #71	@ 0x47
 800618c:	d1c2      	bne.n	8006114 <_printf_float+0xf0>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1c0      	bne.n	8006114 <_printf_float+0xf0>
 8006192:	2301      	movs	r3, #1
 8006194:	e7bd      	b.n	8006112 <_printf_float+0xee>
 8006196:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800619a:	d9db      	bls.n	8006154 <_printf_float+0x130>
 800619c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061a0:	d118      	bne.n	80061d4 <_printf_float+0x1b0>
 80061a2:	2900      	cmp	r1, #0
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	dd0b      	ble.n	80061c0 <_printf_float+0x19c>
 80061a8:	6121      	str	r1, [r4, #16]
 80061aa:	b913      	cbnz	r3, 80061b2 <_printf_float+0x18e>
 80061ac:	6822      	ldr	r2, [r4, #0]
 80061ae:	07d0      	lsls	r0, r2, #31
 80061b0:	d502      	bpl.n	80061b8 <_printf_float+0x194>
 80061b2:	3301      	adds	r3, #1
 80061b4:	440b      	add	r3, r1
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061ba:	f04f 0900 	mov.w	r9, #0
 80061be:	e7db      	b.n	8006178 <_printf_float+0x154>
 80061c0:	b913      	cbnz	r3, 80061c8 <_printf_float+0x1a4>
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	07d2      	lsls	r2, r2, #31
 80061c6:	d501      	bpl.n	80061cc <_printf_float+0x1a8>
 80061c8:	3302      	adds	r3, #2
 80061ca:	e7f4      	b.n	80061b6 <_printf_float+0x192>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e7f2      	b.n	80061b6 <_printf_float+0x192>
 80061d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061d6:	4299      	cmp	r1, r3
 80061d8:	db05      	blt.n	80061e6 <_printf_float+0x1c2>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	6121      	str	r1, [r4, #16]
 80061de:	07d8      	lsls	r0, r3, #31
 80061e0:	d5ea      	bpl.n	80061b8 <_printf_float+0x194>
 80061e2:	1c4b      	adds	r3, r1, #1
 80061e4:	e7e7      	b.n	80061b6 <_printf_float+0x192>
 80061e6:	2900      	cmp	r1, #0
 80061e8:	bfd4      	ite	le
 80061ea:	f1c1 0202 	rsble	r2, r1, #2
 80061ee:	2201      	movgt	r2, #1
 80061f0:	4413      	add	r3, r2
 80061f2:	e7e0      	b.n	80061b6 <_printf_float+0x192>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	055a      	lsls	r2, r3, #21
 80061f8:	d407      	bmi.n	800620a <_printf_float+0x1e6>
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	4642      	mov	r2, r8
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d12b      	bne.n	8006260 <_printf_float+0x23c>
 8006208:	e767      	b.n	80060da <_printf_float+0xb6>
 800620a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800620e:	f240 80dd 	bls.w	80063cc <_printf_float+0x3a8>
 8006212:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006216:	2200      	movs	r2, #0
 8006218:	2300      	movs	r3, #0
 800621a:	f7fa fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800621e:	2800      	cmp	r0, #0
 8006220:	d033      	beq.n	800628a <_printf_float+0x266>
 8006222:	4a37      	ldr	r2, [pc, #220]	@ (8006300 <_printf_float+0x2dc>)
 8006224:	2301      	movs	r3, #1
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	f43f af54 	beq.w	80060da <_printf_float+0xb6>
 8006232:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006236:	4543      	cmp	r3, r8
 8006238:	db02      	blt.n	8006240 <_printf_float+0x21c>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	07d8      	lsls	r0, r3, #31
 800623e:	d50f      	bpl.n	8006260 <_printf_float+0x23c>
 8006240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	f43f af45 	beq.w	80060da <_printf_float+0xb6>
 8006250:	f04f 0900 	mov.w	r9, #0
 8006254:	f108 38ff 	add.w	r8, r8, #4294967295
 8006258:	f104 0a1a 	add.w	sl, r4, #26
 800625c:	45c8      	cmp	r8, r9
 800625e:	dc09      	bgt.n	8006274 <_printf_float+0x250>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	079b      	lsls	r3, r3, #30
 8006264:	f100 8103 	bmi.w	800646e <_printf_float+0x44a>
 8006268:	68e0      	ldr	r0, [r4, #12]
 800626a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800626c:	4298      	cmp	r0, r3
 800626e:	bfb8      	it	lt
 8006270:	4618      	movlt	r0, r3
 8006272:	e734      	b.n	80060de <_printf_float+0xba>
 8006274:	2301      	movs	r3, #1
 8006276:	4652      	mov	r2, sl
 8006278:	4631      	mov	r1, r6
 800627a:	4628      	mov	r0, r5
 800627c:	47b8      	blx	r7
 800627e:	3001      	adds	r0, #1
 8006280:	f43f af2b 	beq.w	80060da <_printf_float+0xb6>
 8006284:	f109 0901 	add.w	r9, r9, #1
 8006288:	e7e8      	b.n	800625c <_printf_float+0x238>
 800628a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800628c:	2b00      	cmp	r3, #0
 800628e:	dc39      	bgt.n	8006304 <_printf_float+0x2e0>
 8006290:	4a1b      	ldr	r2, [pc, #108]	@ (8006300 <_printf_float+0x2dc>)
 8006292:	2301      	movs	r3, #1
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	f43f af1d 	beq.w	80060da <_printf_float+0xb6>
 80062a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062a4:	ea59 0303 	orrs.w	r3, r9, r3
 80062a8:	d102      	bne.n	80062b0 <_printf_float+0x28c>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	07d9      	lsls	r1, r3, #31
 80062ae:	d5d7      	bpl.n	8006260 <_printf_float+0x23c>
 80062b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	f43f af0d 	beq.w	80060da <_printf_float+0xb6>
 80062c0:	f04f 0a00 	mov.w	sl, #0
 80062c4:	f104 0b1a 	add.w	fp, r4, #26
 80062c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ca:	425b      	negs	r3, r3
 80062cc:	4553      	cmp	r3, sl
 80062ce:	dc01      	bgt.n	80062d4 <_printf_float+0x2b0>
 80062d0:	464b      	mov	r3, r9
 80062d2:	e793      	b.n	80061fc <_printf_float+0x1d8>
 80062d4:	2301      	movs	r3, #1
 80062d6:	465a      	mov	r2, fp
 80062d8:	4631      	mov	r1, r6
 80062da:	4628      	mov	r0, r5
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	f43f aefb 	beq.w	80060da <_printf_float+0xb6>
 80062e4:	f10a 0a01 	add.w	sl, sl, #1
 80062e8:	e7ee      	b.n	80062c8 <_printf_float+0x2a4>
 80062ea:	bf00      	nop
 80062ec:	7fefffff 	.word	0x7fefffff
 80062f0:	080093b0 	.word	0x080093b0
 80062f4:	080093b4 	.word	0x080093b4
 80062f8:	080093b8 	.word	0x080093b8
 80062fc:	080093bc 	.word	0x080093bc
 8006300:	080093c0 	.word	0x080093c0
 8006304:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006306:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800630a:	4553      	cmp	r3, sl
 800630c:	bfa8      	it	ge
 800630e:	4653      	movge	r3, sl
 8006310:	2b00      	cmp	r3, #0
 8006312:	4699      	mov	r9, r3
 8006314:	dc36      	bgt.n	8006384 <_printf_float+0x360>
 8006316:	f04f 0b00 	mov.w	fp, #0
 800631a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800631e:	f104 021a 	add.w	r2, r4, #26
 8006322:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006324:	9306      	str	r3, [sp, #24]
 8006326:	eba3 0309 	sub.w	r3, r3, r9
 800632a:	455b      	cmp	r3, fp
 800632c:	dc31      	bgt.n	8006392 <_printf_float+0x36e>
 800632e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006330:	459a      	cmp	sl, r3
 8006332:	dc3a      	bgt.n	80063aa <_printf_float+0x386>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	07da      	lsls	r2, r3, #31
 8006338:	d437      	bmi.n	80063aa <_printf_float+0x386>
 800633a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633c:	ebaa 0903 	sub.w	r9, sl, r3
 8006340:	9b06      	ldr	r3, [sp, #24]
 8006342:	ebaa 0303 	sub.w	r3, sl, r3
 8006346:	4599      	cmp	r9, r3
 8006348:	bfa8      	it	ge
 800634a:	4699      	movge	r9, r3
 800634c:	f1b9 0f00 	cmp.w	r9, #0
 8006350:	dc33      	bgt.n	80063ba <_printf_float+0x396>
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800635a:	f104 0b1a 	add.w	fp, r4, #26
 800635e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006360:	ebaa 0303 	sub.w	r3, sl, r3
 8006364:	eba3 0309 	sub.w	r3, r3, r9
 8006368:	4543      	cmp	r3, r8
 800636a:	f77f af79 	ble.w	8006260 <_printf_float+0x23c>
 800636e:	2301      	movs	r3, #1
 8006370:	465a      	mov	r2, fp
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	f43f aeae 	beq.w	80060da <_printf_float+0xb6>
 800637e:	f108 0801 	add.w	r8, r8, #1
 8006382:	e7ec      	b.n	800635e <_printf_float+0x33a>
 8006384:	4642      	mov	r2, r8
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	d1c2      	bne.n	8006316 <_printf_float+0x2f2>
 8006390:	e6a3      	b.n	80060da <_printf_float+0xb6>
 8006392:	2301      	movs	r3, #1
 8006394:	4631      	mov	r1, r6
 8006396:	4628      	mov	r0, r5
 8006398:	9206      	str	r2, [sp, #24]
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae9c 	beq.w	80060da <_printf_float+0xb6>
 80063a2:	9a06      	ldr	r2, [sp, #24]
 80063a4:	f10b 0b01 	add.w	fp, fp, #1
 80063a8:	e7bb      	b.n	8006322 <_printf_float+0x2fe>
 80063aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	d1c0      	bne.n	800633a <_printf_float+0x316>
 80063b8:	e68f      	b.n	80060da <_printf_float+0xb6>
 80063ba:	9a06      	ldr	r2, [sp, #24]
 80063bc:	464b      	mov	r3, r9
 80063be:	4442      	add	r2, r8
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	d1c3      	bne.n	8006352 <_printf_float+0x32e>
 80063ca:	e686      	b.n	80060da <_printf_float+0xb6>
 80063cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063d0:	f1ba 0f01 	cmp.w	sl, #1
 80063d4:	dc01      	bgt.n	80063da <_printf_float+0x3b6>
 80063d6:	07db      	lsls	r3, r3, #31
 80063d8:	d536      	bpl.n	8006448 <_printf_float+0x424>
 80063da:	2301      	movs	r3, #1
 80063dc:	4642      	mov	r2, r8
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	f43f ae78 	beq.w	80060da <_printf_float+0xb6>
 80063ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f ae70 	beq.w	80060da <_printf_float+0xb6>
 80063fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063fe:	2200      	movs	r2, #0
 8006400:	2300      	movs	r3, #0
 8006402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006406:	f7fa fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800640a:	b9c0      	cbnz	r0, 800643e <_printf_float+0x41a>
 800640c:	4653      	mov	r3, sl
 800640e:	f108 0201 	add.w	r2, r8, #1
 8006412:	4631      	mov	r1, r6
 8006414:	4628      	mov	r0, r5
 8006416:	47b8      	blx	r7
 8006418:	3001      	adds	r0, #1
 800641a:	d10c      	bne.n	8006436 <_printf_float+0x412>
 800641c:	e65d      	b.n	80060da <_printf_float+0xb6>
 800641e:	2301      	movs	r3, #1
 8006420:	465a      	mov	r2, fp
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	f43f ae56 	beq.w	80060da <_printf_float+0xb6>
 800642e:	f108 0801 	add.w	r8, r8, #1
 8006432:	45d0      	cmp	r8, sl
 8006434:	dbf3      	blt.n	800641e <_printf_float+0x3fa>
 8006436:	464b      	mov	r3, r9
 8006438:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800643c:	e6df      	b.n	80061fe <_printf_float+0x1da>
 800643e:	f04f 0800 	mov.w	r8, #0
 8006442:	f104 0b1a 	add.w	fp, r4, #26
 8006446:	e7f4      	b.n	8006432 <_printf_float+0x40e>
 8006448:	2301      	movs	r3, #1
 800644a:	4642      	mov	r2, r8
 800644c:	e7e1      	b.n	8006412 <_printf_float+0x3ee>
 800644e:	2301      	movs	r3, #1
 8006450:	464a      	mov	r2, r9
 8006452:	4631      	mov	r1, r6
 8006454:	4628      	mov	r0, r5
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	f43f ae3e 	beq.w	80060da <_printf_float+0xb6>
 800645e:	f108 0801 	add.w	r8, r8, #1
 8006462:	68e3      	ldr	r3, [r4, #12]
 8006464:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006466:	1a5b      	subs	r3, r3, r1
 8006468:	4543      	cmp	r3, r8
 800646a:	dcf0      	bgt.n	800644e <_printf_float+0x42a>
 800646c:	e6fc      	b.n	8006268 <_printf_float+0x244>
 800646e:	f04f 0800 	mov.w	r8, #0
 8006472:	f104 0919 	add.w	r9, r4, #25
 8006476:	e7f4      	b.n	8006462 <_printf_float+0x43e>

08006478 <_printf_common>:
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	4616      	mov	r6, r2
 800647e:	4698      	mov	r8, r3
 8006480:	688a      	ldr	r2, [r1, #8]
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006488:	4293      	cmp	r3, r2
 800648a:	bfb8      	it	lt
 800648c:	4613      	movlt	r3, r2
 800648e:	6033      	str	r3, [r6, #0]
 8006490:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006494:	4607      	mov	r7, r0
 8006496:	460c      	mov	r4, r1
 8006498:	b10a      	cbz	r2, 800649e <_printf_common+0x26>
 800649a:	3301      	adds	r3, #1
 800649c:	6033      	str	r3, [r6, #0]
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	0699      	lsls	r1, r3, #26
 80064a2:	bf42      	ittt	mi
 80064a4:	6833      	ldrmi	r3, [r6, #0]
 80064a6:	3302      	addmi	r3, #2
 80064a8:	6033      	strmi	r3, [r6, #0]
 80064aa:	6825      	ldr	r5, [r4, #0]
 80064ac:	f015 0506 	ands.w	r5, r5, #6
 80064b0:	d106      	bne.n	80064c0 <_printf_common+0x48>
 80064b2:	f104 0a19 	add.w	sl, r4, #25
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	6832      	ldr	r2, [r6, #0]
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dc26      	bgt.n	800650e <_printf_common+0x96>
 80064c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	3b00      	subs	r3, #0
 80064c8:	bf18      	it	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	0692      	lsls	r2, r2, #26
 80064ce:	d42b      	bmi.n	8006528 <_printf_common+0xb0>
 80064d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064d4:	4641      	mov	r1, r8
 80064d6:	4638      	mov	r0, r7
 80064d8:	47c8      	blx	r9
 80064da:	3001      	adds	r0, #1
 80064dc:	d01e      	beq.n	800651c <_printf_common+0xa4>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	6922      	ldr	r2, [r4, #16]
 80064e2:	f003 0306 	and.w	r3, r3, #6
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	bf02      	ittt	eq
 80064ea:	68e5      	ldreq	r5, [r4, #12]
 80064ec:	6833      	ldreq	r3, [r6, #0]
 80064ee:	1aed      	subeq	r5, r5, r3
 80064f0:	68a3      	ldr	r3, [r4, #8]
 80064f2:	bf0c      	ite	eq
 80064f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064f8:	2500      	movne	r5, #0
 80064fa:	4293      	cmp	r3, r2
 80064fc:	bfc4      	itt	gt
 80064fe:	1a9b      	subgt	r3, r3, r2
 8006500:	18ed      	addgt	r5, r5, r3
 8006502:	2600      	movs	r6, #0
 8006504:	341a      	adds	r4, #26
 8006506:	42b5      	cmp	r5, r6
 8006508:	d11a      	bne.n	8006540 <_printf_common+0xc8>
 800650a:	2000      	movs	r0, #0
 800650c:	e008      	b.n	8006520 <_printf_common+0xa8>
 800650e:	2301      	movs	r3, #1
 8006510:	4652      	mov	r2, sl
 8006512:	4641      	mov	r1, r8
 8006514:	4638      	mov	r0, r7
 8006516:	47c8      	blx	r9
 8006518:	3001      	adds	r0, #1
 800651a:	d103      	bne.n	8006524 <_printf_common+0xac>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006524:	3501      	adds	r5, #1
 8006526:	e7c6      	b.n	80064b6 <_printf_common+0x3e>
 8006528:	18e1      	adds	r1, r4, r3
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	2030      	movs	r0, #48	@ 0x30
 800652e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006532:	4422      	add	r2, r4
 8006534:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800653c:	3302      	adds	r3, #2
 800653e:	e7c7      	b.n	80064d0 <_printf_common+0x58>
 8006540:	2301      	movs	r3, #1
 8006542:	4622      	mov	r2, r4
 8006544:	4641      	mov	r1, r8
 8006546:	4638      	mov	r0, r7
 8006548:	47c8      	blx	r9
 800654a:	3001      	adds	r0, #1
 800654c:	d0e6      	beq.n	800651c <_printf_common+0xa4>
 800654e:	3601      	adds	r6, #1
 8006550:	e7d9      	b.n	8006506 <_printf_common+0x8e>
	...

08006554 <_printf_i>:
 8006554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	7e0f      	ldrb	r7, [r1, #24]
 800655a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800655c:	2f78      	cmp	r7, #120	@ 0x78
 800655e:	4691      	mov	r9, r2
 8006560:	4680      	mov	r8, r0
 8006562:	460c      	mov	r4, r1
 8006564:	469a      	mov	sl, r3
 8006566:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800656a:	d807      	bhi.n	800657c <_printf_i+0x28>
 800656c:	2f62      	cmp	r7, #98	@ 0x62
 800656e:	d80a      	bhi.n	8006586 <_printf_i+0x32>
 8006570:	2f00      	cmp	r7, #0
 8006572:	f000 80d2 	beq.w	800671a <_printf_i+0x1c6>
 8006576:	2f58      	cmp	r7, #88	@ 0x58
 8006578:	f000 80b9 	beq.w	80066ee <_printf_i+0x19a>
 800657c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006580:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006584:	e03a      	b.n	80065fc <_printf_i+0xa8>
 8006586:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800658a:	2b15      	cmp	r3, #21
 800658c:	d8f6      	bhi.n	800657c <_printf_i+0x28>
 800658e:	a101      	add	r1, pc, #4	@ (adr r1, 8006594 <_printf_i+0x40>)
 8006590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006594:	080065ed 	.word	0x080065ed
 8006598:	08006601 	.word	0x08006601
 800659c:	0800657d 	.word	0x0800657d
 80065a0:	0800657d 	.word	0x0800657d
 80065a4:	0800657d 	.word	0x0800657d
 80065a8:	0800657d 	.word	0x0800657d
 80065ac:	08006601 	.word	0x08006601
 80065b0:	0800657d 	.word	0x0800657d
 80065b4:	0800657d 	.word	0x0800657d
 80065b8:	0800657d 	.word	0x0800657d
 80065bc:	0800657d 	.word	0x0800657d
 80065c0:	08006701 	.word	0x08006701
 80065c4:	0800662b 	.word	0x0800662b
 80065c8:	080066bb 	.word	0x080066bb
 80065cc:	0800657d 	.word	0x0800657d
 80065d0:	0800657d 	.word	0x0800657d
 80065d4:	08006723 	.word	0x08006723
 80065d8:	0800657d 	.word	0x0800657d
 80065dc:	0800662b 	.word	0x0800662b
 80065e0:	0800657d 	.word	0x0800657d
 80065e4:	0800657d 	.word	0x0800657d
 80065e8:	080066c3 	.word	0x080066c3
 80065ec:	6833      	ldr	r3, [r6, #0]
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6032      	str	r2, [r6, #0]
 80065f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065fc:	2301      	movs	r3, #1
 80065fe:	e09d      	b.n	800673c <_printf_i+0x1e8>
 8006600:	6833      	ldr	r3, [r6, #0]
 8006602:	6820      	ldr	r0, [r4, #0]
 8006604:	1d19      	adds	r1, r3, #4
 8006606:	6031      	str	r1, [r6, #0]
 8006608:	0606      	lsls	r6, r0, #24
 800660a:	d501      	bpl.n	8006610 <_printf_i+0xbc>
 800660c:	681d      	ldr	r5, [r3, #0]
 800660e:	e003      	b.n	8006618 <_printf_i+0xc4>
 8006610:	0645      	lsls	r5, r0, #25
 8006612:	d5fb      	bpl.n	800660c <_printf_i+0xb8>
 8006614:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006618:	2d00      	cmp	r5, #0
 800661a:	da03      	bge.n	8006624 <_printf_i+0xd0>
 800661c:	232d      	movs	r3, #45	@ 0x2d
 800661e:	426d      	negs	r5, r5
 8006620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006624:	4859      	ldr	r0, [pc, #356]	@ (800678c <_printf_i+0x238>)
 8006626:	230a      	movs	r3, #10
 8006628:	e011      	b.n	800664e <_printf_i+0xfa>
 800662a:	6821      	ldr	r1, [r4, #0]
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	0608      	lsls	r0, r1, #24
 8006630:	f853 5b04 	ldr.w	r5, [r3], #4
 8006634:	d402      	bmi.n	800663c <_printf_i+0xe8>
 8006636:	0649      	lsls	r1, r1, #25
 8006638:	bf48      	it	mi
 800663a:	b2ad      	uxthmi	r5, r5
 800663c:	2f6f      	cmp	r7, #111	@ 0x6f
 800663e:	4853      	ldr	r0, [pc, #332]	@ (800678c <_printf_i+0x238>)
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	bf14      	ite	ne
 8006644:	230a      	movne	r3, #10
 8006646:	2308      	moveq	r3, #8
 8006648:	2100      	movs	r1, #0
 800664a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800664e:	6866      	ldr	r6, [r4, #4]
 8006650:	60a6      	str	r6, [r4, #8]
 8006652:	2e00      	cmp	r6, #0
 8006654:	bfa2      	ittt	ge
 8006656:	6821      	ldrge	r1, [r4, #0]
 8006658:	f021 0104 	bicge.w	r1, r1, #4
 800665c:	6021      	strge	r1, [r4, #0]
 800665e:	b90d      	cbnz	r5, 8006664 <_printf_i+0x110>
 8006660:	2e00      	cmp	r6, #0
 8006662:	d04b      	beq.n	80066fc <_printf_i+0x1a8>
 8006664:	4616      	mov	r6, r2
 8006666:	fbb5 f1f3 	udiv	r1, r5, r3
 800666a:	fb03 5711 	mls	r7, r3, r1, r5
 800666e:	5dc7      	ldrb	r7, [r0, r7]
 8006670:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006674:	462f      	mov	r7, r5
 8006676:	42bb      	cmp	r3, r7
 8006678:	460d      	mov	r5, r1
 800667a:	d9f4      	bls.n	8006666 <_printf_i+0x112>
 800667c:	2b08      	cmp	r3, #8
 800667e:	d10b      	bne.n	8006698 <_printf_i+0x144>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	07df      	lsls	r7, r3, #31
 8006684:	d508      	bpl.n	8006698 <_printf_i+0x144>
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	6861      	ldr	r1, [r4, #4]
 800668a:	4299      	cmp	r1, r3
 800668c:	bfde      	ittt	le
 800668e:	2330      	movle	r3, #48	@ 0x30
 8006690:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006694:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006698:	1b92      	subs	r2, r2, r6
 800669a:	6122      	str	r2, [r4, #16]
 800669c:	f8cd a000 	str.w	sl, [sp]
 80066a0:	464b      	mov	r3, r9
 80066a2:	aa03      	add	r2, sp, #12
 80066a4:	4621      	mov	r1, r4
 80066a6:	4640      	mov	r0, r8
 80066a8:	f7ff fee6 	bl	8006478 <_printf_common>
 80066ac:	3001      	adds	r0, #1
 80066ae:	d14a      	bne.n	8006746 <_printf_i+0x1f2>
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	b004      	add	sp, #16
 80066b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	f043 0320 	orr.w	r3, r3, #32
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	4833      	ldr	r0, [pc, #204]	@ (8006790 <_printf_i+0x23c>)
 80066c4:	2778      	movs	r7, #120	@ 0x78
 80066c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	6831      	ldr	r1, [r6, #0]
 80066ce:	061f      	lsls	r7, r3, #24
 80066d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80066d4:	d402      	bmi.n	80066dc <_printf_i+0x188>
 80066d6:	065f      	lsls	r7, r3, #25
 80066d8:	bf48      	it	mi
 80066da:	b2ad      	uxthmi	r5, r5
 80066dc:	6031      	str	r1, [r6, #0]
 80066de:	07d9      	lsls	r1, r3, #31
 80066e0:	bf44      	itt	mi
 80066e2:	f043 0320 	orrmi.w	r3, r3, #32
 80066e6:	6023      	strmi	r3, [r4, #0]
 80066e8:	b11d      	cbz	r5, 80066f2 <_printf_i+0x19e>
 80066ea:	2310      	movs	r3, #16
 80066ec:	e7ac      	b.n	8006648 <_printf_i+0xf4>
 80066ee:	4827      	ldr	r0, [pc, #156]	@ (800678c <_printf_i+0x238>)
 80066f0:	e7e9      	b.n	80066c6 <_printf_i+0x172>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	f023 0320 	bic.w	r3, r3, #32
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	e7f6      	b.n	80066ea <_printf_i+0x196>
 80066fc:	4616      	mov	r6, r2
 80066fe:	e7bd      	b.n	800667c <_printf_i+0x128>
 8006700:	6833      	ldr	r3, [r6, #0]
 8006702:	6825      	ldr	r5, [r4, #0]
 8006704:	6961      	ldr	r1, [r4, #20]
 8006706:	1d18      	adds	r0, r3, #4
 8006708:	6030      	str	r0, [r6, #0]
 800670a:	062e      	lsls	r6, r5, #24
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	d501      	bpl.n	8006714 <_printf_i+0x1c0>
 8006710:	6019      	str	r1, [r3, #0]
 8006712:	e002      	b.n	800671a <_printf_i+0x1c6>
 8006714:	0668      	lsls	r0, r5, #25
 8006716:	d5fb      	bpl.n	8006710 <_printf_i+0x1bc>
 8006718:	8019      	strh	r1, [r3, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	4616      	mov	r6, r2
 8006720:	e7bc      	b.n	800669c <_printf_i+0x148>
 8006722:	6833      	ldr	r3, [r6, #0]
 8006724:	1d1a      	adds	r2, r3, #4
 8006726:	6032      	str	r2, [r6, #0]
 8006728:	681e      	ldr	r6, [r3, #0]
 800672a:	6862      	ldr	r2, [r4, #4]
 800672c:	2100      	movs	r1, #0
 800672e:	4630      	mov	r0, r6
 8006730:	f7f9 fd56 	bl	80001e0 <memchr>
 8006734:	b108      	cbz	r0, 800673a <_printf_i+0x1e6>
 8006736:	1b80      	subs	r0, r0, r6
 8006738:	6060      	str	r0, [r4, #4]
 800673a:	6863      	ldr	r3, [r4, #4]
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	2300      	movs	r3, #0
 8006740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006744:	e7aa      	b.n	800669c <_printf_i+0x148>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	4632      	mov	r2, r6
 800674a:	4649      	mov	r1, r9
 800674c:	4640      	mov	r0, r8
 800674e:	47d0      	blx	sl
 8006750:	3001      	adds	r0, #1
 8006752:	d0ad      	beq.n	80066b0 <_printf_i+0x15c>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	079b      	lsls	r3, r3, #30
 8006758:	d413      	bmi.n	8006782 <_printf_i+0x22e>
 800675a:	68e0      	ldr	r0, [r4, #12]
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	4298      	cmp	r0, r3
 8006760:	bfb8      	it	lt
 8006762:	4618      	movlt	r0, r3
 8006764:	e7a6      	b.n	80066b4 <_printf_i+0x160>
 8006766:	2301      	movs	r3, #1
 8006768:	4632      	mov	r2, r6
 800676a:	4649      	mov	r1, r9
 800676c:	4640      	mov	r0, r8
 800676e:	47d0      	blx	sl
 8006770:	3001      	adds	r0, #1
 8006772:	d09d      	beq.n	80066b0 <_printf_i+0x15c>
 8006774:	3501      	adds	r5, #1
 8006776:	68e3      	ldr	r3, [r4, #12]
 8006778:	9903      	ldr	r1, [sp, #12]
 800677a:	1a5b      	subs	r3, r3, r1
 800677c:	42ab      	cmp	r3, r5
 800677e:	dcf2      	bgt.n	8006766 <_printf_i+0x212>
 8006780:	e7eb      	b.n	800675a <_printf_i+0x206>
 8006782:	2500      	movs	r5, #0
 8006784:	f104 0619 	add.w	r6, r4, #25
 8006788:	e7f5      	b.n	8006776 <_printf_i+0x222>
 800678a:	bf00      	nop
 800678c:	080093c2 	.word	0x080093c2
 8006790:	080093d3 	.word	0x080093d3

08006794 <std>:
 8006794:	2300      	movs	r3, #0
 8006796:	b510      	push	{r4, lr}
 8006798:	4604      	mov	r4, r0
 800679a:	e9c0 3300 	strd	r3, r3, [r0]
 800679e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067a2:	6083      	str	r3, [r0, #8]
 80067a4:	8181      	strh	r1, [r0, #12]
 80067a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80067a8:	81c2      	strh	r2, [r0, #14]
 80067aa:	6183      	str	r3, [r0, #24]
 80067ac:	4619      	mov	r1, r3
 80067ae:	2208      	movs	r2, #8
 80067b0:	305c      	adds	r0, #92	@ 0x5c
 80067b2:	f000 f92e 	bl	8006a12 <memset>
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <std+0x58>)
 80067b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <std+0x5c>)
 80067bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <std+0x60>)
 80067c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067c2:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <std+0x64>)
 80067c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80067c6:	4b0d      	ldr	r3, [pc, #52]	@ (80067fc <std+0x68>)
 80067c8:	6224      	str	r4, [r4, #32]
 80067ca:	429c      	cmp	r4, r3
 80067cc:	d006      	beq.n	80067dc <std+0x48>
 80067ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067d2:	4294      	cmp	r4, r2
 80067d4:	d002      	beq.n	80067dc <std+0x48>
 80067d6:	33d0      	adds	r3, #208	@ 0xd0
 80067d8:	429c      	cmp	r4, r3
 80067da:	d105      	bne.n	80067e8 <std+0x54>
 80067dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e4:	f000 b992 	b.w	8006b0c <__retarget_lock_init_recursive>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	08006959 	.word	0x08006959
 80067f0:	0800697b 	.word	0x0800697b
 80067f4:	080069b3 	.word	0x080069b3
 80067f8:	080069d7 	.word	0x080069d7
 80067fc:	20000974 	.word	0x20000974

08006800 <stdio_exit_handler>:
 8006800:	4a02      	ldr	r2, [pc, #8]	@ (800680c <stdio_exit_handler+0xc>)
 8006802:	4903      	ldr	r1, [pc, #12]	@ (8006810 <stdio_exit_handler+0x10>)
 8006804:	4803      	ldr	r0, [pc, #12]	@ (8006814 <stdio_exit_handler+0x14>)
 8006806:	f000 b869 	b.w	80068dc <_fwalk_sglue>
 800680a:	bf00      	nop
 800680c:	20000014 	.word	0x20000014
 8006810:	08008485 	.word	0x08008485
 8006814:	20000024 	.word	0x20000024

08006818 <cleanup_stdio>:
 8006818:	6841      	ldr	r1, [r0, #4]
 800681a:	4b0c      	ldr	r3, [pc, #48]	@ (800684c <cleanup_stdio+0x34>)
 800681c:	4299      	cmp	r1, r3
 800681e:	b510      	push	{r4, lr}
 8006820:	4604      	mov	r4, r0
 8006822:	d001      	beq.n	8006828 <cleanup_stdio+0x10>
 8006824:	f001 fe2e 	bl	8008484 <_fflush_r>
 8006828:	68a1      	ldr	r1, [r4, #8]
 800682a:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <cleanup_stdio+0x38>)
 800682c:	4299      	cmp	r1, r3
 800682e:	d002      	beq.n	8006836 <cleanup_stdio+0x1e>
 8006830:	4620      	mov	r0, r4
 8006832:	f001 fe27 	bl	8008484 <_fflush_r>
 8006836:	68e1      	ldr	r1, [r4, #12]
 8006838:	4b06      	ldr	r3, [pc, #24]	@ (8006854 <cleanup_stdio+0x3c>)
 800683a:	4299      	cmp	r1, r3
 800683c:	d004      	beq.n	8006848 <cleanup_stdio+0x30>
 800683e:	4620      	mov	r0, r4
 8006840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006844:	f001 be1e 	b.w	8008484 <_fflush_r>
 8006848:	bd10      	pop	{r4, pc}
 800684a:	bf00      	nop
 800684c:	20000974 	.word	0x20000974
 8006850:	200009dc 	.word	0x200009dc
 8006854:	20000a44 	.word	0x20000a44

08006858 <global_stdio_init.part.0>:
 8006858:	b510      	push	{r4, lr}
 800685a:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <global_stdio_init.part.0+0x30>)
 800685c:	4c0b      	ldr	r4, [pc, #44]	@ (800688c <global_stdio_init.part.0+0x34>)
 800685e:	4a0c      	ldr	r2, [pc, #48]	@ (8006890 <global_stdio_init.part.0+0x38>)
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	4620      	mov	r0, r4
 8006864:	2200      	movs	r2, #0
 8006866:	2104      	movs	r1, #4
 8006868:	f7ff ff94 	bl	8006794 <std>
 800686c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006870:	2201      	movs	r2, #1
 8006872:	2109      	movs	r1, #9
 8006874:	f7ff ff8e 	bl	8006794 <std>
 8006878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800687c:	2202      	movs	r2, #2
 800687e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006882:	2112      	movs	r1, #18
 8006884:	f7ff bf86 	b.w	8006794 <std>
 8006888:	20000aac 	.word	0x20000aac
 800688c:	20000974 	.word	0x20000974
 8006890:	08006801 	.word	0x08006801

08006894 <__sfp_lock_acquire>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__sfp_lock_acquire+0x8>)
 8006896:	f000 b93a 	b.w	8006b0e <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	20000ab5 	.word	0x20000ab5

080068a0 <__sfp_lock_release>:
 80068a0:	4801      	ldr	r0, [pc, #4]	@ (80068a8 <__sfp_lock_release+0x8>)
 80068a2:	f000 b935 	b.w	8006b10 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	20000ab5 	.word	0x20000ab5

080068ac <__sinit>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	f7ff fff0 	bl	8006894 <__sfp_lock_acquire>
 80068b4:	6a23      	ldr	r3, [r4, #32]
 80068b6:	b11b      	cbz	r3, 80068c0 <__sinit+0x14>
 80068b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068bc:	f7ff bff0 	b.w	80068a0 <__sfp_lock_release>
 80068c0:	4b04      	ldr	r3, [pc, #16]	@ (80068d4 <__sinit+0x28>)
 80068c2:	6223      	str	r3, [r4, #32]
 80068c4:	4b04      	ldr	r3, [pc, #16]	@ (80068d8 <__sinit+0x2c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f5      	bne.n	80068b8 <__sinit+0xc>
 80068cc:	f7ff ffc4 	bl	8006858 <global_stdio_init.part.0>
 80068d0:	e7f2      	b.n	80068b8 <__sinit+0xc>
 80068d2:	bf00      	nop
 80068d4:	08006819 	.word	0x08006819
 80068d8:	20000aac 	.word	0x20000aac

080068dc <_fwalk_sglue>:
 80068dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e0:	4607      	mov	r7, r0
 80068e2:	4688      	mov	r8, r1
 80068e4:	4614      	mov	r4, r2
 80068e6:	2600      	movs	r6, #0
 80068e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068ec:	f1b9 0901 	subs.w	r9, r9, #1
 80068f0:	d505      	bpl.n	80068fe <_fwalk_sglue+0x22>
 80068f2:	6824      	ldr	r4, [r4, #0]
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	d1f7      	bne.n	80068e8 <_fwalk_sglue+0xc>
 80068f8:	4630      	mov	r0, r6
 80068fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d907      	bls.n	8006914 <_fwalk_sglue+0x38>
 8006904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006908:	3301      	adds	r3, #1
 800690a:	d003      	beq.n	8006914 <_fwalk_sglue+0x38>
 800690c:	4629      	mov	r1, r5
 800690e:	4638      	mov	r0, r7
 8006910:	47c0      	blx	r8
 8006912:	4306      	orrs	r6, r0
 8006914:	3568      	adds	r5, #104	@ 0x68
 8006916:	e7e9      	b.n	80068ec <_fwalk_sglue+0x10>

08006918 <siprintf>:
 8006918:	b40e      	push	{r1, r2, r3}
 800691a:	b500      	push	{lr}
 800691c:	b09c      	sub	sp, #112	@ 0x70
 800691e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006920:	9002      	str	r0, [sp, #8]
 8006922:	9006      	str	r0, [sp, #24]
 8006924:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006928:	4809      	ldr	r0, [pc, #36]	@ (8006950 <siprintf+0x38>)
 800692a:	9107      	str	r1, [sp, #28]
 800692c:	9104      	str	r1, [sp, #16]
 800692e:	4909      	ldr	r1, [pc, #36]	@ (8006954 <siprintf+0x3c>)
 8006930:	f853 2b04 	ldr.w	r2, [r3], #4
 8006934:	9105      	str	r1, [sp, #20]
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	a902      	add	r1, sp, #8
 800693c:	f001 fc22 	bl	8008184 <_svfiprintf_r>
 8006940:	9b02      	ldr	r3, [sp, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	b01c      	add	sp, #112	@ 0x70
 8006948:	f85d eb04 	ldr.w	lr, [sp], #4
 800694c:	b003      	add	sp, #12
 800694e:	4770      	bx	lr
 8006950:	20000020 	.word	0x20000020
 8006954:	ffff0208 	.word	0xffff0208

08006958 <__sread>:
 8006958:	b510      	push	{r4, lr}
 800695a:	460c      	mov	r4, r1
 800695c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006960:	f000 f886 	bl	8006a70 <_read_r>
 8006964:	2800      	cmp	r0, #0
 8006966:	bfab      	itete	ge
 8006968:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800696a:	89a3      	ldrhlt	r3, [r4, #12]
 800696c:	181b      	addge	r3, r3, r0
 800696e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006972:	bfac      	ite	ge
 8006974:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006976:	81a3      	strhlt	r3, [r4, #12]
 8006978:	bd10      	pop	{r4, pc}

0800697a <__swrite>:
 800697a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800697e:	461f      	mov	r7, r3
 8006980:	898b      	ldrh	r3, [r1, #12]
 8006982:	05db      	lsls	r3, r3, #23
 8006984:	4605      	mov	r5, r0
 8006986:	460c      	mov	r4, r1
 8006988:	4616      	mov	r6, r2
 800698a:	d505      	bpl.n	8006998 <__swrite+0x1e>
 800698c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006990:	2302      	movs	r3, #2
 8006992:	2200      	movs	r2, #0
 8006994:	f000 f85a 	bl	8006a4c <_lseek_r>
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800699e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069a2:	81a3      	strh	r3, [r4, #12]
 80069a4:	4632      	mov	r2, r6
 80069a6:	463b      	mov	r3, r7
 80069a8:	4628      	mov	r0, r5
 80069aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ae:	f000 b871 	b.w	8006a94 <_write_r>

080069b2 <__sseek>:
 80069b2:	b510      	push	{r4, lr}
 80069b4:	460c      	mov	r4, r1
 80069b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ba:	f000 f847 	bl	8006a4c <_lseek_r>
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	bf15      	itete	ne
 80069c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069ce:	81a3      	strheq	r3, [r4, #12]
 80069d0:	bf18      	it	ne
 80069d2:	81a3      	strhne	r3, [r4, #12]
 80069d4:	bd10      	pop	{r4, pc}

080069d6 <__sclose>:
 80069d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069da:	f000 b827 	b.w	8006a2c <_close_r>

080069de <memmove>:
 80069de:	4288      	cmp	r0, r1
 80069e0:	b510      	push	{r4, lr}
 80069e2:	eb01 0402 	add.w	r4, r1, r2
 80069e6:	d902      	bls.n	80069ee <memmove+0x10>
 80069e8:	4284      	cmp	r4, r0
 80069ea:	4623      	mov	r3, r4
 80069ec:	d807      	bhi.n	80069fe <memmove+0x20>
 80069ee:	1e43      	subs	r3, r0, #1
 80069f0:	42a1      	cmp	r1, r4
 80069f2:	d008      	beq.n	8006a06 <memmove+0x28>
 80069f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069fc:	e7f8      	b.n	80069f0 <memmove+0x12>
 80069fe:	4402      	add	r2, r0
 8006a00:	4601      	mov	r1, r0
 8006a02:	428a      	cmp	r2, r1
 8006a04:	d100      	bne.n	8006a08 <memmove+0x2a>
 8006a06:	bd10      	pop	{r4, pc}
 8006a08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a10:	e7f7      	b.n	8006a02 <memmove+0x24>

08006a12 <memset>:
 8006a12:	4402      	add	r2, r0
 8006a14:	4603      	mov	r3, r0
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d100      	bne.n	8006a1c <memset+0xa>
 8006a1a:	4770      	bx	lr
 8006a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a20:	e7f9      	b.n	8006a16 <memset+0x4>
	...

08006a24 <_localeconv_r>:
 8006a24:	4800      	ldr	r0, [pc, #0]	@ (8006a28 <_localeconv_r+0x4>)
 8006a26:	4770      	bx	lr
 8006a28:	20000160 	.word	0x20000160

08006a2c <_close_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d06      	ldr	r5, [pc, #24]	@ (8006a48 <_close_r+0x1c>)
 8006a30:	2300      	movs	r3, #0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	f7fb fb66 	bl	8002108 <_close>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_close_r+0x1a>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_close_r+0x1a>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20000ab0 	.word	0x20000ab0

08006a4c <_lseek_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	@ (8006a6c <_lseek_r+0x20>)
 8006a50:	4604      	mov	r4, r0
 8006a52:	4608      	mov	r0, r1
 8006a54:	4611      	mov	r1, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	602a      	str	r2, [r5, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f7fb fb7b 	bl	8002156 <_lseek>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_lseek_r+0x1e>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_lseek_r+0x1e>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	20000ab0 	.word	0x20000ab0

08006a70 <_read_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d07      	ldr	r5, [pc, #28]	@ (8006a90 <_read_r+0x20>)
 8006a74:	4604      	mov	r4, r0
 8006a76:	4608      	mov	r0, r1
 8006a78:	4611      	mov	r1, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	602a      	str	r2, [r5, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f7fb fb09 	bl	8002096 <_read>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_read_r+0x1e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_read_r+0x1e>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20000ab0 	.word	0x20000ab0

08006a94 <_write_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d07      	ldr	r5, [pc, #28]	@ (8006ab4 <_write_r+0x20>)
 8006a98:	4604      	mov	r4, r0
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	602a      	str	r2, [r5, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f7fb fb14 	bl	80020d0 <_write>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_write_r+0x1e>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_write_r+0x1e>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20000ab0 	.word	0x20000ab0

08006ab8 <__errno>:
 8006ab8:	4b01      	ldr	r3, [pc, #4]	@ (8006ac0 <__errno+0x8>)
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000020 	.word	0x20000020

08006ac4 <__libc_init_array>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8006afc <__libc_init_array+0x38>)
 8006ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8006b00 <__libc_init_array+0x3c>)
 8006aca:	1b64      	subs	r4, r4, r5
 8006acc:	10a4      	asrs	r4, r4, #2
 8006ace:	2600      	movs	r6, #0
 8006ad0:	42a6      	cmp	r6, r4
 8006ad2:	d109      	bne.n	8006ae8 <__libc_init_array+0x24>
 8006ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8006b04 <__libc_init_array+0x40>)
 8006ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8006b08 <__libc_init_array+0x44>)
 8006ad8:	f002 f84a 	bl	8008b70 <_init>
 8006adc:	1b64      	subs	r4, r4, r5
 8006ade:	10a4      	asrs	r4, r4, #2
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	42a6      	cmp	r6, r4
 8006ae4:	d105      	bne.n	8006af2 <__libc_init_array+0x2e>
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aec:	4798      	blx	r3
 8006aee:	3601      	adds	r6, #1
 8006af0:	e7ee      	b.n	8006ad0 <__libc_init_array+0xc>
 8006af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af6:	4798      	blx	r3
 8006af8:	3601      	adds	r6, #1
 8006afa:	e7f2      	b.n	8006ae2 <__libc_init_array+0x1e>
 8006afc:	08009728 	.word	0x08009728
 8006b00:	08009728 	.word	0x08009728
 8006b04:	08009728 	.word	0x08009728
 8006b08:	0800972c 	.word	0x0800972c

08006b0c <__retarget_lock_init_recursive>:
 8006b0c:	4770      	bx	lr

08006b0e <__retarget_lock_acquire_recursive>:
 8006b0e:	4770      	bx	lr

08006b10 <__retarget_lock_release_recursive>:
 8006b10:	4770      	bx	lr

08006b12 <memcpy>:
 8006b12:	440a      	add	r2, r1
 8006b14:	4291      	cmp	r1, r2
 8006b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b1a:	d100      	bne.n	8006b1e <memcpy+0xc>
 8006b1c:	4770      	bx	lr
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b28:	4291      	cmp	r1, r2
 8006b2a:	d1f9      	bne.n	8006b20 <memcpy+0xe>
 8006b2c:	bd10      	pop	{r4, pc}

08006b2e <quorem>:
 8006b2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b32:	6903      	ldr	r3, [r0, #16]
 8006b34:	690c      	ldr	r4, [r1, #16]
 8006b36:	42a3      	cmp	r3, r4
 8006b38:	4607      	mov	r7, r0
 8006b3a:	db7e      	blt.n	8006c3a <quorem+0x10c>
 8006b3c:	3c01      	subs	r4, #1
 8006b3e:	f101 0814 	add.w	r8, r1, #20
 8006b42:	00a3      	lsls	r3, r4, #2
 8006b44:	f100 0514 	add.w	r5, r0, #20
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b64:	d32e      	bcc.n	8006bc4 <quorem+0x96>
 8006b66:	f04f 0a00 	mov.w	sl, #0
 8006b6a:	46c4      	mov	ip, r8
 8006b6c:	46ae      	mov	lr, r5
 8006b6e:	46d3      	mov	fp, sl
 8006b70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b74:	b298      	uxth	r0, r3
 8006b76:	fb06 a000 	mla	r0, r6, r0, sl
 8006b7a:	0c02      	lsrs	r2, r0, #16
 8006b7c:	0c1b      	lsrs	r3, r3, #16
 8006b7e:	fb06 2303 	mla	r3, r6, r3, r2
 8006b82:	f8de 2000 	ldr.w	r2, [lr]
 8006b86:	b280      	uxth	r0, r0
 8006b88:	b292      	uxth	r2, r2
 8006b8a:	1a12      	subs	r2, r2, r0
 8006b8c:	445a      	add	r2, fp
 8006b8e:	f8de 0000 	ldr.w	r0, [lr]
 8006b92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ba0:	b292      	uxth	r2, r2
 8006ba2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ba6:	45e1      	cmp	r9, ip
 8006ba8:	f84e 2b04 	str.w	r2, [lr], #4
 8006bac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006bb0:	d2de      	bcs.n	8006b70 <quorem+0x42>
 8006bb2:	9b00      	ldr	r3, [sp, #0]
 8006bb4:	58eb      	ldr	r3, [r5, r3]
 8006bb6:	b92b      	cbnz	r3, 8006bc4 <quorem+0x96>
 8006bb8:	9b01      	ldr	r3, [sp, #4]
 8006bba:	3b04      	subs	r3, #4
 8006bbc:	429d      	cmp	r5, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	d32f      	bcc.n	8006c22 <quorem+0xf4>
 8006bc2:	613c      	str	r4, [r7, #16]
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f001 f979 	bl	8007ebc <__mcmp>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	db25      	blt.n	8006c1a <quorem+0xec>
 8006bce:	4629      	mov	r1, r5
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bd6:	f8d1 c000 	ldr.w	ip, [r1]
 8006bda:	fa1f fe82 	uxth.w	lr, r2
 8006bde:	fa1f f38c 	uxth.w	r3, ip
 8006be2:	eba3 030e 	sub.w	r3, r3, lr
 8006be6:	4403      	add	r3, r0
 8006be8:	0c12      	lsrs	r2, r2, #16
 8006bea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bf8:	45c1      	cmp	r9, r8
 8006bfa:	f841 3b04 	str.w	r3, [r1], #4
 8006bfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c02:	d2e6      	bcs.n	8006bd2 <quorem+0xa4>
 8006c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c0c:	b922      	cbnz	r2, 8006c18 <quorem+0xea>
 8006c0e:	3b04      	subs	r3, #4
 8006c10:	429d      	cmp	r5, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	d30b      	bcc.n	8006c2e <quorem+0x100>
 8006c16:	613c      	str	r4, [r7, #16]
 8006c18:	3601      	adds	r6, #1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	b003      	add	sp, #12
 8006c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c22:	6812      	ldr	r2, [r2, #0]
 8006c24:	3b04      	subs	r3, #4
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	d1cb      	bne.n	8006bc2 <quorem+0x94>
 8006c2a:	3c01      	subs	r4, #1
 8006c2c:	e7c6      	b.n	8006bbc <quorem+0x8e>
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	3b04      	subs	r3, #4
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d1ef      	bne.n	8006c16 <quorem+0xe8>
 8006c36:	3c01      	subs	r4, #1
 8006c38:	e7ea      	b.n	8006c10 <quorem+0xe2>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e7ee      	b.n	8006c1c <quorem+0xee>
	...

08006c40 <_dtoa_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	69c7      	ldr	r7, [r0, #28]
 8006c46:	b099      	sub	sp, #100	@ 0x64
 8006c48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c4c:	ec55 4b10 	vmov	r4, r5, d0
 8006c50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c52:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c54:	4683      	mov	fp, r0
 8006c56:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c5a:	b97f      	cbnz	r7, 8006c7c <_dtoa_r+0x3c>
 8006c5c:	2010      	movs	r0, #16
 8006c5e:	f000 fdfd 	bl	800785c <malloc>
 8006c62:	4602      	mov	r2, r0
 8006c64:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c68:	b920      	cbnz	r0, 8006c74 <_dtoa_r+0x34>
 8006c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8006f08 <_dtoa_r+0x2c8>)
 8006c6c:	21ef      	movs	r1, #239	@ 0xef
 8006c6e:	48a7      	ldr	r0, [pc, #668]	@ (8006f0c <_dtoa_r+0x2cc>)
 8006c70:	f001 fc40 	bl	80084f4 <__assert_func>
 8006c74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c78:	6007      	str	r7, [r0, #0]
 8006c7a:	60c7      	str	r7, [r0, #12]
 8006c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c80:	6819      	ldr	r1, [r3, #0]
 8006c82:	b159      	cbz	r1, 8006c9c <_dtoa_r+0x5c>
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	604a      	str	r2, [r1, #4]
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4093      	lsls	r3, r2
 8006c8c:	608b      	str	r3, [r1, #8]
 8006c8e:	4658      	mov	r0, fp
 8006c90:	f000 feda 	bl	8007a48 <_Bfree>
 8006c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	1e2b      	subs	r3, r5, #0
 8006c9e:	bfb9      	ittee	lt
 8006ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ca4:	9303      	strlt	r3, [sp, #12]
 8006ca6:	2300      	movge	r3, #0
 8006ca8:	6033      	strge	r3, [r6, #0]
 8006caa:	9f03      	ldr	r7, [sp, #12]
 8006cac:	4b98      	ldr	r3, [pc, #608]	@ (8006f10 <_dtoa_r+0x2d0>)
 8006cae:	bfbc      	itt	lt
 8006cb0:	2201      	movlt	r2, #1
 8006cb2:	6032      	strlt	r2, [r6, #0]
 8006cb4:	43bb      	bics	r3, r7
 8006cb6:	d112      	bne.n	8006cde <_dtoa_r+0x9e>
 8006cb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cc4:	4323      	orrs	r3, r4
 8006cc6:	f000 854d 	beq.w	8007764 <_dtoa_r+0xb24>
 8006cca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ccc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f24 <_dtoa_r+0x2e4>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 854f 	beq.w	8007774 <_dtoa_r+0xb34>
 8006cd6:	f10a 0303 	add.w	r3, sl, #3
 8006cda:	f000 bd49 	b.w	8007770 <_dtoa_r+0xb30>
 8006cde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	ec51 0b17 	vmov	r0, r1, d7
 8006ce8:	2300      	movs	r3, #0
 8006cea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006cee:	f7f9 fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cf2:	4680      	mov	r8, r0
 8006cf4:	b158      	cbz	r0, 8006d0e <_dtoa_r+0xce>
 8006cf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cfe:	b113      	cbz	r3, 8006d06 <_dtoa_r+0xc6>
 8006d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d02:	4b84      	ldr	r3, [pc, #528]	@ (8006f14 <_dtoa_r+0x2d4>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f28 <_dtoa_r+0x2e8>
 8006d0a:	f000 bd33 	b.w	8007774 <_dtoa_r+0xb34>
 8006d0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d12:	aa16      	add	r2, sp, #88	@ 0x58
 8006d14:	a917      	add	r1, sp, #92	@ 0x5c
 8006d16:	4658      	mov	r0, fp
 8006d18:	f001 f980 	bl	800801c <__d2b>
 8006d1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d20:	4681      	mov	r9, r0
 8006d22:	2e00      	cmp	r6, #0
 8006d24:	d077      	beq.n	8006e16 <_dtoa_r+0x1d6>
 8006d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d40:	4619      	mov	r1, r3
 8006d42:	2200      	movs	r2, #0
 8006d44:	4b74      	ldr	r3, [pc, #464]	@ (8006f18 <_dtoa_r+0x2d8>)
 8006d46:	f7f9 faa7 	bl	8000298 <__aeabi_dsub>
 8006d4a:	a369      	add	r3, pc, #420	@ (adr r3, 8006ef0 <_dtoa_r+0x2b0>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f7f9 fc5a 	bl	8000608 <__aeabi_dmul>
 8006d54:	a368      	add	r3, pc, #416	@ (adr r3, 8006ef8 <_dtoa_r+0x2b8>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fa9f 	bl	800029c <__adddf3>
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4630      	mov	r0, r6
 8006d62:	460d      	mov	r5, r1
 8006d64:	f7f9 fbe6 	bl	8000534 <__aeabi_i2d>
 8006d68:	a365      	add	r3, pc, #404	@ (adr r3, 8006f00 <_dtoa_r+0x2c0>)
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	f7f9 fc4b 	bl	8000608 <__aeabi_dmul>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
 8006d7a:	f7f9 fa8f 	bl	800029c <__adddf3>
 8006d7e:	4604      	mov	r4, r0
 8006d80:	460d      	mov	r5, r1
 8006d82:	f7f9 fef1 	bl	8000b68 <__aeabi_d2iz>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4607      	mov	r7, r0
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 feac 	bl	8000aec <__aeabi_dcmplt>
 8006d94:	b140      	cbz	r0, 8006da8 <_dtoa_r+0x168>
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7f9 fbcc 	bl	8000534 <__aeabi_i2d>
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	462b      	mov	r3, r5
 8006da0:	f7f9 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006da4:	b900      	cbnz	r0, 8006da8 <_dtoa_r+0x168>
 8006da6:	3f01      	subs	r7, #1
 8006da8:	2f16      	cmp	r7, #22
 8006daa:	d851      	bhi.n	8006e50 <_dtoa_r+0x210>
 8006dac:	4b5b      	ldr	r3, [pc, #364]	@ (8006f1c <_dtoa_r+0x2dc>)
 8006dae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dba:	f7f9 fe97 	bl	8000aec <__aeabi_dcmplt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d048      	beq.n	8006e54 <_dtoa_r+0x214>
 8006dc2:	3f01      	subs	r7, #1
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006dc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dca:	1b9b      	subs	r3, r3, r6
 8006dcc:	1e5a      	subs	r2, r3, #1
 8006dce:	bf44      	itt	mi
 8006dd0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006dd4:	2300      	movmi	r3, #0
 8006dd6:	9208      	str	r2, [sp, #32]
 8006dd8:	bf54      	ite	pl
 8006dda:	f04f 0800 	movpl.w	r8, #0
 8006dde:	9308      	strmi	r3, [sp, #32]
 8006de0:	2f00      	cmp	r7, #0
 8006de2:	db39      	blt.n	8006e58 <_dtoa_r+0x218>
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006de8:	443b      	add	r3, r7
 8006dea:	9308      	str	r3, [sp, #32]
 8006dec:	2300      	movs	r3, #0
 8006dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d864      	bhi.n	8006ec0 <_dtoa_r+0x280>
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	bfc4      	itt	gt
 8006dfa:	3b04      	subgt	r3, #4
 8006dfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	f1a3 0302 	sub.w	r3, r3, #2
 8006e04:	bfcc      	ite	gt
 8006e06:	2400      	movgt	r4, #0
 8006e08:	2401      	movle	r4, #1
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d863      	bhi.n	8006ed6 <_dtoa_r+0x296>
 8006e0e:	e8df f003 	tbb	[pc, r3]
 8006e12:	372a      	.short	0x372a
 8006e14:	5535      	.short	0x5535
 8006e16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e1a:	441e      	add	r6, r3
 8006e1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	bfc1      	itttt	gt
 8006e24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e28:	409f      	lslgt	r7, r3
 8006e2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e32:	bfd6      	itet	le
 8006e34:	f1c3 0320 	rsble	r3, r3, #32
 8006e38:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e3c:	fa04 f003 	lslle.w	r0, r4, r3
 8006e40:	f7f9 fb68 	bl	8000514 <__aeabi_ui2d>
 8006e44:	2201      	movs	r2, #1
 8006e46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e4a:	3e01      	subs	r6, #1
 8006e4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e4e:	e777      	b.n	8006d40 <_dtoa_r+0x100>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e7b8      	b.n	8006dc6 <_dtoa_r+0x186>
 8006e54:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e56:	e7b7      	b.n	8006dc8 <_dtoa_r+0x188>
 8006e58:	427b      	negs	r3, r7
 8006e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	eba8 0807 	sub.w	r8, r8, r7
 8006e62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e64:	e7c4      	b.n	8006df0 <_dtoa_r+0x1b0>
 8006e66:	2300      	movs	r3, #0
 8006e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dc35      	bgt.n	8006edc <_dtoa_r+0x29c>
 8006e70:	2301      	movs	r3, #1
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	9307      	str	r3, [sp, #28]
 8006e76:	461a      	mov	r2, r3
 8006e78:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e7a:	e00b      	b.n	8006e94 <_dtoa_r+0x254>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e7f3      	b.n	8006e68 <_dtoa_r+0x228>
 8006e80:	2300      	movs	r3, #0
 8006e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	bfb8      	it	lt
 8006e92:	2301      	movlt	r3, #1
 8006e94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e98:	2100      	movs	r1, #0
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	f102 0514 	add.w	r5, r2, #20
 8006ea0:	429d      	cmp	r5, r3
 8006ea2:	d91f      	bls.n	8006ee4 <_dtoa_r+0x2a4>
 8006ea4:	6041      	str	r1, [r0, #4]
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 fd8e 	bl	80079c8 <_Balloc>
 8006eac:	4682      	mov	sl, r0
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d13c      	bne.n	8006f2c <_dtoa_r+0x2ec>
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <_dtoa_r+0x2e0>)
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006eba:	e6d8      	b.n	8006c6e <_dtoa_r+0x2e>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e7e0      	b.n	8006e82 <_dtoa_r+0x242>
 8006ec0:	2401      	movs	r4, #1
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2312      	movs	r3, #18
 8006ed4:	e7d0      	b.n	8006e78 <_dtoa_r+0x238>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eda:	e7f5      	b.n	8006ec8 <_dtoa_r+0x288>
 8006edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	e7d7      	b.n	8006e94 <_dtoa_r+0x254>
 8006ee4:	3101      	adds	r1, #1
 8006ee6:	0052      	lsls	r2, r2, #1
 8006ee8:	e7d8      	b.n	8006e9c <_dtoa_r+0x25c>
 8006eea:	bf00      	nop
 8006eec:	f3af 8000 	nop.w
 8006ef0:	636f4361 	.word	0x636f4361
 8006ef4:	3fd287a7 	.word	0x3fd287a7
 8006ef8:	8b60c8b3 	.word	0x8b60c8b3
 8006efc:	3fc68a28 	.word	0x3fc68a28
 8006f00:	509f79fb 	.word	0x509f79fb
 8006f04:	3fd34413 	.word	0x3fd34413
 8006f08:	080093f1 	.word	0x080093f1
 8006f0c:	08009408 	.word	0x08009408
 8006f10:	7ff00000 	.word	0x7ff00000
 8006f14:	080093c1 	.word	0x080093c1
 8006f18:	3ff80000 	.word	0x3ff80000
 8006f1c:	08009500 	.word	0x08009500
 8006f20:	08009460 	.word	0x08009460
 8006f24:	080093ed 	.word	0x080093ed
 8006f28:	080093c0 	.word	0x080093c0
 8006f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f30:	6018      	str	r0, [r3, #0]
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	2b0e      	cmp	r3, #14
 8006f36:	f200 80a4 	bhi.w	8007082 <_dtoa_r+0x442>
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	f000 80a1 	beq.w	8007082 <_dtoa_r+0x442>
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	dd33      	ble.n	8006fac <_dtoa_r+0x36c>
 8006f44:	4bad      	ldr	r3, [pc, #692]	@ (80071fc <_dtoa_r+0x5bc>)
 8006f46:	f007 020f 	and.w	r2, r7, #15
 8006f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f4e:	ed93 7b00 	vldr	d7, [r3]
 8006f52:	05f8      	lsls	r0, r7, #23
 8006f54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f5c:	d516      	bpl.n	8006f8c <_dtoa_r+0x34c>
 8006f5e:	4ba8      	ldr	r3, [pc, #672]	@ (8007200 <_dtoa_r+0x5c0>)
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f68:	f7f9 fc78 	bl	800085c <__aeabi_ddiv>
 8006f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f70:	f004 040f 	and.w	r4, r4, #15
 8006f74:	2603      	movs	r6, #3
 8006f76:	4da2      	ldr	r5, [pc, #648]	@ (8007200 <_dtoa_r+0x5c0>)
 8006f78:	b954      	cbnz	r4, 8006f90 <_dtoa_r+0x350>
 8006f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f82:	f7f9 fc6b 	bl	800085c <__aeabi_ddiv>
 8006f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f8a:	e028      	b.n	8006fde <_dtoa_r+0x39e>
 8006f8c:	2602      	movs	r6, #2
 8006f8e:	e7f2      	b.n	8006f76 <_dtoa_r+0x336>
 8006f90:	07e1      	lsls	r1, r4, #31
 8006f92:	d508      	bpl.n	8006fa6 <_dtoa_r+0x366>
 8006f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f9c:	f7f9 fb34 	bl	8000608 <__aeabi_dmul>
 8006fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	1064      	asrs	r4, r4, #1
 8006fa8:	3508      	adds	r5, #8
 8006faa:	e7e5      	b.n	8006f78 <_dtoa_r+0x338>
 8006fac:	f000 80d2 	beq.w	8007154 <_dtoa_r+0x514>
 8006fb0:	427c      	negs	r4, r7
 8006fb2:	4b92      	ldr	r3, [pc, #584]	@ (80071fc <_dtoa_r+0x5bc>)
 8006fb4:	4d92      	ldr	r5, [pc, #584]	@ (8007200 <_dtoa_r+0x5c0>)
 8006fb6:	f004 020f 	and.w	r2, r4, #15
 8006fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc6:	f7f9 fb1f 	bl	8000608 <__aeabi_dmul>
 8006fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fce:	1124      	asrs	r4, r4, #4
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2602      	movs	r6, #2
 8006fd4:	2c00      	cmp	r4, #0
 8006fd6:	f040 80b2 	bne.w	800713e <_dtoa_r+0x4fe>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1d3      	bne.n	8006f86 <_dtoa_r+0x346>
 8006fde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80b7 	beq.w	8007158 <_dtoa_r+0x518>
 8006fea:	4b86      	ldr	r3, [pc, #536]	@ (8007204 <_dtoa_r+0x5c4>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 fd7b 	bl	8000aec <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f000 80ae 	beq.w	8007158 <_dtoa_r+0x518>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 80aa 	beq.w	8007158 <_dtoa_r+0x518>
 8007004:	9b00      	ldr	r3, [sp, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	dd37      	ble.n	800707a <_dtoa_r+0x43a>
 800700a:	1e7b      	subs	r3, r7, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	4620      	mov	r0, r4
 8007010:	4b7d      	ldr	r3, [pc, #500]	@ (8007208 <_dtoa_r+0x5c8>)
 8007012:	2200      	movs	r2, #0
 8007014:	4629      	mov	r1, r5
 8007016:	f7f9 faf7 	bl	8000608 <__aeabi_dmul>
 800701a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800701e:	9c00      	ldr	r4, [sp, #0]
 8007020:	3601      	adds	r6, #1
 8007022:	4630      	mov	r0, r6
 8007024:	f7f9 fa86 	bl	8000534 <__aeabi_i2d>
 8007028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800702c:	f7f9 faec 	bl	8000608 <__aeabi_dmul>
 8007030:	4b76      	ldr	r3, [pc, #472]	@ (800720c <_dtoa_r+0x5cc>)
 8007032:	2200      	movs	r2, #0
 8007034:	f7f9 f932 	bl	800029c <__adddf3>
 8007038:	4605      	mov	r5, r0
 800703a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800703e:	2c00      	cmp	r4, #0
 8007040:	f040 808d 	bne.w	800715e <_dtoa_r+0x51e>
 8007044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007048:	4b71      	ldr	r3, [pc, #452]	@ (8007210 <_dtoa_r+0x5d0>)
 800704a:	2200      	movs	r2, #0
 800704c:	f7f9 f924 	bl	8000298 <__aeabi_dsub>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007058:	462a      	mov	r2, r5
 800705a:	4633      	mov	r3, r6
 800705c:	f7f9 fd64 	bl	8000b28 <__aeabi_dcmpgt>
 8007060:	2800      	cmp	r0, #0
 8007062:	f040 828b 	bne.w	800757c <_dtoa_r+0x93c>
 8007066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706a:	462a      	mov	r2, r5
 800706c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007070:	f7f9 fd3c 	bl	8000aec <__aeabi_dcmplt>
 8007074:	2800      	cmp	r0, #0
 8007076:	f040 8128 	bne.w	80072ca <_dtoa_r+0x68a>
 800707a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800707e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007084:	2b00      	cmp	r3, #0
 8007086:	f2c0 815a 	blt.w	800733e <_dtoa_r+0x6fe>
 800708a:	2f0e      	cmp	r7, #14
 800708c:	f300 8157 	bgt.w	800733e <_dtoa_r+0x6fe>
 8007090:	4b5a      	ldr	r3, [pc, #360]	@ (80071fc <_dtoa_r+0x5bc>)
 8007092:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007096:	ed93 7b00 	vldr	d7, [r3]
 800709a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	ed8d 7b00 	vstr	d7, [sp]
 80070a2:	da03      	bge.n	80070ac <_dtoa_r+0x46c>
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f340 8101 	ble.w	80072ae <_dtoa_r+0x66e>
 80070ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070b0:	4656      	mov	r6, sl
 80070b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b6:	4620      	mov	r0, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7f9 fbcf 	bl	800085c <__aeabi_ddiv>
 80070be:	f7f9 fd53 	bl	8000b68 <__aeabi_d2iz>
 80070c2:	4680      	mov	r8, r0
 80070c4:	f7f9 fa36 	bl	8000534 <__aeabi_i2d>
 80070c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070cc:	f7f9 fa9c 	bl	8000608 <__aeabi_dmul>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070dc:	f7f9 f8dc 	bl	8000298 <__aeabi_dsub>
 80070e0:	f806 4b01 	strb.w	r4, [r6], #1
 80070e4:	9d07      	ldr	r5, [sp, #28]
 80070e6:	eba6 040a 	sub.w	r4, r6, sl
 80070ea:	42a5      	cmp	r5, r4
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	f040 8117 	bne.w	8007322 <_dtoa_r+0x6e2>
 80070f4:	f7f9 f8d2 	bl	800029c <__adddf3>
 80070f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070fc:	4604      	mov	r4, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	f7f9 fd12 	bl	8000b28 <__aeabi_dcmpgt>
 8007104:	2800      	cmp	r0, #0
 8007106:	f040 80f9 	bne.w	80072fc <_dtoa_r+0x6bc>
 800710a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	f7f9 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007116:	b118      	cbz	r0, 8007120 <_dtoa_r+0x4e0>
 8007118:	f018 0f01 	tst.w	r8, #1
 800711c:	f040 80ee 	bne.w	80072fc <_dtoa_r+0x6bc>
 8007120:	4649      	mov	r1, r9
 8007122:	4658      	mov	r0, fp
 8007124:	f000 fc90 	bl	8007a48 <_Bfree>
 8007128:	2300      	movs	r3, #0
 800712a:	7033      	strb	r3, [r6, #0]
 800712c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800712e:	3701      	adds	r7, #1
 8007130:	601f      	str	r7, [r3, #0]
 8007132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 831d 	beq.w	8007774 <_dtoa_r+0xb34>
 800713a:	601e      	str	r6, [r3, #0]
 800713c:	e31a      	b.n	8007774 <_dtoa_r+0xb34>
 800713e:	07e2      	lsls	r2, r4, #31
 8007140:	d505      	bpl.n	800714e <_dtoa_r+0x50e>
 8007142:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007146:	f7f9 fa5f 	bl	8000608 <__aeabi_dmul>
 800714a:	3601      	adds	r6, #1
 800714c:	2301      	movs	r3, #1
 800714e:	1064      	asrs	r4, r4, #1
 8007150:	3508      	adds	r5, #8
 8007152:	e73f      	b.n	8006fd4 <_dtoa_r+0x394>
 8007154:	2602      	movs	r6, #2
 8007156:	e742      	b.n	8006fde <_dtoa_r+0x39e>
 8007158:	9c07      	ldr	r4, [sp, #28]
 800715a:	9704      	str	r7, [sp, #16]
 800715c:	e761      	b.n	8007022 <_dtoa_r+0x3e2>
 800715e:	4b27      	ldr	r3, [pc, #156]	@ (80071fc <_dtoa_r+0x5bc>)
 8007160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007166:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800716a:	4454      	add	r4, sl
 800716c:	2900      	cmp	r1, #0
 800716e:	d053      	beq.n	8007218 <_dtoa_r+0x5d8>
 8007170:	4928      	ldr	r1, [pc, #160]	@ (8007214 <_dtoa_r+0x5d4>)
 8007172:	2000      	movs	r0, #0
 8007174:	f7f9 fb72 	bl	800085c <__aeabi_ddiv>
 8007178:	4633      	mov	r3, r6
 800717a:	462a      	mov	r2, r5
 800717c:	f7f9 f88c 	bl	8000298 <__aeabi_dsub>
 8007180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007184:	4656      	mov	r6, sl
 8007186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800718a:	f7f9 fced 	bl	8000b68 <__aeabi_d2iz>
 800718e:	4605      	mov	r5, r0
 8007190:	f7f9 f9d0 	bl	8000534 <__aeabi_i2d>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800719c:	f7f9 f87c 	bl	8000298 <__aeabi_dsub>
 80071a0:	3530      	adds	r5, #48	@ 0x30
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071aa:	f806 5b01 	strb.w	r5, [r6], #1
 80071ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071b2:	f7f9 fc9b 	bl	8000aec <__aeabi_dcmplt>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d171      	bne.n	800729e <_dtoa_r+0x65e>
 80071ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071be:	4911      	ldr	r1, [pc, #68]	@ (8007204 <_dtoa_r+0x5c4>)
 80071c0:	2000      	movs	r0, #0
 80071c2:	f7f9 f869 	bl	8000298 <__aeabi_dsub>
 80071c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071ca:	f7f9 fc8f 	bl	8000aec <__aeabi_dcmplt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f040 8095 	bne.w	80072fe <_dtoa_r+0x6be>
 80071d4:	42a6      	cmp	r6, r4
 80071d6:	f43f af50 	beq.w	800707a <_dtoa_r+0x43a>
 80071da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071de:	4b0a      	ldr	r3, [pc, #40]	@ (8007208 <_dtoa_r+0x5c8>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	f7f9 fa11 	bl	8000608 <__aeabi_dmul>
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <_dtoa_r+0x5c8>)
 80071e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071ec:	2200      	movs	r2, #0
 80071ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f2:	f7f9 fa09 	bl	8000608 <__aeabi_dmul>
 80071f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071fa:	e7c4      	b.n	8007186 <_dtoa_r+0x546>
 80071fc:	08009500 	.word	0x08009500
 8007200:	080094d8 	.word	0x080094d8
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	40240000 	.word	0x40240000
 800720c:	401c0000 	.word	0x401c0000
 8007210:	40140000 	.word	0x40140000
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	f7f9 f9f4 	bl	8000608 <__aeabi_dmul>
 8007220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007224:	9415      	str	r4, [sp, #84]	@ 0x54
 8007226:	4656      	mov	r6, sl
 8007228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800722c:	f7f9 fc9c 	bl	8000b68 <__aeabi_d2iz>
 8007230:	4605      	mov	r5, r0
 8007232:	f7f9 f97f 	bl	8000534 <__aeabi_i2d>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723e:	f7f9 f82b 	bl	8000298 <__aeabi_dsub>
 8007242:	3530      	adds	r5, #48	@ 0x30
 8007244:	f806 5b01 	strb.w	r5, [r6], #1
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	42a6      	cmp	r6, r4
 800724e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	d124      	bne.n	80072a2 <_dtoa_r+0x662>
 8007258:	4bac      	ldr	r3, [pc, #688]	@ (800750c <_dtoa_r+0x8cc>)
 800725a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800725e:	f7f9 f81d 	bl	800029c <__adddf3>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800726a:	f7f9 fc5d 	bl	8000b28 <__aeabi_dcmpgt>
 800726e:	2800      	cmp	r0, #0
 8007270:	d145      	bne.n	80072fe <_dtoa_r+0x6be>
 8007272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007276:	49a5      	ldr	r1, [pc, #660]	@ (800750c <_dtoa_r+0x8cc>)
 8007278:	2000      	movs	r0, #0
 800727a:	f7f9 f80d 	bl	8000298 <__aeabi_dsub>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007286:	f7f9 fc31 	bl	8000aec <__aeabi_dcmplt>
 800728a:	2800      	cmp	r0, #0
 800728c:	f43f aef5 	beq.w	800707a <_dtoa_r+0x43a>
 8007290:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007292:	1e73      	subs	r3, r6, #1
 8007294:	9315      	str	r3, [sp, #84]	@ 0x54
 8007296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800729a:	2b30      	cmp	r3, #48	@ 0x30
 800729c:	d0f8      	beq.n	8007290 <_dtoa_r+0x650>
 800729e:	9f04      	ldr	r7, [sp, #16]
 80072a0:	e73e      	b.n	8007120 <_dtoa_r+0x4e0>
 80072a2:	4b9b      	ldr	r3, [pc, #620]	@ (8007510 <_dtoa_r+0x8d0>)
 80072a4:	f7f9 f9b0 	bl	8000608 <__aeabi_dmul>
 80072a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ac:	e7bc      	b.n	8007228 <_dtoa_r+0x5e8>
 80072ae:	d10c      	bne.n	80072ca <_dtoa_r+0x68a>
 80072b0:	4b98      	ldr	r3, [pc, #608]	@ (8007514 <_dtoa_r+0x8d4>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072b8:	f7f9 f9a6 	bl	8000608 <__aeabi_dmul>
 80072bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c0:	f7f9 fc28 	bl	8000b14 <__aeabi_dcmpge>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f000 8157 	beq.w	8007578 <_dtoa_r+0x938>
 80072ca:	2400      	movs	r4, #0
 80072cc:	4625      	mov	r5, r4
 80072ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d0:	43db      	mvns	r3, r3
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	4656      	mov	r6, sl
 80072d6:	2700      	movs	r7, #0
 80072d8:	4621      	mov	r1, r4
 80072da:	4658      	mov	r0, fp
 80072dc:	f000 fbb4 	bl	8007a48 <_Bfree>
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d0dc      	beq.n	800729e <_dtoa_r+0x65e>
 80072e4:	b12f      	cbz	r7, 80072f2 <_dtoa_r+0x6b2>
 80072e6:	42af      	cmp	r7, r5
 80072e8:	d003      	beq.n	80072f2 <_dtoa_r+0x6b2>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4658      	mov	r0, fp
 80072ee:	f000 fbab 	bl	8007a48 <_Bfree>
 80072f2:	4629      	mov	r1, r5
 80072f4:	4658      	mov	r0, fp
 80072f6:	f000 fba7 	bl	8007a48 <_Bfree>
 80072fa:	e7d0      	b.n	800729e <_dtoa_r+0x65e>
 80072fc:	9704      	str	r7, [sp, #16]
 80072fe:	4633      	mov	r3, r6
 8007300:	461e      	mov	r6, r3
 8007302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007306:	2a39      	cmp	r2, #57	@ 0x39
 8007308:	d107      	bne.n	800731a <_dtoa_r+0x6da>
 800730a:	459a      	cmp	sl, r3
 800730c:	d1f8      	bne.n	8007300 <_dtoa_r+0x6c0>
 800730e:	9a04      	ldr	r2, [sp, #16]
 8007310:	3201      	adds	r2, #1
 8007312:	9204      	str	r2, [sp, #16]
 8007314:	2230      	movs	r2, #48	@ 0x30
 8007316:	f88a 2000 	strb.w	r2, [sl]
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	3201      	adds	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e7bd      	b.n	800729e <_dtoa_r+0x65e>
 8007322:	4b7b      	ldr	r3, [pc, #492]	@ (8007510 <_dtoa_r+0x8d0>)
 8007324:	2200      	movs	r2, #0
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	4604      	mov	r4, r0
 8007330:	460d      	mov	r5, r1
 8007332:	f7f9 fbd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007336:	2800      	cmp	r0, #0
 8007338:	f43f aebb 	beq.w	80070b2 <_dtoa_r+0x472>
 800733c:	e6f0      	b.n	8007120 <_dtoa_r+0x4e0>
 800733e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007340:	2a00      	cmp	r2, #0
 8007342:	f000 80db 	beq.w	80074fc <_dtoa_r+0x8bc>
 8007346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007348:	2a01      	cmp	r2, #1
 800734a:	f300 80bf 	bgt.w	80074cc <_dtoa_r+0x88c>
 800734e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007350:	2a00      	cmp	r2, #0
 8007352:	f000 80b7 	beq.w	80074c4 <_dtoa_r+0x884>
 8007356:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800735a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800735c:	4646      	mov	r6, r8
 800735e:	9a08      	ldr	r2, [sp, #32]
 8007360:	2101      	movs	r1, #1
 8007362:	441a      	add	r2, r3
 8007364:	4658      	mov	r0, fp
 8007366:	4498      	add	r8, r3
 8007368:	9208      	str	r2, [sp, #32]
 800736a:	f000 fc21 	bl	8007bb0 <__i2b>
 800736e:	4605      	mov	r5, r0
 8007370:	b15e      	cbz	r6, 800738a <_dtoa_r+0x74a>
 8007372:	9b08      	ldr	r3, [sp, #32]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dd08      	ble.n	800738a <_dtoa_r+0x74a>
 8007378:	42b3      	cmp	r3, r6
 800737a:	9a08      	ldr	r2, [sp, #32]
 800737c:	bfa8      	it	ge
 800737e:	4633      	movge	r3, r6
 8007380:	eba8 0803 	sub.w	r8, r8, r3
 8007384:	1af6      	subs	r6, r6, r3
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	9308      	str	r3, [sp, #32]
 800738a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800738c:	b1f3      	cbz	r3, 80073cc <_dtoa_r+0x78c>
 800738e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80b7 	beq.w	8007504 <_dtoa_r+0x8c4>
 8007396:	b18c      	cbz	r4, 80073bc <_dtoa_r+0x77c>
 8007398:	4629      	mov	r1, r5
 800739a:	4622      	mov	r2, r4
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fcc7 	bl	8007d30 <__pow5mult>
 80073a2:	464a      	mov	r2, r9
 80073a4:	4601      	mov	r1, r0
 80073a6:	4605      	mov	r5, r0
 80073a8:	4658      	mov	r0, fp
 80073aa:	f000 fc17 	bl	8007bdc <__multiply>
 80073ae:	4649      	mov	r1, r9
 80073b0:	9004      	str	r0, [sp, #16]
 80073b2:	4658      	mov	r0, fp
 80073b4:	f000 fb48 	bl	8007a48 <_Bfree>
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	4699      	mov	r9, r3
 80073bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073be:	1b1a      	subs	r2, r3, r4
 80073c0:	d004      	beq.n	80073cc <_dtoa_r+0x78c>
 80073c2:	4649      	mov	r1, r9
 80073c4:	4658      	mov	r0, fp
 80073c6:	f000 fcb3 	bl	8007d30 <__pow5mult>
 80073ca:	4681      	mov	r9, r0
 80073cc:	2101      	movs	r1, #1
 80073ce:	4658      	mov	r0, fp
 80073d0:	f000 fbee 	bl	8007bb0 <__i2b>
 80073d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073d6:	4604      	mov	r4, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 81cf 	beq.w	800777c <_dtoa_r+0xb3c>
 80073de:	461a      	mov	r2, r3
 80073e0:	4601      	mov	r1, r0
 80073e2:	4658      	mov	r0, fp
 80073e4:	f000 fca4 	bl	8007d30 <__pow5mult>
 80073e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	4604      	mov	r4, r0
 80073ee:	f300 8095 	bgt.w	800751c <_dtoa_r+0x8dc>
 80073f2:	9b02      	ldr	r3, [sp, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 8087 	bne.w	8007508 <_dtoa_r+0x8c8>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8089 	bne.w	8007518 <_dtoa_r+0x8d8>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800740c:	0d1b      	lsrs	r3, r3, #20
 800740e:	051b      	lsls	r3, r3, #20
 8007410:	b12b      	cbz	r3, 800741e <_dtoa_r+0x7de>
 8007412:	9b08      	ldr	r3, [sp, #32]
 8007414:	3301      	adds	r3, #1
 8007416:	9308      	str	r3, [sp, #32]
 8007418:	f108 0801 	add.w	r8, r8, #1
 800741c:	2301      	movs	r3, #1
 800741e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 81b0 	beq.w	8007788 <_dtoa_r+0xb48>
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800742e:	6918      	ldr	r0, [r3, #16]
 8007430:	f000 fb72 	bl	8007b18 <__hi0bits>
 8007434:	f1c0 0020 	rsb	r0, r0, #32
 8007438:	9b08      	ldr	r3, [sp, #32]
 800743a:	4418      	add	r0, r3
 800743c:	f010 001f 	ands.w	r0, r0, #31
 8007440:	d077      	beq.n	8007532 <_dtoa_r+0x8f2>
 8007442:	f1c0 0320 	rsb	r3, r0, #32
 8007446:	2b04      	cmp	r3, #4
 8007448:	dd6b      	ble.n	8007522 <_dtoa_r+0x8e2>
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	f1c0 001c 	rsb	r0, r0, #28
 8007450:	4403      	add	r3, r0
 8007452:	4480      	add	r8, r0
 8007454:	4406      	add	r6, r0
 8007456:	9308      	str	r3, [sp, #32]
 8007458:	f1b8 0f00 	cmp.w	r8, #0
 800745c:	dd05      	ble.n	800746a <_dtoa_r+0x82a>
 800745e:	4649      	mov	r1, r9
 8007460:	4642      	mov	r2, r8
 8007462:	4658      	mov	r0, fp
 8007464:	f000 fcbe 	bl	8007de4 <__lshift>
 8007468:	4681      	mov	r9, r0
 800746a:	9b08      	ldr	r3, [sp, #32]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd05      	ble.n	800747c <_dtoa_r+0x83c>
 8007470:	4621      	mov	r1, r4
 8007472:	461a      	mov	r2, r3
 8007474:	4658      	mov	r0, fp
 8007476:	f000 fcb5 	bl	8007de4 <__lshift>
 800747a:	4604      	mov	r4, r0
 800747c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800747e:	2b00      	cmp	r3, #0
 8007480:	d059      	beq.n	8007536 <_dtoa_r+0x8f6>
 8007482:	4621      	mov	r1, r4
 8007484:	4648      	mov	r0, r9
 8007486:	f000 fd19 	bl	8007ebc <__mcmp>
 800748a:	2800      	cmp	r0, #0
 800748c:	da53      	bge.n	8007536 <_dtoa_r+0x8f6>
 800748e:	1e7b      	subs	r3, r7, #1
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	4649      	mov	r1, r9
 8007494:	2300      	movs	r3, #0
 8007496:	220a      	movs	r2, #10
 8007498:	4658      	mov	r0, fp
 800749a:	f000 faf7 	bl	8007a8c <__multadd>
 800749e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a0:	4681      	mov	r9, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8172 	beq.w	800778c <_dtoa_r+0xb4c>
 80074a8:	2300      	movs	r3, #0
 80074aa:	4629      	mov	r1, r5
 80074ac:	220a      	movs	r2, #10
 80074ae:	4658      	mov	r0, fp
 80074b0:	f000 faec 	bl	8007a8c <__multadd>
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	4605      	mov	r5, r0
 80074ba:	dc67      	bgt.n	800758c <_dtoa_r+0x94c>
 80074bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074be:	2b02      	cmp	r3, #2
 80074c0:	dc41      	bgt.n	8007546 <_dtoa_r+0x906>
 80074c2:	e063      	b.n	800758c <_dtoa_r+0x94c>
 80074c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074ca:	e746      	b.n	800735a <_dtoa_r+0x71a>
 80074cc:	9b07      	ldr	r3, [sp, #28]
 80074ce:	1e5c      	subs	r4, r3, #1
 80074d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	bfbf      	itttt	lt
 80074d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80074d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80074da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80074dc:	1ae3      	sublt	r3, r4, r3
 80074de:	bfb4      	ite	lt
 80074e0:	18d2      	addlt	r2, r2, r3
 80074e2:	1b1c      	subge	r4, r3, r4
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	bfbc      	itt	lt
 80074e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80074ea:	2400      	movlt	r4, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfb5      	itete	lt
 80074f0:	eba8 0603 	sublt.w	r6, r8, r3
 80074f4:	9b07      	ldrge	r3, [sp, #28]
 80074f6:	2300      	movlt	r3, #0
 80074f8:	4646      	movge	r6, r8
 80074fa:	e730      	b.n	800735e <_dtoa_r+0x71e>
 80074fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007500:	4646      	mov	r6, r8
 8007502:	e735      	b.n	8007370 <_dtoa_r+0x730>
 8007504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007506:	e75c      	b.n	80073c2 <_dtoa_r+0x782>
 8007508:	2300      	movs	r3, #0
 800750a:	e788      	b.n	800741e <_dtoa_r+0x7de>
 800750c:	3fe00000 	.word	0x3fe00000
 8007510:	40240000 	.word	0x40240000
 8007514:	40140000 	.word	0x40140000
 8007518:	9b02      	ldr	r3, [sp, #8]
 800751a:	e780      	b.n	800741e <_dtoa_r+0x7de>
 800751c:	2300      	movs	r3, #0
 800751e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007520:	e782      	b.n	8007428 <_dtoa_r+0x7e8>
 8007522:	d099      	beq.n	8007458 <_dtoa_r+0x818>
 8007524:	9a08      	ldr	r2, [sp, #32]
 8007526:	331c      	adds	r3, #28
 8007528:	441a      	add	r2, r3
 800752a:	4498      	add	r8, r3
 800752c:	441e      	add	r6, r3
 800752e:	9208      	str	r2, [sp, #32]
 8007530:	e792      	b.n	8007458 <_dtoa_r+0x818>
 8007532:	4603      	mov	r3, r0
 8007534:	e7f6      	b.n	8007524 <_dtoa_r+0x8e4>
 8007536:	9b07      	ldr	r3, [sp, #28]
 8007538:	9704      	str	r7, [sp, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	dc20      	bgt.n	8007580 <_dtoa_r+0x940>
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007542:	2b02      	cmp	r3, #2
 8007544:	dd1e      	ble.n	8007584 <_dtoa_r+0x944>
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f47f aec0 	bne.w	80072ce <_dtoa_r+0x68e>
 800754e:	4621      	mov	r1, r4
 8007550:	2205      	movs	r2, #5
 8007552:	4658      	mov	r0, fp
 8007554:	f000 fa9a 	bl	8007a8c <__multadd>
 8007558:	4601      	mov	r1, r0
 800755a:	4604      	mov	r4, r0
 800755c:	4648      	mov	r0, r9
 800755e:	f000 fcad 	bl	8007ebc <__mcmp>
 8007562:	2800      	cmp	r0, #0
 8007564:	f77f aeb3 	ble.w	80072ce <_dtoa_r+0x68e>
 8007568:	4656      	mov	r6, sl
 800756a:	2331      	movs	r3, #49	@ 0x31
 800756c:	f806 3b01 	strb.w	r3, [r6], #1
 8007570:	9b04      	ldr	r3, [sp, #16]
 8007572:	3301      	adds	r3, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	e6ae      	b.n	80072d6 <_dtoa_r+0x696>
 8007578:	9c07      	ldr	r4, [sp, #28]
 800757a:	9704      	str	r7, [sp, #16]
 800757c:	4625      	mov	r5, r4
 800757e:	e7f3      	b.n	8007568 <_dtoa_r+0x928>
 8007580:	9b07      	ldr	r3, [sp, #28]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 8104 	beq.w	8007794 <_dtoa_r+0xb54>
 800758c:	2e00      	cmp	r6, #0
 800758e:	dd05      	ble.n	800759c <_dtoa_r+0x95c>
 8007590:	4629      	mov	r1, r5
 8007592:	4632      	mov	r2, r6
 8007594:	4658      	mov	r0, fp
 8007596:	f000 fc25 	bl	8007de4 <__lshift>
 800759a:	4605      	mov	r5, r0
 800759c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d05a      	beq.n	8007658 <_dtoa_r+0xa18>
 80075a2:	6869      	ldr	r1, [r5, #4]
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 fa0f 	bl	80079c8 <_Balloc>
 80075aa:	4606      	mov	r6, r0
 80075ac:	b928      	cbnz	r0, 80075ba <_dtoa_r+0x97a>
 80075ae:	4b84      	ldr	r3, [pc, #528]	@ (80077c0 <_dtoa_r+0xb80>)
 80075b0:	4602      	mov	r2, r0
 80075b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075b6:	f7ff bb5a 	b.w	8006c6e <_dtoa_r+0x2e>
 80075ba:	692a      	ldr	r2, [r5, #16]
 80075bc:	3202      	adds	r2, #2
 80075be:	0092      	lsls	r2, r2, #2
 80075c0:	f105 010c 	add.w	r1, r5, #12
 80075c4:	300c      	adds	r0, #12
 80075c6:	f7ff faa4 	bl	8006b12 <memcpy>
 80075ca:	2201      	movs	r2, #1
 80075cc:	4631      	mov	r1, r6
 80075ce:	4658      	mov	r0, fp
 80075d0:	f000 fc08 	bl	8007de4 <__lshift>
 80075d4:	f10a 0301 	add.w	r3, sl, #1
 80075d8:	9307      	str	r3, [sp, #28]
 80075da:	9b00      	ldr	r3, [sp, #0]
 80075dc:	4453      	add	r3, sl
 80075de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	462f      	mov	r7, r5
 80075e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ea:	4605      	mov	r5, r0
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	4621      	mov	r1, r4
 80075f0:	3b01      	subs	r3, #1
 80075f2:	4648      	mov	r0, r9
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	f7ff fa9a 	bl	8006b2e <quorem>
 80075fa:	4639      	mov	r1, r7
 80075fc:	9002      	str	r0, [sp, #8]
 80075fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007602:	4648      	mov	r0, r9
 8007604:	f000 fc5a 	bl	8007ebc <__mcmp>
 8007608:	462a      	mov	r2, r5
 800760a:	9008      	str	r0, [sp, #32]
 800760c:	4621      	mov	r1, r4
 800760e:	4658      	mov	r0, fp
 8007610:	f000 fc70 	bl	8007ef4 <__mdiff>
 8007614:	68c2      	ldr	r2, [r0, #12]
 8007616:	4606      	mov	r6, r0
 8007618:	bb02      	cbnz	r2, 800765c <_dtoa_r+0xa1c>
 800761a:	4601      	mov	r1, r0
 800761c:	4648      	mov	r0, r9
 800761e:	f000 fc4d 	bl	8007ebc <__mcmp>
 8007622:	4602      	mov	r2, r0
 8007624:	4631      	mov	r1, r6
 8007626:	4658      	mov	r0, fp
 8007628:	920e      	str	r2, [sp, #56]	@ 0x38
 800762a:	f000 fa0d 	bl	8007a48 <_Bfree>
 800762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007632:	9e07      	ldr	r6, [sp, #28]
 8007634:	ea43 0102 	orr.w	r1, r3, r2
 8007638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800763a:	4319      	orrs	r1, r3
 800763c:	d110      	bne.n	8007660 <_dtoa_r+0xa20>
 800763e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007642:	d029      	beq.n	8007698 <_dtoa_r+0xa58>
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	dd02      	ble.n	8007650 <_dtoa_r+0xa10>
 800764a:	9b02      	ldr	r3, [sp, #8]
 800764c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007650:	9b00      	ldr	r3, [sp, #0]
 8007652:	f883 8000 	strb.w	r8, [r3]
 8007656:	e63f      	b.n	80072d8 <_dtoa_r+0x698>
 8007658:	4628      	mov	r0, r5
 800765a:	e7bb      	b.n	80075d4 <_dtoa_r+0x994>
 800765c:	2201      	movs	r2, #1
 800765e:	e7e1      	b.n	8007624 <_dtoa_r+0x9e4>
 8007660:	9b08      	ldr	r3, [sp, #32]
 8007662:	2b00      	cmp	r3, #0
 8007664:	db04      	blt.n	8007670 <_dtoa_r+0xa30>
 8007666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007668:	430b      	orrs	r3, r1
 800766a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800766c:	430b      	orrs	r3, r1
 800766e:	d120      	bne.n	80076b2 <_dtoa_r+0xa72>
 8007670:	2a00      	cmp	r2, #0
 8007672:	dded      	ble.n	8007650 <_dtoa_r+0xa10>
 8007674:	4649      	mov	r1, r9
 8007676:	2201      	movs	r2, #1
 8007678:	4658      	mov	r0, fp
 800767a:	f000 fbb3 	bl	8007de4 <__lshift>
 800767e:	4621      	mov	r1, r4
 8007680:	4681      	mov	r9, r0
 8007682:	f000 fc1b 	bl	8007ebc <__mcmp>
 8007686:	2800      	cmp	r0, #0
 8007688:	dc03      	bgt.n	8007692 <_dtoa_r+0xa52>
 800768a:	d1e1      	bne.n	8007650 <_dtoa_r+0xa10>
 800768c:	f018 0f01 	tst.w	r8, #1
 8007690:	d0de      	beq.n	8007650 <_dtoa_r+0xa10>
 8007692:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007696:	d1d8      	bne.n	800764a <_dtoa_r+0xa0a>
 8007698:	9a00      	ldr	r2, [sp, #0]
 800769a:	2339      	movs	r3, #57	@ 0x39
 800769c:	7013      	strb	r3, [r2, #0]
 800769e:	4633      	mov	r3, r6
 80076a0:	461e      	mov	r6, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076a8:	2a39      	cmp	r2, #57	@ 0x39
 80076aa:	d052      	beq.n	8007752 <_dtoa_r+0xb12>
 80076ac:	3201      	adds	r2, #1
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	e612      	b.n	80072d8 <_dtoa_r+0x698>
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	dd07      	ble.n	80076c6 <_dtoa_r+0xa86>
 80076b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ba:	d0ed      	beq.n	8007698 <_dtoa_r+0xa58>
 80076bc:	9a00      	ldr	r2, [sp, #0]
 80076be:	f108 0301 	add.w	r3, r8, #1
 80076c2:	7013      	strb	r3, [r2, #0]
 80076c4:	e608      	b.n	80072d8 <_dtoa_r+0x698>
 80076c6:	9b07      	ldr	r3, [sp, #28]
 80076c8:	9a07      	ldr	r2, [sp, #28]
 80076ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80076ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d028      	beq.n	8007726 <_dtoa_r+0xae6>
 80076d4:	4649      	mov	r1, r9
 80076d6:	2300      	movs	r3, #0
 80076d8:	220a      	movs	r2, #10
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 f9d6 	bl	8007a8c <__multadd>
 80076e0:	42af      	cmp	r7, r5
 80076e2:	4681      	mov	r9, r0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	f04f 020a 	mov.w	r2, #10
 80076ec:	4639      	mov	r1, r7
 80076ee:	4658      	mov	r0, fp
 80076f0:	d107      	bne.n	8007702 <_dtoa_r+0xac2>
 80076f2:	f000 f9cb 	bl	8007a8c <__multadd>
 80076f6:	4607      	mov	r7, r0
 80076f8:	4605      	mov	r5, r0
 80076fa:	9b07      	ldr	r3, [sp, #28]
 80076fc:	3301      	adds	r3, #1
 80076fe:	9307      	str	r3, [sp, #28]
 8007700:	e774      	b.n	80075ec <_dtoa_r+0x9ac>
 8007702:	f000 f9c3 	bl	8007a8c <__multadd>
 8007706:	4629      	mov	r1, r5
 8007708:	4607      	mov	r7, r0
 800770a:	2300      	movs	r3, #0
 800770c:	220a      	movs	r2, #10
 800770e:	4658      	mov	r0, fp
 8007710:	f000 f9bc 	bl	8007a8c <__multadd>
 8007714:	4605      	mov	r5, r0
 8007716:	e7f0      	b.n	80076fa <_dtoa_r+0xaba>
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	bfcc      	ite	gt
 800771e:	461e      	movgt	r6, r3
 8007720:	2601      	movle	r6, #1
 8007722:	4456      	add	r6, sl
 8007724:	2700      	movs	r7, #0
 8007726:	4649      	mov	r1, r9
 8007728:	2201      	movs	r2, #1
 800772a:	4658      	mov	r0, fp
 800772c:	f000 fb5a 	bl	8007de4 <__lshift>
 8007730:	4621      	mov	r1, r4
 8007732:	4681      	mov	r9, r0
 8007734:	f000 fbc2 	bl	8007ebc <__mcmp>
 8007738:	2800      	cmp	r0, #0
 800773a:	dcb0      	bgt.n	800769e <_dtoa_r+0xa5e>
 800773c:	d102      	bne.n	8007744 <_dtoa_r+0xb04>
 800773e:	f018 0f01 	tst.w	r8, #1
 8007742:	d1ac      	bne.n	800769e <_dtoa_r+0xa5e>
 8007744:	4633      	mov	r3, r6
 8007746:	461e      	mov	r6, r3
 8007748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800774c:	2a30      	cmp	r2, #48	@ 0x30
 800774e:	d0fa      	beq.n	8007746 <_dtoa_r+0xb06>
 8007750:	e5c2      	b.n	80072d8 <_dtoa_r+0x698>
 8007752:	459a      	cmp	sl, r3
 8007754:	d1a4      	bne.n	80076a0 <_dtoa_r+0xa60>
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	3301      	adds	r3, #1
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	2331      	movs	r3, #49	@ 0x31
 800775e:	f88a 3000 	strb.w	r3, [sl]
 8007762:	e5b9      	b.n	80072d8 <_dtoa_r+0x698>
 8007764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007766:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80077c4 <_dtoa_r+0xb84>
 800776a:	b11b      	cbz	r3, 8007774 <_dtoa_r+0xb34>
 800776c:	f10a 0308 	add.w	r3, sl, #8
 8007770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	4650      	mov	r0, sl
 8007776:	b019      	add	sp, #100	@ 0x64
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777e:	2b01      	cmp	r3, #1
 8007780:	f77f ae37 	ble.w	80073f2 <_dtoa_r+0x7b2>
 8007784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007786:	930a      	str	r3, [sp, #40]	@ 0x28
 8007788:	2001      	movs	r0, #1
 800778a:	e655      	b.n	8007438 <_dtoa_r+0x7f8>
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f77f aed6 	ble.w	8007540 <_dtoa_r+0x900>
 8007794:	4656      	mov	r6, sl
 8007796:	4621      	mov	r1, r4
 8007798:	4648      	mov	r0, r9
 800779a:	f7ff f9c8 	bl	8006b2e <quorem>
 800779e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077a2:	f806 8b01 	strb.w	r8, [r6], #1
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	eba6 020a 	sub.w	r2, r6, sl
 80077ac:	4293      	cmp	r3, r2
 80077ae:	ddb3      	ble.n	8007718 <_dtoa_r+0xad8>
 80077b0:	4649      	mov	r1, r9
 80077b2:	2300      	movs	r3, #0
 80077b4:	220a      	movs	r2, #10
 80077b6:	4658      	mov	r0, fp
 80077b8:	f000 f968 	bl	8007a8c <__multadd>
 80077bc:	4681      	mov	r9, r0
 80077be:	e7ea      	b.n	8007796 <_dtoa_r+0xb56>
 80077c0:	08009460 	.word	0x08009460
 80077c4:	080093e4 	.word	0x080093e4

080077c8 <_free_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4605      	mov	r5, r0
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d041      	beq.n	8007854 <_free_r+0x8c>
 80077d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d4:	1f0c      	subs	r4, r1, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bfb8      	it	lt
 80077da:	18e4      	addlt	r4, r4, r3
 80077dc:	f000 f8e8 	bl	80079b0 <__malloc_lock>
 80077e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007858 <_free_r+0x90>)
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	b933      	cbnz	r3, 80077f4 <_free_r+0x2c>
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	6014      	str	r4, [r2, #0]
 80077ea:	4628      	mov	r0, r5
 80077ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f0:	f000 b8e4 	b.w	80079bc <__malloc_unlock>
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d908      	bls.n	800780a <_free_r+0x42>
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	1821      	adds	r1, r4, r0
 80077fc:	428b      	cmp	r3, r1
 80077fe:	bf01      	itttt	eq
 8007800:	6819      	ldreq	r1, [r3, #0]
 8007802:	685b      	ldreq	r3, [r3, #4]
 8007804:	1809      	addeq	r1, r1, r0
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	e7ed      	b.n	80077e6 <_free_r+0x1e>
 800780a:	461a      	mov	r2, r3
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b10b      	cbz	r3, 8007814 <_free_r+0x4c>
 8007810:	42a3      	cmp	r3, r4
 8007812:	d9fa      	bls.n	800780a <_free_r+0x42>
 8007814:	6811      	ldr	r1, [r2, #0]
 8007816:	1850      	adds	r0, r2, r1
 8007818:	42a0      	cmp	r0, r4
 800781a:	d10b      	bne.n	8007834 <_free_r+0x6c>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	4401      	add	r1, r0
 8007820:	1850      	adds	r0, r2, r1
 8007822:	4283      	cmp	r3, r0
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	d1e0      	bne.n	80077ea <_free_r+0x22>
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	6053      	str	r3, [r2, #4]
 800782e:	4408      	add	r0, r1
 8007830:	6010      	str	r0, [r2, #0]
 8007832:	e7da      	b.n	80077ea <_free_r+0x22>
 8007834:	d902      	bls.n	800783c <_free_r+0x74>
 8007836:	230c      	movs	r3, #12
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	e7d6      	b.n	80077ea <_free_r+0x22>
 800783c:	6820      	ldr	r0, [r4, #0]
 800783e:	1821      	adds	r1, r4, r0
 8007840:	428b      	cmp	r3, r1
 8007842:	bf04      	itt	eq
 8007844:	6819      	ldreq	r1, [r3, #0]
 8007846:	685b      	ldreq	r3, [r3, #4]
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	bf04      	itt	eq
 800784c:	1809      	addeq	r1, r1, r0
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	6054      	str	r4, [r2, #4]
 8007852:	e7ca      	b.n	80077ea <_free_r+0x22>
 8007854:	bd38      	pop	{r3, r4, r5, pc}
 8007856:	bf00      	nop
 8007858:	20000abc 	.word	0x20000abc

0800785c <malloc>:
 800785c:	4b02      	ldr	r3, [pc, #8]	@ (8007868 <malloc+0xc>)
 800785e:	4601      	mov	r1, r0
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f000 b825 	b.w	80078b0 <_malloc_r>
 8007866:	bf00      	nop
 8007868:	20000020 	.word	0x20000020

0800786c <sbrk_aligned>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4e0f      	ldr	r6, [pc, #60]	@ (80078ac <sbrk_aligned+0x40>)
 8007870:	460c      	mov	r4, r1
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	4605      	mov	r5, r0
 8007876:	b911      	cbnz	r1, 800787e <sbrk_aligned+0x12>
 8007878:	f000 fe2c 	bl	80084d4 <_sbrk_r>
 800787c:	6030      	str	r0, [r6, #0]
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f000 fe27 	bl	80084d4 <_sbrk_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	d103      	bne.n	8007892 <sbrk_aligned+0x26>
 800788a:	f04f 34ff 	mov.w	r4, #4294967295
 800788e:	4620      	mov	r0, r4
 8007890:	bd70      	pop	{r4, r5, r6, pc}
 8007892:	1cc4      	adds	r4, r0, #3
 8007894:	f024 0403 	bic.w	r4, r4, #3
 8007898:	42a0      	cmp	r0, r4
 800789a:	d0f8      	beq.n	800788e <sbrk_aligned+0x22>
 800789c:	1a21      	subs	r1, r4, r0
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 fe18 	bl	80084d4 <_sbrk_r>
 80078a4:	3001      	adds	r0, #1
 80078a6:	d1f2      	bne.n	800788e <sbrk_aligned+0x22>
 80078a8:	e7ef      	b.n	800788a <sbrk_aligned+0x1e>
 80078aa:	bf00      	nop
 80078ac:	20000ab8 	.word	0x20000ab8

080078b0 <_malloc_r>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	1ccd      	adds	r5, r1, #3
 80078b6:	f025 0503 	bic.w	r5, r5, #3
 80078ba:	3508      	adds	r5, #8
 80078bc:	2d0c      	cmp	r5, #12
 80078be:	bf38      	it	cc
 80078c0:	250c      	movcc	r5, #12
 80078c2:	2d00      	cmp	r5, #0
 80078c4:	4606      	mov	r6, r0
 80078c6:	db01      	blt.n	80078cc <_malloc_r+0x1c>
 80078c8:	42a9      	cmp	r1, r5
 80078ca:	d904      	bls.n	80078d6 <_malloc_r+0x26>
 80078cc:	230c      	movs	r3, #12
 80078ce:	6033      	str	r3, [r6, #0]
 80078d0:	2000      	movs	r0, #0
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079ac <_malloc_r+0xfc>
 80078da:	f000 f869 	bl	80079b0 <__malloc_lock>
 80078de:	f8d8 3000 	ldr.w	r3, [r8]
 80078e2:	461c      	mov	r4, r3
 80078e4:	bb44      	cbnz	r4, 8007938 <_malloc_r+0x88>
 80078e6:	4629      	mov	r1, r5
 80078e8:	4630      	mov	r0, r6
 80078ea:	f7ff ffbf 	bl	800786c <sbrk_aligned>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	4604      	mov	r4, r0
 80078f2:	d158      	bne.n	80079a6 <_malloc_r+0xf6>
 80078f4:	f8d8 4000 	ldr.w	r4, [r8]
 80078f8:	4627      	mov	r7, r4
 80078fa:	2f00      	cmp	r7, #0
 80078fc:	d143      	bne.n	8007986 <_malloc_r+0xd6>
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d04b      	beq.n	800799a <_malloc_r+0xea>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	4639      	mov	r1, r7
 8007906:	4630      	mov	r0, r6
 8007908:	eb04 0903 	add.w	r9, r4, r3
 800790c:	f000 fde2 	bl	80084d4 <_sbrk_r>
 8007910:	4581      	cmp	r9, r0
 8007912:	d142      	bne.n	800799a <_malloc_r+0xea>
 8007914:	6821      	ldr	r1, [r4, #0]
 8007916:	1a6d      	subs	r5, r5, r1
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa6 	bl	800786c <sbrk_aligned>
 8007920:	3001      	adds	r0, #1
 8007922:	d03a      	beq.n	800799a <_malloc_r+0xea>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	442b      	add	r3, r5
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	f8d8 3000 	ldr.w	r3, [r8]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	bb62      	cbnz	r2, 800798c <_malloc_r+0xdc>
 8007932:	f8c8 7000 	str.w	r7, [r8]
 8007936:	e00f      	b.n	8007958 <_malloc_r+0xa8>
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	1b52      	subs	r2, r2, r5
 800793c:	d420      	bmi.n	8007980 <_malloc_r+0xd0>
 800793e:	2a0b      	cmp	r2, #11
 8007940:	d917      	bls.n	8007972 <_malloc_r+0xc2>
 8007942:	1961      	adds	r1, r4, r5
 8007944:	42a3      	cmp	r3, r4
 8007946:	6025      	str	r5, [r4, #0]
 8007948:	bf18      	it	ne
 800794a:	6059      	strne	r1, [r3, #4]
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	bf08      	it	eq
 8007950:	f8c8 1000 	streq.w	r1, [r8]
 8007954:	5162      	str	r2, [r4, r5]
 8007956:	604b      	str	r3, [r1, #4]
 8007958:	4630      	mov	r0, r6
 800795a:	f000 f82f 	bl	80079bc <__malloc_unlock>
 800795e:	f104 000b 	add.w	r0, r4, #11
 8007962:	1d23      	adds	r3, r4, #4
 8007964:	f020 0007 	bic.w	r0, r0, #7
 8007968:	1ac2      	subs	r2, r0, r3
 800796a:	bf1c      	itt	ne
 800796c:	1a1b      	subne	r3, r3, r0
 800796e:	50a3      	strne	r3, [r4, r2]
 8007970:	e7af      	b.n	80078d2 <_malloc_r+0x22>
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	42a3      	cmp	r3, r4
 8007976:	bf0c      	ite	eq
 8007978:	f8c8 2000 	streq.w	r2, [r8]
 800797c:	605a      	strne	r2, [r3, #4]
 800797e:	e7eb      	b.n	8007958 <_malloc_r+0xa8>
 8007980:	4623      	mov	r3, r4
 8007982:	6864      	ldr	r4, [r4, #4]
 8007984:	e7ae      	b.n	80078e4 <_malloc_r+0x34>
 8007986:	463c      	mov	r4, r7
 8007988:	687f      	ldr	r7, [r7, #4]
 800798a:	e7b6      	b.n	80078fa <_malloc_r+0x4a>
 800798c:	461a      	mov	r2, r3
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	42a3      	cmp	r3, r4
 8007992:	d1fb      	bne.n	800798c <_malloc_r+0xdc>
 8007994:	2300      	movs	r3, #0
 8007996:	6053      	str	r3, [r2, #4]
 8007998:	e7de      	b.n	8007958 <_malloc_r+0xa8>
 800799a:	230c      	movs	r3, #12
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 f80c 	bl	80079bc <__malloc_unlock>
 80079a4:	e794      	b.n	80078d0 <_malloc_r+0x20>
 80079a6:	6005      	str	r5, [r0, #0]
 80079a8:	e7d6      	b.n	8007958 <_malloc_r+0xa8>
 80079aa:	bf00      	nop
 80079ac:	20000abc 	.word	0x20000abc

080079b0 <__malloc_lock>:
 80079b0:	4801      	ldr	r0, [pc, #4]	@ (80079b8 <__malloc_lock+0x8>)
 80079b2:	f7ff b8ac 	b.w	8006b0e <__retarget_lock_acquire_recursive>
 80079b6:	bf00      	nop
 80079b8:	20000ab4 	.word	0x20000ab4

080079bc <__malloc_unlock>:
 80079bc:	4801      	ldr	r0, [pc, #4]	@ (80079c4 <__malloc_unlock+0x8>)
 80079be:	f7ff b8a7 	b.w	8006b10 <__retarget_lock_release_recursive>
 80079c2:	bf00      	nop
 80079c4:	20000ab4 	.word	0x20000ab4

080079c8 <_Balloc>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	69c6      	ldr	r6, [r0, #28]
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	b976      	cbnz	r6, 80079f0 <_Balloc+0x28>
 80079d2:	2010      	movs	r0, #16
 80079d4:	f7ff ff42 	bl	800785c <malloc>
 80079d8:	4602      	mov	r2, r0
 80079da:	61e0      	str	r0, [r4, #28]
 80079dc:	b920      	cbnz	r0, 80079e8 <_Balloc+0x20>
 80079de:	4b18      	ldr	r3, [pc, #96]	@ (8007a40 <_Balloc+0x78>)
 80079e0:	4818      	ldr	r0, [pc, #96]	@ (8007a44 <_Balloc+0x7c>)
 80079e2:	216b      	movs	r1, #107	@ 0x6b
 80079e4:	f000 fd86 	bl	80084f4 <__assert_func>
 80079e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079ec:	6006      	str	r6, [r0, #0]
 80079ee:	60c6      	str	r6, [r0, #12]
 80079f0:	69e6      	ldr	r6, [r4, #28]
 80079f2:	68f3      	ldr	r3, [r6, #12]
 80079f4:	b183      	cbz	r3, 8007a18 <_Balloc+0x50>
 80079f6:	69e3      	ldr	r3, [r4, #28]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079fe:	b9b8      	cbnz	r0, 8007a30 <_Balloc+0x68>
 8007a00:	2101      	movs	r1, #1
 8007a02:	fa01 f605 	lsl.w	r6, r1, r5
 8007a06:	1d72      	adds	r2, r6, #5
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fd90 	bl	8008530 <_calloc_r>
 8007a10:	b160      	cbz	r0, 8007a2c <_Balloc+0x64>
 8007a12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a16:	e00e      	b.n	8007a36 <_Balloc+0x6e>
 8007a18:	2221      	movs	r2, #33	@ 0x21
 8007a1a:	2104      	movs	r1, #4
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fd87 	bl	8008530 <_calloc_r>
 8007a22:	69e3      	ldr	r3, [r4, #28]
 8007a24:	60f0      	str	r0, [r6, #12]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e4      	bne.n	80079f6 <_Balloc+0x2e>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	6802      	ldr	r2, [r0, #0]
 8007a32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a36:	2300      	movs	r3, #0
 8007a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a3c:	e7f7      	b.n	8007a2e <_Balloc+0x66>
 8007a3e:	bf00      	nop
 8007a40:	080093f1 	.word	0x080093f1
 8007a44:	08009471 	.word	0x08009471

08007a48 <_Bfree>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	69c6      	ldr	r6, [r0, #28]
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	b976      	cbnz	r6, 8007a70 <_Bfree+0x28>
 8007a52:	2010      	movs	r0, #16
 8007a54:	f7ff ff02 	bl	800785c <malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	61e8      	str	r0, [r5, #28]
 8007a5c:	b920      	cbnz	r0, 8007a68 <_Bfree+0x20>
 8007a5e:	4b09      	ldr	r3, [pc, #36]	@ (8007a84 <_Bfree+0x3c>)
 8007a60:	4809      	ldr	r0, [pc, #36]	@ (8007a88 <_Bfree+0x40>)
 8007a62:	218f      	movs	r1, #143	@ 0x8f
 8007a64:	f000 fd46 	bl	80084f4 <__assert_func>
 8007a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a6c:	6006      	str	r6, [r0, #0]
 8007a6e:	60c6      	str	r6, [r0, #12]
 8007a70:	b13c      	cbz	r4, 8007a82 <_Bfree+0x3a>
 8007a72:	69eb      	ldr	r3, [r5, #28]
 8007a74:	6862      	ldr	r2, [r4, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a7c:	6021      	str	r1, [r4, #0]
 8007a7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	080093f1 	.word	0x080093f1
 8007a88:	08009471 	.word	0x08009471

08007a8c <__multadd>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	690d      	ldr	r5, [r1, #16]
 8007a92:	4607      	mov	r7, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	461e      	mov	r6, r3
 8007a98:	f101 0c14 	add.w	ip, r1, #20
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f8dc 3000 	ldr.w	r3, [ip]
 8007aa2:	b299      	uxth	r1, r3
 8007aa4:	fb02 6101 	mla	r1, r2, r1, r6
 8007aa8:	0c1e      	lsrs	r6, r3, #16
 8007aaa:	0c0b      	lsrs	r3, r1, #16
 8007aac:	fb02 3306 	mla	r3, r2, r6, r3
 8007ab0:	b289      	uxth	r1, r1
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ab8:	4285      	cmp	r5, r0
 8007aba:	f84c 1b04 	str.w	r1, [ip], #4
 8007abe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ac2:	dcec      	bgt.n	8007a9e <__multadd+0x12>
 8007ac4:	b30e      	cbz	r6, 8007b0a <__multadd+0x7e>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	dc19      	bgt.n	8007b00 <__multadd+0x74>
 8007acc:	6861      	ldr	r1, [r4, #4]
 8007ace:	4638      	mov	r0, r7
 8007ad0:	3101      	adds	r1, #1
 8007ad2:	f7ff ff79 	bl	80079c8 <_Balloc>
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	b928      	cbnz	r0, 8007ae6 <__multadd+0x5a>
 8007ada:	4602      	mov	r2, r0
 8007adc:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <__multadd+0x84>)
 8007ade:	480d      	ldr	r0, [pc, #52]	@ (8007b14 <__multadd+0x88>)
 8007ae0:	21ba      	movs	r1, #186	@ 0xba
 8007ae2:	f000 fd07 	bl	80084f4 <__assert_func>
 8007ae6:	6922      	ldr	r2, [r4, #16]
 8007ae8:	3202      	adds	r2, #2
 8007aea:	f104 010c 	add.w	r1, r4, #12
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	300c      	adds	r0, #12
 8007af2:	f7ff f80e 	bl	8006b12 <memcpy>
 8007af6:	4621      	mov	r1, r4
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7ff ffa5 	bl	8007a48 <_Bfree>
 8007afe:	4644      	mov	r4, r8
 8007b00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b04:	3501      	adds	r5, #1
 8007b06:	615e      	str	r6, [r3, #20]
 8007b08:	6125      	str	r5, [r4, #16]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b10:	08009460 	.word	0x08009460
 8007b14:	08009471 	.word	0x08009471

08007b18 <__hi0bits>:
 8007b18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	bf36      	itet	cc
 8007b20:	0403      	lslcc	r3, r0, #16
 8007b22:	2000      	movcs	r0, #0
 8007b24:	2010      	movcc	r0, #16
 8007b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b2a:	bf3c      	itt	cc
 8007b2c:	021b      	lslcc	r3, r3, #8
 8007b2e:	3008      	addcc	r0, #8
 8007b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b34:	bf3c      	itt	cc
 8007b36:	011b      	lslcc	r3, r3, #4
 8007b38:	3004      	addcc	r0, #4
 8007b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3e:	bf3c      	itt	cc
 8007b40:	009b      	lslcc	r3, r3, #2
 8007b42:	3002      	addcc	r0, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	db05      	blt.n	8007b54 <__hi0bits+0x3c>
 8007b48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b4c:	f100 0001 	add.w	r0, r0, #1
 8007b50:	bf08      	it	eq
 8007b52:	2020      	moveq	r0, #32
 8007b54:	4770      	bx	lr

08007b56 <__lo0bits>:
 8007b56:	6803      	ldr	r3, [r0, #0]
 8007b58:	4602      	mov	r2, r0
 8007b5a:	f013 0007 	ands.w	r0, r3, #7
 8007b5e:	d00b      	beq.n	8007b78 <__lo0bits+0x22>
 8007b60:	07d9      	lsls	r1, r3, #31
 8007b62:	d421      	bmi.n	8007ba8 <__lo0bits+0x52>
 8007b64:	0798      	lsls	r0, r3, #30
 8007b66:	bf49      	itett	mi
 8007b68:	085b      	lsrmi	r3, r3, #1
 8007b6a:	089b      	lsrpl	r3, r3, #2
 8007b6c:	2001      	movmi	r0, #1
 8007b6e:	6013      	strmi	r3, [r2, #0]
 8007b70:	bf5c      	itt	pl
 8007b72:	6013      	strpl	r3, [r2, #0]
 8007b74:	2002      	movpl	r0, #2
 8007b76:	4770      	bx	lr
 8007b78:	b299      	uxth	r1, r3
 8007b7a:	b909      	cbnz	r1, 8007b80 <__lo0bits+0x2a>
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	2010      	movs	r0, #16
 8007b80:	b2d9      	uxtb	r1, r3
 8007b82:	b909      	cbnz	r1, 8007b88 <__lo0bits+0x32>
 8007b84:	3008      	adds	r0, #8
 8007b86:	0a1b      	lsrs	r3, r3, #8
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	bf04      	itt	eq
 8007b8c:	091b      	lsreq	r3, r3, #4
 8007b8e:	3004      	addeq	r0, #4
 8007b90:	0799      	lsls	r1, r3, #30
 8007b92:	bf04      	itt	eq
 8007b94:	089b      	lsreq	r3, r3, #2
 8007b96:	3002      	addeq	r0, #2
 8007b98:	07d9      	lsls	r1, r3, #31
 8007b9a:	d403      	bmi.n	8007ba4 <__lo0bits+0x4e>
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	f100 0001 	add.w	r0, r0, #1
 8007ba2:	d003      	beq.n	8007bac <__lo0bits+0x56>
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	4770      	bx	lr
 8007ba8:	2000      	movs	r0, #0
 8007baa:	4770      	bx	lr
 8007bac:	2020      	movs	r0, #32
 8007bae:	4770      	bx	lr

08007bb0 <__i2b>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	f7ff ff07 	bl	80079c8 <_Balloc>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	b928      	cbnz	r0, 8007bca <__i2b+0x1a>
 8007bbe:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <__i2b+0x24>)
 8007bc0:	4805      	ldr	r0, [pc, #20]	@ (8007bd8 <__i2b+0x28>)
 8007bc2:	f240 1145 	movw	r1, #325	@ 0x145
 8007bc6:	f000 fc95 	bl	80084f4 <__assert_func>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	6144      	str	r4, [r0, #20]
 8007bce:	6103      	str	r3, [r0, #16]
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	bf00      	nop
 8007bd4:	08009460 	.word	0x08009460
 8007bd8:	08009471 	.word	0x08009471

08007bdc <__multiply>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4614      	mov	r4, r2
 8007be2:	690a      	ldr	r2, [r1, #16]
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	bfa8      	it	ge
 8007bea:	4623      	movge	r3, r4
 8007bec:	460f      	mov	r7, r1
 8007bee:	bfa4      	itt	ge
 8007bf0:	460c      	movge	r4, r1
 8007bf2:	461f      	movge	r7, r3
 8007bf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007bf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007bfc:	68a3      	ldr	r3, [r4, #8]
 8007bfe:	6861      	ldr	r1, [r4, #4]
 8007c00:	eb0a 0609 	add.w	r6, sl, r9
 8007c04:	42b3      	cmp	r3, r6
 8007c06:	b085      	sub	sp, #20
 8007c08:	bfb8      	it	lt
 8007c0a:	3101      	addlt	r1, #1
 8007c0c:	f7ff fedc 	bl	80079c8 <_Balloc>
 8007c10:	b930      	cbnz	r0, 8007c20 <__multiply+0x44>
 8007c12:	4602      	mov	r2, r0
 8007c14:	4b44      	ldr	r3, [pc, #272]	@ (8007d28 <__multiply+0x14c>)
 8007c16:	4845      	ldr	r0, [pc, #276]	@ (8007d2c <__multiply+0x150>)
 8007c18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c1c:	f000 fc6a 	bl	80084f4 <__assert_func>
 8007c20:	f100 0514 	add.w	r5, r0, #20
 8007c24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c28:	462b      	mov	r3, r5
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	4543      	cmp	r3, r8
 8007c2e:	d321      	bcc.n	8007c74 <__multiply+0x98>
 8007c30:	f107 0114 	add.w	r1, r7, #20
 8007c34:	f104 0214 	add.w	r2, r4, #20
 8007c38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	1b13      	subs	r3, r2, r4
 8007c44:	3b15      	subs	r3, #21
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	f104 0715 	add.w	r7, r4, #21
 8007c50:	42ba      	cmp	r2, r7
 8007c52:	bf38      	it	cc
 8007c54:	2304      	movcc	r3, #4
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	9b02      	ldr	r3, [sp, #8]
 8007c5a:	9103      	str	r1, [sp, #12]
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	d80c      	bhi.n	8007c7a <__multiply+0x9e>
 8007c60:	2e00      	cmp	r6, #0
 8007c62:	dd03      	ble.n	8007c6c <__multiply+0x90>
 8007c64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d05b      	beq.n	8007d24 <__multiply+0x148>
 8007c6c:	6106      	str	r6, [r0, #16]
 8007c6e:	b005      	add	sp, #20
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	f843 2b04 	str.w	r2, [r3], #4
 8007c78:	e7d8      	b.n	8007c2c <__multiply+0x50>
 8007c7a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c7e:	f1ba 0f00 	cmp.w	sl, #0
 8007c82:	d024      	beq.n	8007cce <__multiply+0xf2>
 8007c84:	f104 0e14 	add.w	lr, r4, #20
 8007c88:	46a9      	mov	r9, r5
 8007c8a:	f04f 0c00 	mov.w	ip, #0
 8007c8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c92:	f8d9 3000 	ldr.w	r3, [r9]
 8007c96:	fa1f fb87 	uxth.w	fp, r7
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ca0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ca4:	f8d9 7000 	ldr.w	r7, [r9]
 8007ca8:	4463      	add	r3, ip
 8007caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cae:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cbc:	4572      	cmp	r2, lr
 8007cbe:	f849 3b04 	str.w	r3, [r9], #4
 8007cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cc6:	d8e2      	bhi.n	8007c8e <__multiply+0xb2>
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	f845 c003 	str.w	ip, [r5, r3]
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007cd4:	3104      	adds	r1, #4
 8007cd6:	f1b9 0f00 	cmp.w	r9, #0
 8007cda:	d021      	beq.n	8007d20 <__multiply+0x144>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	f104 0c14 	add.w	ip, r4, #20
 8007ce2:	46ae      	mov	lr, r5
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	f8bc b000 	ldrh.w	fp, [ip]
 8007cec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cf0:	fb09 770b 	mla	r7, r9, fp, r7
 8007cf4:	4457      	add	r7, sl
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cfc:	f84e 3b04 	str.w	r3, [lr], #4
 8007d00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d08:	f8be 3000 	ldrh.w	r3, [lr]
 8007d0c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d14:	4562      	cmp	r2, ip
 8007d16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d1a:	d8e5      	bhi.n	8007ce8 <__multiply+0x10c>
 8007d1c:	9f01      	ldr	r7, [sp, #4]
 8007d1e:	51eb      	str	r3, [r5, r7]
 8007d20:	3504      	adds	r5, #4
 8007d22:	e799      	b.n	8007c58 <__multiply+0x7c>
 8007d24:	3e01      	subs	r6, #1
 8007d26:	e79b      	b.n	8007c60 <__multiply+0x84>
 8007d28:	08009460 	.word	0x08009460
 8007d2c:	08009471 	.word	0x08009471

08007d30 <__pow5mult>:
 8007d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d34:	4615      	mov	r5, r2
 8007d36:	f012 0203 	ands.w	r2, r2, #3
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	460e      	mov	r6, r1
 8007d3e:	d007      	beq.n	8007d50 <__pow5mult+0x20>
 8007d40:	4c25      	ldr	r4, [pc, #148]	@ (8007dd8 <__pow5mult+0xa8>)
 8007d42:	3a01      	subs	r2, #1
 8007d44:	2300      	movs	r3, #0
 8007d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d4a:	f7ff fe9f 	bl	8007a8c <__multadd>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	10ad      	asrs	r5, r5, #2
 8007d52:	d03d      	beq.n	8007dd0 <__pow5mult+0xa0>
 8007d54:	69fc      	ldr	r4, [r7, #28]
 8007d56:	b97c      	cbnz	r4, 8007d78 <__pow5mult+0x48>
 8007d58:	2010      	movs	r0, #16
 8007d5a:	f7ff fd7f 	bl	800785c <malloc>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	61f8      	str	r0, [r7, #28]
 8007d62:	b928      	cbnz	r0, 8007d70 <__pow5mult+0x40>
 8007d64:	4b1d      	ldr	r3, [pc, #116]	@ (8007ddc <__pow5mult+0xac>)
 8007d66:	481e      	ldr	r0, [pc, #120]	@ (8007de0 <__pow5mult+0xb0>)
 8007d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d6c:	f000 fbc2 	bl	80084f4 <__assert_func>
 8007d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d74:	6004      	str	r4, [r0, #0]
 8007d76:	60c4      	str	r4, [r0, #12]
 8007d78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d80:	b94c      	cbnz	r4, 8007d96 <__pow5mult+0x66>
 8007d82:	f240 2171 	movw	r1, #625	@ 0x271
 8007d86:	4638      	mov	r0, r7
 8007d88:	f7ff ff12 	bl	8007bb0 <__i2b>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d92:	4604      	mov	r4, r0
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	f04f 0900 	mov.w	r9, #0
 8007d9a:	07eb      	lsls	r3, r5, #31
 8007d9c:	d50a      	bpl.n	8007db4 <__pow5mult+0x84>
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4622      	mov	r2, r4
 8007da2:	4638      	mov	r0, r7
 8007da4:	f7ff ff1a 	bl	8007bdc <__multiply>
 8007da8:	4631      	mov	r1, r6
 8007daa:	4680      	mov	r8, r0
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff fe4b 	bl	8007a48 <_Bfree>
 8007db2:	4646      	mov	r6, r8
 8007db4:	106d      	asrs	r5, r5, #1
 8007db6:	d00b      	beq.n	8007dd0 <__pow5mult+0xa0>
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	b938      	cbnz	r0, 8007dcc <__pow5mult+0x9c>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7ff ff0b 	bl	8007bdc <__multiply>
 8007dc6:	6020      	str	r0, [r4, #0]
 8007dc8:	f8c0 9000 	str.w	r9, [r0]
 8007dcc:	4604      	mov	r4, r0
 8007dce:	e7e4      	b.n	8007d9a <__pow5mult+0x6a>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd6:	bf00      	nop
 8007dd8:	080094cc 	.word	0x080094cc
 8007ddc:	080093f1 	.word	0x080093f1
 8007de0:	08009471 	.word	0x08009471

08007de4 <__lshift>:
 8007de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	460c      	mov	r4, r1
 8007dea:	6849      	ldr	r1, [r1, #4]
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007df2:	68a3      	ldr	r3, [r4, #8]
 8007df4:	4607      	mov	r7, r0
 8007df6:	4691      	mov	r9, r2
 8007df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dfc:	f108 0601 	add.w	r6, r8, #1
 8007e00:	42b3      	cmp	r3, r6
 8007e02:	db0b      	blt.n	8007e1c <__lshift+0x38>
 8007e04:	4638      	mov	r0, r7
 8007e06:	f7ff fddf 	bl	80079c8 <_Balloc>
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	b948      	cbnz	r0, 8007e22 <__lshift+0x3e>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	4b28      	ldr	r3, [pc, #160]	@ (8007eb4 <__lshift+0xd0>)
 8007e12:	4829      	ldr	r0, [pc, #164]	@ (8007eb8 <__lshift+0xd4>)
 8007e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e18:	f000 fb6c 	bl	80084f4 <__assert_func>
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	e7ee      	b.n	8007e00 <__lshift+0x1c>
 8007e22:	2300      	movs	r3, #0
 8007e24:	f100 0114 	add.w	r1, r0, #20
 8007e28:	f100 0210 	add.w	r2, r0, #16
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	4553      	cmp	r3, sl
 8007e30:	db33      	blt.n	8007e9a <__lshift+0xb6>
 8007e32:	6920      	ldr	r0, [r4, #16]
 8007e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e38:	f104 0314 	add.w	r3, r4, #20
 8007e3c:	f019 091f 	ands.w	r9, r9, #31
 8007e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e48:	d02b      	beq.n	8007ea2 <__lshift+0xbe>
 8007e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e4e:	468a      	mov	sl, r1
 8007e50:	2200      	movs	r2, #0
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	fa00 f009 	lsl.w	r0, r0, r9
 8007e58:	4310      	orrs	r0, r2
 8007e5a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e62:	459c      	cmp	ip, r3
 8007e64:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e68:	d8f3      	bhi.n	8007e52 <__lshift+0x6e>
 8007e6a:	ebac 0304 	sub.w	r3, ip, r4
 8007e6e:	3b15      	subs	r3, #21
 8007e70:	f023 0303 	bic.w	r3, r3, #3
 8007e74:	3304      	adds	r3, #4
 8007e76:	f104 0015 	add.w	r0, r4, #21
 8007e7a:	4584      	cmp	ip, r0
 8007e7c:	bf38      	it	cc
 8007e7e:	2304      	movcc	r3, #4
 8007e80:	50ca      	str	r2, [r1, r3]
 8007e82:	b10a      	cbz	r2, 8007e88 <__lshift+0xa4>
 8007e84:	f108 0602 	add.w	r6, r8, #2
 8007e88:	3e01      	subs	r6, #1
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	612e      	str	r6, [r5, #16]
 8007e8e:	4621      	mov	r1, r4
 8007e90:	f7ff fdda 	bl	8007a48 <_Bfree>
 8007e94:	4628      	mov	r0, r5
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	e7c5      	b.n	8007e2e <__lshift+0x4a>
 8007ea2:	3904      	subs	r1, #4
 8007ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eac:	459c      	cmp	ip, r3
 8007eae:	d8f9      	bhi.n	8007ea4 <__lshift+0xc0>
 8007eb0:	e7ea      	b.n	8007e88 <__lshift+0xa4>
 8007eb2:	bf00      	nop
 8007eb4:	08009460 	.word	0x08009460
 8007eb8:	08009471 	.word	0x08009471

08007ebc <__mcmp>:
 8007ebc:	690a      	ldr	r2, [r1, #16]
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6900      	ldr	r0, [r0, #16]
 8007ec2:	1a80      	subs	r0, r0, r2
 8007ec4:	b530      	push	{r4, r5, lr}
 8007ec6:	d10e      	bne.n	8007ee6 <__mcmp+0x2a>
 8007ec8:	3314      	adds	r3, #20
 8007eca:	3114      	adds	r1, #20
 8007ecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007edc:	4295      	cmp	r5, r2
 8007ede:	d003      	beq.n	8007ee8 <__mcmp+0x2c>
 8007ee0:	d205      	bcs.n	8007eee <__mcmp+0x32>
 8007ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee6:	bd30      	pop	{r4, r5, pc}
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d3f3      	bcc.n	8007ed4 <__mcmp+0x18>
 8007eec:	e7fb      	b.n	8007ee6 <__mcmp+0x2a>
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e7f9      	b.n	8007ee6 <__mcmp+0x2a>
	...

08007ef4 <__mdiff>:
 8007ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef8:	4689      	mov	r9, r1
 8007efa:	4606      	mov	r6, r0
 8007efc:	4611      	mov	r1, r2
 8007efe:	4648      	mov	r0, r9
 8007f00:	4614      	mov	r4, r2
 8007f02:	f7ff ffdb 	bl	8007ebc <__mcmp>
 8007f06:	1e05      	subs	r5, r0, #0
 8007f08:	d112      	bne.n	8007f30 <__mdiff+0x3c>
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff fd5b 	bl	80079c8 <_Balloc>
 8007f12:	4602      	mov	r2, r0
 8007f14:	b928      	cbnz	r0, 8007f22 <__mdiff+0x2e>
 8007f16:	4b3f      	ldr	r3, [pc, #252]	@ (8008014 <__mdiff+0x120>)
 8007f18:	f240 2137 	movw	r1, #567	@ 0x237
 8007f1c:	483e      	ldr	r0, [pc, #248]	@ (8008018 <__mdiff+0x124>)
 8007f1e:	f000 fae9 	bl	80084f4 <__assert_func>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	b003      	add	sp, #12
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	bfbc      	itt	lt
 8007f32:	464b      	movlt	r3, r9
 8007f34:	46a1      	movlt	r9, r4
 8007f36:	4630      	mov	r0, r6
 8007f38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f3c:	bfba      	itte	lt
 8007f3e:	461c      	movlt	r4, r3
 8007f40:	2501      	movlt	r5, #1
 8007f42:	2500      	movge	r5, #0
 8007f44:	f7ff fd40 	bl	80079c8 <_Balloc>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	b918      	cbnz	r0, 8007f54 <__mdiff+0x60>
 8007f4c:	4b31      	ldr	r3, [pc, #196]	@ (8008014 <__mdiff+0x120>)
 8007f4e:	f240 2145 	movw	r1, #581	@ 0x245
 8007f52:	e7e3      	b.n	8007f1c <__mdiff+0x28>
 8007f54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f58:	6926      	ldr	r6, [r4, #16]
 8007f5a:	60c5      	str	r5, [r0, #12]
 8007f5c:	f109 0310 	add.w	r3, r9, #16
 8007f60:	f109 0514 	add.w	r5, r9, #20
 8007f64:	f104 0e14 	add.w	lr, r4, #20
 8007f68:	f100 0b14 	add.w	fp, r0, #20
 8007f6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	46d9      	mov	r9, fp
 8007f78:	f04f 0c00 	mov.w	ip, #0
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	fa1f f38a 	uxth.w	r3, sl
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	b283      	uxth	r3, r0
 8007f90:	1acb      	subs	r3, r1, r3
 8007f92:	0c00      	lsrs	r0, r0, #16
 8007f94:	4463      	add	r3, ip
 8007f96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fa4:	4576      	cmp	r6, lr
 8007fa6:	f849 3b04 	str.w	r3, [r9], #4
 8007faa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fae:	d8e5      	bhi.n	8007f7c <__mdiff+0x88>
 8007fb0:	1b33      	subs	r3, r6, r4
 8007fb2:	3b15      	subs	r3, #21
 8007fb4:	f023 0303 	bic.w	r3, r3, #3
 8007fb8:	3415      	adds	r4, #21
 8007fba:	3304      	adds	r3, #4
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	bf38      	it	cc
 8007fc0:	2304      	movcc	r3, #4
 8007fc2:	441d      	add	r5, r3
 8007fc4:	445b      	add	r3, fp
 8007fc6:	461e      	mov	r6, r3
 8007fc8:	462c      	mov	r4, r5
 8007fca:	4544      	cmp	r4, r8
 8007fcc:	d30e      	bcc.n	8007fec <__mdiff+0xf8>
 8007fce:	f108 0103 	add.w	r1, r8, #3
 8007fd2:	1b49      	subs	r1, r1, r5
 8007fd4:	f021 0103 	bic.w	r1, r1, #3
 8007fd8:	3d03      	subs	r5, #3
 8007fda:	45a8      	cmp	r8, r5
 8007fdc:	bf38      	it	cc
 8007fde:	2100      	movcc	r1, #0
 8007fe0:	440b      	add	r3, r1
 8007fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fe6:	b191      	cbz	r1, 800800e <__mdiff+0x11a>
 8007fe8:	6117      	str	r7, [r2, #16]
 8007fea:	e79d      	b.n	8007f28 <__mdiff+0x34>
 8007fec:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ff0:	46e6      	mov	lr, ip
 8007ff2:	0c08      	lsrs	r0, r1, #16
 8007ff4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ff8:	4471      	add	r1, lr
 8007ffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ffe:	b289      	uxth	r1, r1
 8008000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008004:	f846 1b04 	str.w	r1, [r6], #4
 8008008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800800c:	e7dd      	b.n	8007fca <__mdiff+0xd6>
 800800e:	3f01      	subs	r7, #1
 8008010:	e7e7      	b.n	8007fe2 <__mdiff+0xee>
 8008012:	bf00      	nop
 8008014:	08009460 	.word	0x08009460
 8008018:	08009471 	.word	0x08009471

0800801c <__d2b>:
 800801c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008020:	460f      	mov	r7, r1
 8008022:	2101      	movs	r1, #1
 8008024:	ec59 8b10 	vmov	r8, r9, d0
 8008028:	4616      	mov	r6, r2
 800802a:	f7ff fccd 	bl	80079c8 <_Balloc>
 800802e:	4604      	mov	r4, r0
 8008030:	b930      	cbnz	r0, 8008040 <__d2b+0x24>
 8008032:	4602      	mov	r2, r0
 8008034:	4b23      	ldr	r3, [pc, #140]	@ (80080c4 <__d2b+0xa8>)
 8008036:	4824      	ldr	r0, [pc, #144]	@ (80080c8 <__d2b+0xac>)
 8008038:	f240 310f 	movw	r1, #783	@ 0x30f
 800803c:	f000 fa5a 	bl	80084f4 <__assert_func>
 8008040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008048:	b10d      	cbz	r5, 800804e <__d2b+0x32>
 800804a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	f1b8 0300 	subs.w	r3, r8, #0
 8008054:	d023      	beq.n	800809e <__d2b+0x82>
 8008056:	4668      	mov	r0, sp
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	f7ff fd7c 	bl	8007b56 <__lo0bits>
 800805e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008062:	b1d0      	cbz	r0, 800809a <__d2b+0x7e>
 8008064:	f1c0 0320 	rsb	r3, r0, #32
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	430b      	orrs	r3, r1
 800806e:	40c2      	lsrs	r2, r0
 8008070:	6163      	str	r3, [r4, #20]
 8008072:	9201      	str	r2, [sp, #4]
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	61a3      	str	r3, [r4, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf0c      	ite	eq
 800807c:	2201      	moveq	r2, #1
 800807e:	2202      	movne	r2, #2
 8008080:	6122      	str	r2, [r4, #16]
 8008082:	b1a5      	cbz	r5, 80080ae <__d2b+0x92>
 8008084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008088:	4405      	add	r5, r0
 800808a:	603d      	str	r5, [r7, #0]
 800808c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008090:	6030      	str	r0, [r6, #0]
 8008092:	4620      	mov	r0, r4
 8008094:	b003      	add	sp, #12
 8008096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800809a:	6161      	str	r1, [r4, #20]
 800809c:	e7ea      	b.n	8008074 <__d2b+0x58>
 800809e:	a801      	add	r0, sp, #4
 80080a0:	f7ff fd59 	bl	8007b56 <__lo0bits>
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	6163      	str	r3, [r4, #20]
 80080a8:	3020      	adds	r0, #32
 80080aa:	2201      	movs	r2, #1
 80080ac:	e7e8      	b.n	8008080 <__d2b+0x64>
 80080ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080b6:	6038      	str	r0, [r7, #0]
 80080b8:	6918      	ldr	r0, [r3, #16]
 80080ba:	f7ff fd2d 	bl	8007b18 <__hi0bits>
 80080be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080c2:	e7e5      	b.n	8008090 <__d2b+0x74>
 80080c4:	08009460 	.word	0x08009460
 80080c8:	08009471 	.word	0x08009471

080080cc <__ssputs_r>:
 80080cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	688e      	ldr	r6, [r1, #8]
 80080d2:	461f      	mov	r7, r3
 80080d4:	42be      	cmp	r6, r7
 80080d6:	680b      	ldr	r3, [r1, #0]
 80080d8:	4682      	mov	sl, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	4690      	mov	r8, r2
 80080de:	d82d      	bhi.n	800813c <__ssputs_r+0x70>
 80080e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080e8:	d026      	beq.n	8008138 <__ssputs_r+0x6c>
 80080ea:	6965      	ldr	r5, [r4, #20]
 80080ec:	6909      	ldr	r1, [r1, #16]
 80080ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080f2:	eba3 0901 	sub.w	r9, r3, r1
 80080f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080fa:	1c7b      	adds	r3, r7, #1
 80080fc:	444b      	add	r3, r9
 80080fe:	106d      	asrs	r5, r5, #1
 8008100:	429d      	cmp	r5, r3
 8008102:	bf38      	it	cc
 8008104:	461d      	movcc	r5, r3
 8008106:	0553      	lsls	r3, r2, #21
 8008108:	d527      	bpl.n	800815a <__ssputs_r+0x8e>
 800810a:	4629      	mov	r1, r5
 800810c:	f7ff fbd0 	bl	80078b0 <_malloc_r>
 8008110:	4606      	mov	r6, r0
 8008112:	b360      	cbz	r0, 800816e <__ssputs_r+0xa2>
 8008114:	6921      	ldr	r1, [r4, #16]
 8008116:	464a      	mov	r2, r9
 8008118:	f7fe fcfb 	bl	8006b12 <memcpy>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	6126      	str	r6, [r4, #16]
 800812a:	6165      	str	r5, [r4, #20]
 800812c:	444e      	add	r6, r9
 800812e:	eba5 0509 	sub.w	r5, r5, r9
 8008132:	6026      	str	r6, [r4, #0]
 8008134:	60a5      	str	r5, [r4, #8]
 8008136:	463e      	mov	r6, r7
 8008138:	42be      	cmp	r6, r7
 800813a:	d900      	bls.n	800813e <__ssputs_r+0x72>
 800813c:	463e      	mov	r6, r7
 800813e:	6820      	ldr	r0, [r4, #0]
 8008140:	4632      	mov	r2, r6
 8008142:	4641      	mov	r1, r8
 8008144:	f7fe fc4b 	bl	80069de <memmove>
 8008148:	68a3      	ldr	r3, [r4, #8]
 800814a:	1b9b      	subs	r3, r3, r6
 800814c:	60a3      	str	r3, [r4, #8]
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	4433      	add	r3, r6
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	2000      	movs	r0, #0
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815a:	462a      	mov	r2, r5
 800815c:	f000 fa0e 	bl	800857c <_realloc_r>
 8008160:	4606      	mov	r6, r0
 8008162:	2800      	cmp	r0, #0
 8008164:	d1e0      	bne.n	8008128 <__ssputs_r+0x5c>
 8008166:	6921      	ldr	r1, [r4, #16]
 8008168:	4650      	mov	r0, sl
 800816a:	f7ff fb2d 	bl	80077c8 <_free_r>
 800816e:	230c      	movs	r3, #12
 8008170:	f8ca 3000 	str.w	r3, [sl]
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	f04f 30ff 	mov.w	r0, #4294967295
 8008180:	e7e9      	b.n	8008156 <__ssputs_r+0x8a>
	...

08008184 <_svfiprintf_r>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	4698      	mov	r8, r3
 800818a:	898b      	ldrh	r3, [r1, #12]
 800818c:	061b      	lsls	r3, r3, #24
 800818e:	b09d      	sub	sp, #116	@ 0x74
 8008190:	4607      	mov	r7, r0
 8008192:	460d      	mov	r5, r1
 8008194:	4614      	mov	r4, r2
 8008196:	d510      	bpl.n	80081ba <_svfiprintf_r+0x36>
 8008198:	690b      	ldr	r3, [r1, #16]
 800819a:	b973      	cbnz	r3, 80081ba <_svfiprintf_r+0x36>
 800819c:	2140      	movs	r1, #64	@ 0x40
 800819e:	f7ff fb87 	bl	80078b0 <_malloc_r>
 80081a2:	6028      	str	r0, [r5, #0]
 80081a4:	6128      	str	r0, [r5, #16]
 80081a6:	b930      	cbnz	r0, 80081b6 <_svfiprintf_r+0x32>
 80081a8:	230c      	movs	r3, #12
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	b01d      	add	sp, #116	@ 0x74
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	2340      	movs	r3, #64	@ 0x40
 80081b8:	616b      	str	r3, [r5, #20]
 80081ba:	2300      	movs	r3, #0
 80081bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081be:	2320      	movs	r3, #32
 80081c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c8:	2330      	movs	r3, #48	@ 0x30
 80081ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008368 <_svfiprintf_r+0x1e4>
 80081ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081d2:	f04f 0901 	mov.w	r9, #1
 80081d6:	4623      	mov	r3, r4
 80081d8:	469a      	mov	sl, r3
 80081da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081de:	b10a      	cbz	r2, 80081e4 <_svfiprintf_r+0x60>
 80081e0:	2a25      	cmp	r2, #37	@ 0x25
 80081e2:	d1f9      	bne.n	80081d8 <_svfiprintf_r+0x54>
 80081e4:	ebba 0b04 	subs.w	fp, sl, r4
 80081e8:	d00b      	beq.n	8008202 <_svfiprintf_r+0x7e>
 80081ea:	465b      	mov	r3, fp
 80081ec:	4622      	mov	r2, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ff6b 	bl	80080cc <__ssputs_r>
 80081f6:	3001      	adds	r0, #1
 80081f8:	f000 80a7 	beq.w	800834a <_svfiprintf_r+0x1c6>
 80081fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081fe:	445a      	add	r2, fp
 8008200:	9209      	str	r2, [sp, #36]	@ 0x24
 8008202:	f89a 3000 	ldrb.w	r3, [sl]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 809f 	beq.w	800834a <_svfiprintf_r+0x1c6>
 800820c:	2300      	movs	r3, #0
 800820e:	f04f 32ff 	mov.w	r2, #4294967295
 8008212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008216:	f10a 0a01 	add.w	sl, sl, #1
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	9307      	str	r3, [sp, #28]
 800821e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008222:	931a      	str	r3, [sp, #104]	@ 0x68
 8008224:	4654      	mov	r4, sl
 8008226:	2205      	movs	r2, #5
 8008228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822c:	484e      	ldr	r0, [pc, #312]	@ (8008368 <_svfiprintf_r+0x1e4>)
 800822e:	f7f7 ffd7 	bl	80001e0 <memchr>
 8008232:	9a04      	ldr	r2, [sp, #16]
 8008234:	b9d8      	cbnz	r0, 800826e <_svfiprintf_r+0xea>
 8008236:	06d0      	lsls	r0, r2, #27
 8008238:	bf44      	itt	mi
 800823a:	2320      	movmi	r3, #32
 800823c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008240:	0711      	lsls	r1, r2, #28
 8008242:	bf44      	itt	mi
 8008244:	232b      	movmi	r3, #43	@ 0x2b
 8008246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800824a:	f89a 3000 	ldrb.w	r3, [sl]
 800824e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008250:	d015      	beq.n	800827e <_svfiprintf_r+0xfa>
 8008252:	9a07      	ldr	r2, [sp, #28]
 8008254:	4654      	mov	r4, sl
 8008256:	2000      	movs	r0, #0
 8008258:	f04f 0c0a 	mov.w	ip, #10
 800825c:	4621      	mov	r1, r4
 800825e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008262:	3b30      	subs	r3, #48	@ 0x30
 8008264:	2b09      	cmp	r3, #9
 8008266:	d94b      	bls.n	8008300 <_svfiprintf_r+0x17c>
 8008268:	b1b0      	cbz	r0, 8008298 <_svfiprintf_r+0x114>
 800826a:	9207      	str	r2, [sp, #28]
 800826c:	e014      	b.n	8008298 <_svfiprintf_r+0x114>
 800826e:	eba0 0308 	sub.w	r3, r0, r8
 8008272:	fa09 f303 	lsl.w	r3, r9, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	46a2      	mov	sl, r4
 800827c:	e7d2      	b.n	8008224 <_svfiprintf_r+0xa0>
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	1d19      	adds	r1, r3, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	9103      	str	r1, [sp, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	bfbb      	ittet	lt
 800828a:	425b      	neglt	r3, r3
 800828c:	f042 0202 	orrlt.w	r2, r2, #2
 8008290:	9307      	strge	r3, [sp, #28]
 8008292:	9307      	strlt	r3, [sp, #28]
 8008294:	bfb8      	it	lt
 8008296:	9204      	strlt	r2, [sp, #16]
 8008298:	7823      	ldrb	r3, [r4, #0]
 800829a:	2b2e      	cmp	r3, #46	@ 0x2e
 800829c:	d10a      	bne.n	80082b4 <_svfiprintf_r+0x130>
 800829e:	7863      	ldrb	r3, [r4, #1]
 80082a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a2:	d132      	bne.n	800830a <_svfiprintf_r+0x186>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	1d1a      	adds	r2, r3, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	9203      	str	r2, [sp, #12]
 80082ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082b0:	3402      	adds	r4, #2
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008378 <_svfiprintf_r+0x1f4>
 80082b8:	7821      	ldrb	r1, [r4, #0]
 80082ba:	2203      	movs	r2, #3
 80082bc:	4650      	mov	r0, sl
 80082be:	f7f7 ff8f 	bl	80001e0 <memchr>
 80082c2:	b138      	cbz	r0, 80082d4 <_svfiprintf_r+0x150>
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	eba0 000a 	sub.w	r0, r0, sl
 80082ca:	2240      	movs	r2, #64	@ 0x40
 80082cc:	4082      	lsls	r2, r0
 80082ce:	4313      	orrs	r3, r2
 80082d0:	3401      	adds	r4, #1
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d8:	4824      	ldr	r0, [pc, #144]	@ (800836c <_svfiprintf_r+0x1e8>)
 80082da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082de:	2206      	movs	r2, #6
 80082e0:	f7f7 ff7e 	bl	80001e0 <memchr>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d036      	beq.n	8008356 <_svfiprintf_r+0x1d2>
 80082e8:	4b21      	ldr	r3, [pc, #132]	@ (8008370 <_svfiprintf_r+0x1ec>)
 80082ea:	bb1b      	cbnz	r3, 8008334 <_svfiprintf_r+0x1b0>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	3307      	adds	r3, #7
 80082f0:	f023 0307 	bic.w	r3, r3, #7
 80082f4:	3308      	adds	r3, #8
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fa:	4433      	add	r3, r6
 80082fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fe:	e76a      	b.n	80081d6 <_svfiprintf_r+0x52>
 8008300:	fb0c 3202 	mla	r2, ip, r2, r3
 8008304:	460c      	mov	r4, r1
 8008306:	2001      	movs	r0, #1
 8008308:	e7a8      	b.n	800825c <_svfiprintf_r+0xd8>
 800830a:	2300      	movs	r3, #0
 800830c:	3401      	adds	r4, #1
 800830e:	9305      	str	r3, [sp, #20]
 8008310:	4619      	mov	r1, r3
 8008312:	f04f 0c0a 	mov.w	ip, #10
 8008316:	4620      	mov	r0, r4
 8008318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831c:	3a30      	subs	r2, #48	@ 0x30
 800831e:	2a09      	cmp	r2, #9
 8008320:	d903      	bls.n	800832a <_svfiprintf_r+0x1a6>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0c6      	beq.n	80082b4 <_svfiprintf_r+0x130>
 8008326:	9105      	str	r1, [sp, #20]
 8008328:	e7c4      	b.n	80082b4 <_svfiprintf_r+0x130>
 800832a:	fb0c 2101 	mla	r1, ip, r1, r2
 800832e:	4604      	mov	r4, r0
 8008330:	2301      	movs	r3, #1
 8008332:	e7f0      	b.n	8008316 <_svfiprintf_r+0x192>
 8008334:	ab03      	add	r3, sp, #12
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	462a      	mov	r2, r5
 800833a:	4b0e      	ldr	r3, [pc, #56]	@ (8008374 <_svfiprintf_r+0x1f0>)
 800833c:	a904      	add	r1, sp, #16
 800833e:	4638      	mov	r0, r7
 8008340:	f7fd fe70 	bl	8006024 <_printf_float>
 8008344:	1c42      	adds	r2, r0, #1
 8008346:	4606      	mov	r6, r0
 8008348:	d1d6      	bne.n	80082f8 <_svfiprintf_r+0x174>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	065b      	lsls	r3, r3, #25
 800834e:	f53f af2d 	bmi.w	80081ac <_svfiprintf_r+0x28>
 8008352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008354:	e72c      	b.n	80081b0 <_svfiprintf_r+0x2c>
 8008356:	ab03      	add	r3, sp, #12
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	462a      	mov	r2, r5
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <_svfiprintf_r+0x1f0>)
 800835e:	a904      	add	r1, sp, #16
 8008360:	4638      	mov	r0, r7
 8008362:	f7fe f8f7 	bl	8006554 <_printf_i>
 8008366:	e7ed      	b.n	8008344 <_svfiprintf_r+0x1c0>
 8008368:	080095c8 	.word	0x080095c8
 800836c:	080095d2 	.word	0x080095d2
 8008370:	08006025 	.word	0x08006025
 8008374:	080080cd 	.word	0x080080cd
 8008378:	080095ce 	.word	0x080095ce

0800837c <__sflush_r>:
 800837c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	0716      	lsls	r6, r2, #28
 8008386:	4605      	mov	r5, r0
 8008388:	460c      	mov	r4, r1
 800838a:	d454      	bmi.n	8008436 <__sflush_r+0xba>
 800838c:	684b      	ldr	r3, [r1, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dc02      	bgt.n	8008398 <__sflush_r+0x1c>
 8008392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	dd48      	ble.n	800842a <__sflush_r+0xae>
 8008398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800839a:	2e00      	cmp	r6, #0
 800839c:	d045      	beq.n	800842a <__sflush_r+0xae>
 800839e:	2300      	movs	r3, #0
 80083a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083a4:	682f      	ldr	r7, [r5, #0]
 80083a6:	6a21      	ldr	r1, [r4, #32]
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	d030      	beq.n	800840e <__sflush_r+0x92>
 80083ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	0759      	lsls	r1, r3, #29
 80083b2:	d505      	bpl.n	80083c0 <__sflush_r+0x44>
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083ba:	b10b      	cbz	r3, 80083c0 <__sflush_r+0x44>
 80083bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	2300      	movs	r3, #0
 80083c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b0      	blx	r6
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	d106      	bne.n	80083de <__sflush_r+0x62>
 80083d0:	6829      	ldr	r1, [r5, #0]
 80083d2:	291d      	cmp	r1, #29
 80083d4:	d82b      	bhi.n	800842e <__sflush_r+0xb2>
 80083d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <__sflush_r+0x104>)
 80083d8:	410a      	asrs	r2, r1
 80083da:	07d6      	lsls	r6, r2, #31
 80083dc:	d427      	bmi.n	800842e <__sflush_r+0xb2>
 80083de:	2200      	movs	r2, #0
 80083e0:	6062      	str	r2, [r4, #4]
 80083e2:	04d9      	lsls	r1, r3, #19
 80083e4:	6922      	ldr	r2, [r4, #16]
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	d504      	bpl.n	80083f4 <__sflush_r+0x78>
 80083ea:	1c42      	adds	r2, r0, #1
 80083ec:	d101      	bne.n	80083f2 <__sflush_r+0x76>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b903      	cbnz	r3, 80083f4 <__sflush_r+0x78>
 80083f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80083f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f6:	602f      	str	r7, [r5, #0]
 80083f8:	b1b9      	cbz	r1, 800842a <__sflush_r+0xae>
 80083fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083fe:	4299      	cmp	r1, r3
 8008400:	d002      	beq.n	8008408 <__sflush_r+0x8c>
 8008402:	4628      	mov	r0, r5
 8008404:	f7ff f9e0 	bl	80077c8 <_free_r>
 8008408:	2300      	movs	r3, #0
 800840a:	6363      	str	r3, [r4, #52]	@ 0x34
 800840c:	e00d      	b.n	800842a <__sflush_r+0xae>
 800840e:	2301      	movs	r3, #1
 8008410:	4628      	mov	r0, r5
 8008412:	47b0      	blx	r6
 8008414:	4602      	mov	r2, r0
 8008416:	1c50      	adds	r0, r2, #1
 8008418:	d1c9      	bne.n	80083ae <__sflush_r+0x32>
 800841a:	682b      	ldr	r3, [r5, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0c6      	beq.n	80083ae <__sflush_r+0x32>
 8008420:	2b1d      	cmp	r3, #29
 8008422:	d001      	beq.n	8008428 <__sflush_r+0xac>
 8008424:	2b16      	cmp	r3, #22
 8008426:	d11e      	bne.n	8008466 <__sflush_r+0xea>
 8008428:	602f      	str	r7, [r5, #0]
 800842a:	2000      	movs	r0, #0
 800842c:	e022      	b.n	8008474 <__sflush_r+0xf8>
 800842e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008432:	b21b      	sxth	r3, r3
 8008434:	e01b      	b.n	800846e <__sflush_r+0xf2>
 8008436:	690f      	ldr	r7, [r1, #16]
 8008438:	2f00      	cmp	r7, #0
 800843a:	d0f6      	beq.n	800842a <__sflush_r+0xae>
 800843c:	0793      	lsls	r3, r2, #30
 800843e:	680e      	ldr	r6, [r1, #0]
 8008440:	bf08      	it	eq
 8008442:	694b      	ldreq	r3, [r1, #20]
 8008444:	600f      	str	r7, [r1, #0]
 8008446:	bf18      	it	ne
 8008448:	2300      	movne	r3, #0
 800844a:	eba6 0807 	sub.w	r8, r6, r7
 800844e:	608b      	str	r3, [r1, #8]
 8008450:	f1b8 0f00 	cmp.w	r8, #0
 8008454:	dde9      	ble.n	800842a <__sflush_r+0xae>
 8008456:	6a21      	ldr	r1, [r4, #32]
 8008458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800845a:	4643      	mov	r3, r8
 800845c:	463a      	mov	r2, r7
 800845e:	4628      	mov	r0, r5
 8008460:	47b0      	blx	r6
 8008462:	2800      	cmp	r0, #0
 8008464:	dc08      	bgt.n	8008478 <__sflush_r+0xfc>
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008478:	4407      	add	r7, r0
 800847a:	eba8 0800 	sub.w	r8, r8, r0
 800847e:	e7e7      	b.n	8008450 <__sflush_r+0xd4>
 8008480:	dfbffffe 	.word	0xdfbffffe

08008484 <_fflush_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	b913      	cbnz	r3, 8008494 <_fflush_r+0x10>
 800848e:	2500      	movs	r5, #0
 8008490:	4628      	mov	r0, r5
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	b118      	cbz	r0, 800849e <_fflush_r+0x1a>
 8008496:	6a03      	ldr	r3, [r0, #32]
 8008498:	b90b      	cbnz	r3, 800849e <_fflush_r+0x1a>
 800849a:	f7fe fa07 	bl	80068ac <__sinit>
 800849e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f3      	beq.n	800848e <_fflush_r+0xa>
 80084a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084a8:	07d0      	lsls	r0, r2, #31
 80084aa:	d404      	bmi.n	80084b6 <_fflush_r+0x32>
 80084ac:	0599      	lsls	r1, r3, #22
 80084ae:	d402      	bmi.n	80084b6 <_fflush_r+0x32>
 80084b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084b2:	f7fe fb2c 	bl	8006b0e <__retarget_lock_acquire_recursive>
 80084b6:	4628      	mov	r0, r5
 80084b8:	4621      	mov	r1, r4
 80084ba:	f7ff ff5f 	bl	800837c <__sflush_r>
 80084be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084c0:	07da      	lsls	r2, r3, #31
 80084c2:	4605      	mov	r5, r0
 80084c4:	d4e4      	bmi.n	8008490 <_fflush_r+0xc>
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	059b      	lsls	r3, r3, #22
 80084ca:	d4e1      	bmi.n	8008490 <_fflush_r+0xc>
 80084cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ce:	f7fe fb1f 	bl	8006b10 <__retarget_lock_release_recursive>
 80084d2:	e7dd      	b.n	8008490 <_fflush_r+0xc>

080084d4 <_sbrk_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	@ (80084f0 <_sbrk_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f9 fe46 	bl	8002170 <_sbrk>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_sbrk_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_sbrk_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000ab0 	.word	0x20000ab0

080084f4 <__assert_func>:
 80084f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084f6:	4614      	mov	r4, r2
 80084f8:	461a      	mov	r2, r3
 80084fa:	4b09      	ldr	r3, [pc, #36]	@ (8008520 <__assert_func+0x2c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4605      	mov	r5, r0
 8008500:	68d8      	ldr	r0, [r3, #12]
 8008502:	b954      	cbnz	r4, 800851a <__assert_func+0x26>
 8008504:	4b07      	ldr	r3, [pc, #28]	@ (8008524 <__assert_func+0x30>)
 8008506:	461c      	mov	r4, r3
 8008508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800850c:	9100      	str	r1, [sp, #0]
 800850e:	462b      	mov	r3, r5
 8008510:	4905      	ldr	r1, [pc, #20]	@ (8008528 <__assert_func+0x34>)
 8008512:	f000 f86f 	bl	80085f4 <fiprintf>
 8008516:	f000 f87f 	bl	8008618 <abort>
 800851a:	4b04      	ldr	r3, [pc, #16]	@ (800852c <__assert_func+0x38>)
 800851c:	e7f4      	b.n	8008508 <__assert_func+0x14>
 800851e:	bf00      	nop
 8008520:	20000020 	.word	0x20000020
 8008524:	0800961e 	.word	0x0800961e
 8008528:	080095f0 	.word	0x080095f0
 800852c:	080095e3 	.word	0x080095e3

08008530 <_calloc_r>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	fba1 5402 	umull	r5, r4, r1, r2
 8008536:	b93c      	cbnz	r4, 8008548 <_calloc_r+0x18>
 8008538:	4629      	mov	r1, r5
 800853a:	f7ff f9b9 	bl	80078b0 <_malloc_r>
 800853e:	4606      	mov	r6, r0
 8008540:	b928      	cbnz	r0, 800854e <_calloc_r+0x1e>
 8008542:	2600      	movs	r6, #0
 8008544:	4630      	mov	r0, r6
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	220c      	movs	r2, #12
 800854a:	6002      	str	r2, [r0, #0]
 800854c:	e7f9      	b.n	8008542 <_calloc_r+0x12>
 800854e:	462a      	mov	r2, r5
 8008550:	4621      	mov	r1, r4
 8008552:	f7fe fa5e 	bl	8006a12 <memset>
 8008556:	e7f5      	b.n	8008544 <_calloc_r+0x14>

08008558 <__ascii_mbtowc>:
 8008558:	b082      	sub	sp, #8
 800855a:	b901      	cbnz	r1, 800855e <__ascii_mbtowc+0x6>
 800855c:	a901      	add	r1, sp, #4
 800855e:	b142      	cbz	r2, 8008572 <__ascii_mbtowc+0x1a>
 8008560:	b14b      	cbz	r3, 8008576 <__ascii_mbtowc+0x1e>
 8008562:	7813      	ldrb	r3, [r2, #0]
 8008564:	600b      	str	r3, [r1, #0]
 8008566:	7812      	ldrb	r2, [r2, #0]
 8008568:	1e10      	subs	r0, r2, #0
 800856a:	bf18      	it	ne
 800856c:	2001      	movne	r0, #1
 800856e:	b002      	add	sp, #8
 8008570:	4770      	bx	lr
 8008572:	4610      	mov	r0, r2
 8008574:	e7fb      	b.n	800856e <__ascii_mbtowc+0x16>
 8008576:	f06f 0001 	mvn.w	r0, #1
 800857a:	e7f8      	b.n	800856e <__ascii_mbtowc+0x16>

0800857c <_realloc_r>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	4680      	mov	r8, r0
 8008582:	4615      	mov	r5, r2
 8008584:	460c      	mov	r4, r1
 8008586:	b921      	cbnz	r1, 8008592 <_realloc_r+0x16>
 8008588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858c:	4611      	mov	r1, r2
 800858e:	f7ff b98f 	b.w	80078b0 <_malloc_r>
 8008592:	b92a      	cbnz	r2, 80085a0 <_realloc_r+0x24>
 8008594:	f7ff f918 	bl	80077c8 <_free_r>
 8008598:	2400      	movs	r4, #0
 800859a:	4620      	mov	r0, r4
 800859c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a0:	f000 f841 	bl	8008626 <_malloc_usable_size_r>
 80085a4:	4285      	cmp	r5, r0
 80085a6:	4606      	mov	r6, r0
 80085a8:	d802      	bhi.n	80085b0 <_realloc_r+0x34>
 80085aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80085ae:	d8f4      	bhi.n	800859a <_realloc_r+0x1e>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4640      	mov	r0, r8
 80085b4:	f7ff f97c 	bl	80078b0 <_malloc_r>
 80085b8:	4607      	mov	r7, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0ec      	beq.n	8008598 <_realloc_r+0x1c>
 80085be:	42b5      	cmp	r5, r6
 80085c0:	462a      	mov	r2, r5
 80085c2:	4621      	mov	r1, r4
 80085c4:	bf28      	it	cs
 80085c6:	4632      	movcs	r2, r6
 80085c8:	f7fe faa3 	bl	8006b12 <memcpy>
 80085cc:	4621      	mov	r1, r4
 80085ce:	4640      	mov	r0, r8
 80085d0:	f7ff f8fa 	bl	80077c8 <_free_r>
 80085d4:	463c      	mov	r4, r7
 80085d6:	e7e0      	b.n	800859a <_realloc_r+0x1e>

080085d8 <__ascii_wctomb>:
 80085d8:	4603      	mov	r3, r0
 80085da:	4608      	mov	r0, r1
 80085dc:	b141      	cbz	r1, 80085f0 <__ascii_wctomb+0x18>
 80085de:	2aff      	cmp	r2, #255	@ 0xff
 80085e0:	d904      	bls.n	80085ec <__ascii_wctomb+0x14>
 80085e2:	228a      	movs	r2, #138	@ 0x8a
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ea:	4770      	bx	lr
 80085ec:	700a      	strb	r2, [r1, #0]
 80085ee:	2001      	movs	r0, #1
 80085f0:	4770      	bx	lr
	...

080085f4 <fiprintf>:
 80085f4:	b40e      	push	{r1, r2, r3}
 80085f6:	b503      	push	{r0, r1, lr}
 80085f8:	4601      	mov	r1, r0
 80085fa:	ab03      	add	r3, sp, #12
 80085fc:	4805      	ldr	r0, [pc, #20]	@ (8008614 <fiprintf+0x20>)
 80085fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008602:	6800      	ldr	r0, [r0, #0]
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	f000 f83f 	bl	8008688 <_vfiprintf_r>
 800860a:	b002      	add	sp, #8
 800860c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008610:	b003      	add	sp, #12
 8008612:	4770      	bx	lr
 8008614:	20000020 	.word	0x20000020

08008618 <abort>:
 8008618:	b508      	push	{r3, lr}
 800861a:	2006      	movs	r0, #6
 800861c:	f000 fa08 	bl	8008a30 <raise>
 8008620:	2001      	movs	r0, #1
 8008622:	f7f9 fd2d 	bl	8002080 <_exit>

08008626 <_malloc_usable_size_r>:
 8008626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862a:	1f18      	subs	r0, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	bfbc      	itt	lt
 8008630:	580b      	ldrlt	r3, [r1, r0]
 8008632:	18c0      	addlt	r0, r0, r3
 8008634:	4770      	bx	lr

08008636 <__sfputc_r>:
 8008636:	6893      	ldr	r3, [r2, #8]
 8008638:	3b01      	subs	r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	b410      	push	{r4}
 800863e:	6093      	str	r3, [r2, #8]
 8008640:	da08      	bge.n	8008654 <__sfputc_r+0x1e>
 8008642:	6994      	ldr	r4, [r2, #24]
 8008644:	42a3      	cmp	r3, r4
 8008646:	db01      	blt.n	800864c <__sfputc_r+0x16>
 8008648:	290a      	cmp	r1, #10
 800864a:	d103      	bne.n	8008654 <__sfputc_r+0x1e>
 800864c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008650:	f000 b932 	b.w	80088b8 <__swbuf_r>
 8008654:	6813      	ldr	r3, [r2, #0]
 8008656:	1c58      	adds	r0, r3, #1
 8008658:	6010      	str	r0, [r2, #0]
 800865a:	7019      	strb	r1, [r3, #0]
 800865c:	4608      	mov	r0, r1
 800865e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008662:	4770      	bx	lr

08008664 <__sfputs_r>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	4606      	mov	r6, r0
 8008668:	460f      	mov	r7, r1
 800866a:	4614      	mov	r4, r2
 800866c:	18d5      	adds	r5, r2, r3
 800866e:	42ac      	cmp	r4, r5
 8008670:	d101      	bne.n	8008676 <__sfputs_r+0x12>
 8008672:	2000      	movs	r0, #0
 8008674:	e007      	b.n	8008686 <__sfputs_r+0x22>
 8008676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867a:	463a      	mov	r2, r7
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff ffda 	bl	8008636 <__sfputc_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d1f3      	bne.n	800866e <__sfputs_r+0xa>
 8008686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008688 <_vfiprintf_r>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	460d      	mov	r5, r1
 800868e:	b09d      	sub	sp, #116	@ 0x74
 8008690:	4614      	mov	r4, r2
 8008692:	4698      	mov	r8, r3
 8008694:	4606      	mov	r6, r0
 8008696:	b118      	cbz	r0, 80086a0 <_vfiprintf_r+0x18>
 8008698:	6a03      	ldr	r3, [r0, #32]
 800869a:	b90b      	cbnz	r3, 80086a0 <_vfiprintf_r+0x18>
 800869c:	f7fe f906 	bl	80068ac <__sinit>
 80086a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	d405      	bmi.n	80086b2 <_vfiprintf_r+0x2a>
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	059a      	lsls	r2, r3, #22
 80086aa:	d402      	bmi.n	80086b2 <_vfiprintf_r+0x2a>
 80086ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ae:	f7fe fa2e 	bl	8006b0e <__retarget_lock_acquire_recursive>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	071b      	lsls	r3, r3, #28
 80086b6:	d501      	bpl.n	80086bc <_vfiprintf_r+0x34>
 80086b8:	692b      	ldr	r3, [r5, #16]
 80086ba:	b99b      	cbnz	r3, 80086e4 <_vfiprintf_r+0x5c>
 80086bc:	4629      	mov	r1, r5
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 f938 	bl	8008934 <__swsetup_r>
 80086c4:	b170      	cbz	r0, 80086e4 <_vfiprintf_r+0x5c>
 80086c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086c8:	07dc      	lsls	r4, r3, #31
 80086ca:	d504      	bpl.n	80086d6 <_vfiprintf_r+0x4e>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	b01d      	add	sp, #116	@ 0x74
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	89ab      	ldrh	r3, [r5, #12]
 80086d8:	0598      	lsls	r0, r3, #22
 80086da:	d4f7      	bmi.n	80086cc <_vfiprintf_r+0x44>
 80086dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086de:	f7fe fa17 	bl	8006b10 <__retarget_lock_release_recursive>
 80086e2:	e7f3      	b.n	80086cc <_vfiprintf_r+0x44>
 80086e4:	2300      	movs	r3, #0
 80086e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e8:	2320      	movs	r3, #32
 80086ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80086f2:	2330      	movs	r3, #48	@ 0x30
 80086f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088a4 <_vfiprintf_r+0x21c>
 80086f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086fc:	f04f 0901 	mov.w	r9, #1
 8008700:	4623      	mov	r3, r4
 8008702:	469a      	mov	sl, r3
 8008704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008708:	b10a      	cbz	r2, 800870e <_vfiprintf_r+0x86>
 800870a:	2a25      	cmp	r2, #37	@ 0x25
 800870c:	d1f9      	bne.n	8008702 <_vfiprintf_r+0x7a>
 800870e:	ebba 0b04 	subs.w	fp, sl, r4
 8008712:	d00b      	beq.n	800872c <_vfiprintf_r+0xa4>
 8008714:	465b      	mov	r3, fp
 8008716:	4622      	mov	r2, r4
 8008718:	4629      	mov	r1, r5
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ffa2 	bl	8008664 <__sfputs_r>
 8008720:	3001      	adds	r0, #1
 8008722:	f000 80a7 	beq.w	8008874 <_vfiprintf_r+0x1ec>
 8008726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008728:	445a      	add	r2, fp
 800872a:	9209      	str	r2, [sp, #36]	@ 0x24
 800872c:	f89a 3000 	ldrb.w	r3, [sl]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 809f 	beq.w	8008874 <_vfiprintf_r+0x1ec>
 8008736:	2300      	movs	r3, #0
 8008738:	f04f 32ff 	mov.w	r2, #4294967295
 800873c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008740:	f10a 0a01 	add.w	sl, sl, #1
 8008744:	9304      	str	r3, [sp, #16]
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800874c:	931a      	str	r3, [sp, #104]	@ 0x68
 800874e:	4654      	mov	r4, sl
 8008750:	2205      	movs	r2, #5
 8008752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008756:	4853      	ldr	r0, [pc, #332]	@ (80088a4 <_vfiprintf_r+0x21c>)
 8008758:	f7f7 fd42 	bl	80001e0 <memchr>
 800875c:	9a04      	ldr	r2, [sp, #16]
 800875e:	b9d8      	cbnz	r0, 8008798 <_vfiprintf_r+0x110>
 8008760:	06d1      	lsls	r1, r2, #27
 8008762:	bf44      	itt	mi
 8008764:	2320      	movmi	r3, #32
 8008766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800876a:	0713      	lsls	r3, r2, #28
 800876c:	bf44      	itt	mi
 800876e:	232b      	movmi	r3, #43	@ 0x2b
 8008770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008774:	f89a 3000 	ldrb.w	r3, [sl]
 8008778:	2b2a      	cmp	r3, #42	@ 0x2a
 800877a:	d015      	beq.n	80087a8 <_vfiprintf_r+0x120>
 800877c:	9a07      	ldr	r2, [sp, #28]
 800877e:	4654      	mov	r4, sl
 8008780:	2000      	movs	r0, #0
 8008782:	f04f 0c0a 	mov.w	ip, #10
 8008786:	4621      	mov	r1, r4
 8008788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800878c:	3b30      	subs	r3, #48	@ 0x30
 800878e:	2b09      	cmp	r3, #9
 8008790:	d94b      	bls.n	800882a <_vfiprintf_r+0x1a2>
 8008792:	b1b0      	cbz	r0, 80087c2 <_vfiprintf_r+0x13a>
 8008794:	9207      	str	r2, [sp, #28]
 8008796:	e014      	b.n	80087c2 <_vfiprintf_r+0x13a>
 8008798:	eba0 0308 	sub.w	r3, r0, r8
 800879c:	fa09 f303 	lsl.w	r3, r9, r3
 80087a0:	4313      	orrs	r3, r2
 80087a2:	9304      	str	r3, [sp, #16]
 80087a4:	46a2      	mov	sl, r4
 80087a6:	e7d2      	b.n	800874e <_vfiprintf_r+0xc6>
 80087a8:	9b03      	ldr	r3, [sp, #12]
 80087aa:	1d19      	adds	r1, r3, #4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	9103      	str	r1, [sp, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bfbb      	ittet	lt
 80087b4:	425b      	neglt	r3, r3
 80087b6:	f042 0202 	orrlt.w	r2, r2, #2
 80087ba:	9307      	strge	r3, [sp, #28]
 80087bc:	9307      	strlt	r3, [sp, #28]
 80087be:	bfb8      	it	lt
 80087c0:	9204      	strlt	r2, [sp, #16]
 80087c2:	7823      	ldrb	r3, [r4, #0]
 80087c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80087c6:	d10a      	bne.n	80087de <_vfiprintf_r+0x156>
 80087c8:	7863      	ldrb	r3, [r4, #1]
 80087ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80087cc:	d132      	bne.n	8008834 <_vfiprintf_r+0x1ac>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	1d1a      	adds	r2, r3, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	9203      	str	r2, [sp, #12]
 80087d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087da:	3402      	adds	r4, #2
 80087dc:	9305      	str	r3, [sp, #20]
 80087de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088b4 <_vfiprintf_r+0x22c>
 80087e2:	7821      	ldrb	r1, [r4, #0]
 80087e4:	2203      	movs	r2, #3
 80087e6:	4650      	mov	r0, sl
 80087e8:	f7f7 fcfa 	bl	80001e0 <memchr>
 80087ec:	b138      	cbz	r0, 80087fe <_vfiprintf_r+0x176>
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	eba0 000a 	sub.w	r0, r0, sl
 80087f4:	2240      	movs	r2, #64	@ 0x40
 80087f6:	4082      	lsls	r2, r0
 80087f8:	4313      	orrs	r3, r2
 80087fa:	3401      	adds	r4, #1
 80087fc:	9304      	str	r3, [sp, #16]
 80087fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008802:	4829      	ldr	r0, [pc, #164]	@ (80088a8 <_vfiprintf_r+0x220>)
 8008804:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008808:	2206      	movs	r2, #6
 800880a:	f7f7 fce9 	bl	80001e0 <memchr>
 800880e:	2800      	cmp	r0, #0
 8008810:	d03f      	beq.n	8008892 <_vfiprintf_r+0x20a>
 8008812:	4b26      	ldr	r3, [pc, #152]	@ (80088ac <_vfiprintf_r+0x224>)
 8008814:	bb1b      	cbnz	r3, 800885e <_vfiprintf_r+0x1d6>
 8008816:	9b03      	ldr	r3, [sp, #12]
 8008818:	3307      	adds	r3, #7
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	3308      	adds	r3, #8
 8008820:	9303      	str	r3, [sp, #12]
 8008822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008824:	443b      	add	r3, r7
 8008826:	9309      	str	r3, [sp, #36]	@ 0x24
 8008828:	e76a      	b.n	8008700 <_vfiprintf_r+0x78>
 800882a:	fb0c 3202 	mla	r2, ip, r2, r3
 800882e:	460c      	mov	r4, r1
 8008830:	2001      	movs	r0, #1
 8008832:	e7a8      	b.n	8008786 <_vfiprintf_r+0xfe>
 8008834:	2300      	movs	r3, #0
 8008836:	3401      	adds	r4, #1
 8008838:	9305      	str	r3, [sp, #20]
 800883a:	4619      	mov	r1, r3
 800883c:	f04f 0c0a 	mov.w	ip, #10
 8008840:	4620      	mov	r0, r4
 8008842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008846:	3a30      	subs	r2, #48	@ 0x30
 8008848:	2a09      	cmp	r2, #9
 800884a:	d903      	bls.n	8008854 <_vfiprintf_r+0x1cc>
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0c6      	beq.n	80087de <_vfiprintf_r+0x156>
 8008850:	9105      	str	r1, [sp, #20]
 8008852:	e7c4      	b.n	80087de <_vfiprintf_r+0x156>
 8008854:	fb0c 2101 	mla	r1, ip, r1, r2
 8008858:	4604      	mov	r4, r0
 800885a:	2301      	movs	r3, #1
 800885c:	e7f0      	b.n	8008840 <_vfiprintf_r+0x1b8>
 800885e:	ab03      	add	r3, sp, #12
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	462a      	mov	r2, r5
 8008864:	4b12      	ldr	r3, [pc, #72]	@ (80088b0 <_vfiprintf_r+0x228>)
 8008866:	a904      	add	r1, sp, #16
 8008868:	4630      	mov	r0, r6
 800886a:	f7fd fbdb 	bl	8006024 <_printf_float>
 800886e:	4607      	mov	r7, r0
 8008870:	1c78      	adds	r0, r7, #1
 8008872:	d1d6      	bne.n	8008822 <_vfiprintf_r+0x19a>
 8008874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008876:	07d9      	lsls	r1, r3, #31
 8008878:	d405      	bmi.n	8008886 <_vfiprintf_r+0x1fe>
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	059a      	lsls	r2, r3, #22
 800887e:	d402      	bmi.n	8008886 <_vfiprintf_r+0x1fe>
 8008880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008882:	f7fe f945 	bl	8006b10 <__retarget_lock_release_recursive>
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	065b      	lsls	r3, r3, #25
 800888a:	f53f af1f 	bmi.w	80086cc <_vfiprintf_r+0x44>
 800888e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008890:	e71e      	b.n	80086d0 <_vfiprintf_r+0x48>
 8008892:	ab03      	add	r3, sp, #12
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	462a      	mov	r2, r5
 8008898:	4b05      	ldr	r3, [pc, #20]	@ (80088b0 <_vfiprintf_r+0x228>)
 800889a:	a904      	add	r1, sp, #16
 800889c:	4630      	mov	r0, r6
 800889e:	f7fd fe59 	bl	8006554 <_printf_i>
 80088a2:	e7e4      	b.n	800886e <_vfiprintf_r+0x1e6>
 80088a4:	080095c8 	.word	0x080095c8
 80088a8:	080095d2 	.word	0x080095d2
 80088ac:	08006025 	.word	0x08006025
 80088b0:	08008665 	.word	0x08008665
 80088b4:	080095ce 	.word	0x080095ce

080088b8 <__swbuf_r>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	460e      	mov	r6, r1
 80088bc:	4614      	mov	r4, r2
 80088be:	4605      	mov	r5, r0
 80088c0:	b118      	cbz	r0, 80088ca <__swbuf_r+0x12>
 80088c2:	6a03      	ldr	r3, [r0, #32]
 80088c4:	b90b      	cbnz	r3, 80088ca <__swbuf_r+0x12>
 80088c6:	f7fd fff1 	bl	80068ac <__sinit>
 80088ca:	69a3      	ldr	r3, [r4, #24]
 80088cc:	60a3      	str	r3, [r4, #8]
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	071a      	lsls	r2, r3, #28
 80088d2:	d501      	bpl.n	80088d8 <__swbuf_r+0x20>
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	b943      	cbnz	r3, 80088ea <__swbuf_r+0x32>
 80088d8:	4621      	mov	r1, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f82a 	bl	8008934 <__swsetup_r>
 80088e0:	b118      	cbz	r0, 80088ea <__swbuf_r+0x32>
 80088e2:	f04f 37ff 	mov.w	r7, #4294967295
 80088e6:	4638      	mov	r0, r7
 80088e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	6922      	ldr	r2, [r4, #16]
 80088ee:	1a98      	subs	r0, r3, r2
 80088f0:	6963      	ldr	r3, [r4, #20]
 80088f2:	b2f6      	uxtb	r6, r6
 80088f4:	4283      	cmp	r3, r0
 80088f6:	4637      	mov	r7, r6
 80088f8:	dc05      	bgt.n	8008906 <__swbuf_r+0x4e>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	f7ff fdc1 	bl	8008484 <_fflush_r>
 8008902:	2800      	cmp	r0, #0
 8008904:	d1ed      	bne.n	80088e2 <__swbuf_r+0x2a>
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	3b01      	subs	r3, #1
 800890a:	60a3      	str	r3, [r4, #8]
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	6022      	str	r2, [r4, #0]
 8008912:	701e      	strb	r6, [r3, #0]
 8008914:	6962      	ldr	r2, [r4, #20]
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	429a      	cmp	r2, r3
 800891a:	d004      	beq.n	8008926 <__swbuf_r+0x6e>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	07db      	lsls	r3, r3, #31
 8008920:	d5e1      	bpl.n	80088e6 <__swbuf_r+0x2e>
 8008922:	2e0a      	cmp	r6, #10
 8008924:	d1df      	bne.n	80088e6 <__swbuf_r+0x2e>
 8008926:	4621      	mov	r1, r4
 8008928:	4628      	mov	r0, r5
 800892a:	f7ff fdab 	bl	8008484 <_fflush_r>
 800892e:	2800      	cmp	r0, #0
 8008930:	d0d9      	beq.n	80088e6 <__swbuf_r+0x2e>
 8008932:	e7d6      	b.n	80088e2 <__swbuf_r+0x2a>

08008934 <__swsetup_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4b29      	ldr	r3, [pc, #164]	@ (80089dc <__swsetup_r+0xa8>)
 8008938:	4605      	mov	r5, r0
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	460c      	mov	r4, r1
 800893e:	b118      	cbz	r0, 8008948 <__swsetup_r+0x14>
 8008940:	6a03      	ldr	r3, [r0, #32]
 8008942:	b90b      	cbnz	r3, 8008948 <__swsetup_r+0x14>
 8008944:	f7fd ffb2 	bl	80068ac <__sinit>
 8008948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800894c:	0719      	lsls	r1, r3, #28
 800894e:	d422      	bmi.n	8008996 <__swsetup_r+0x62>
 8008950:	06da      	lsls	r2, r3, #27
 8008952:	d407      	bmi.n	8008964 <__swsetup_r+0x30>
 8008954:	2209      	movs	r2, #9
 8008956:	602a      	str	r2, [r5, #0]
 8008958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	f04f 30ff 	mov.w	r0, #4294967295
 8008962:	e033      	b.n	80089cc <__swsetup_r+0x98>
 8008964:	0758      	lsls	r0, r3, #29
 8008966:	d512      	bpl.n	800898e <__swsetup_r+0x5a>
 8008968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800896a:	b141      	cbz	r1, 800897e <__swsetup_r+0x4a>
 800896c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008970:	4299      	cmp	r1, r3
 8008972:	d002      	beq.n	800897a <__swsetup_r+0x46>
 8008974:	4628      	mov	r0, r5
 8008976:	f7fe ff27 	bl	80077c8 <_free_r>
 800897a:	2300      	movs	r3, #0
 800897c:	6363      	str	r3, [r4, #52]	@ 0x34
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	2300      	movs	r3, #0
 8008988:	6063      	str	r3, [r4, #4]
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f043 0308 	orr.w	r3, r3, #8
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	b94b      	cbnz	r3, 80089ae <__swsetup_r+0x7a>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a4:	d003      	beq.n	80089ae <__swsetup_r+0x7a>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 f883 	bl	8008ab4 <__smakebuf_r>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	f013 0201 	ands.w	r2, r3, #1
 80089b6:	d00a      	beq.n	80089ce <__swsetup_r+0x9a>
 80089b8:	2200      	movs	r2, #0
 80089ba:	60a2      	str	r2, [r4, #8]
 80089bc:	6962      	ldr	r2, [r4, #20]
 80089be:	4252      	negs	r2, r2
 80089c0:	61a2      	str	r2, [r4, #24]
 80089c2:	6922      	ldr	r2, [r4, #16]
 80089c4:	b942      	cbnz	r2, 80089d8 <__swsetup_r+0xa4>
 80089c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ca:	d1c5      	bne.n	8008958 <__swsetup_r+0x24>
 80089cc:	bd38      	pop	{r3, r4, r5, pc}
 80089ce:	0799      	lsls	r1, r3, #30
 80089d0:	bf58      	it	pl
 80089d2:	6962      	ldrpl	r2, [r4, #20]
 80089d4:	60a2      	str	r2, [r4, #8]
 80089d6:	e7f4      	b.n	80089c2 <__swsetup_r+0x8e>
 80089d8:	2000      	movs	r0, #0
 80089da:	e7f7      	b.n	80089cc <__swsetup_r+0x98>
 80089dc:	20000020 	.word	0x20000020

080089e0 <_raise_r>:
 80089e0:	291f      	cmp	r1, #31
 80089e2:	b538      	push	{r3, r4, r5, lr}
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	d904      	bls.n	80089f4 <_raise_r+0x14>
 80089ea:	2316      	movs	r3, #22
 80089ec:	6003      	str	r3, [r0, #0]
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089f6:	b112      	cbz	r2, 80089fe <_raise_r+0x1e>
 80089f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089fc:	b94b      	cbnz	r3, 8008a12 <_raise_r+0x32>
 80089fe:	4628      	mov	r0, r5
 8008a00:	f000 f830 	bl	8008a64 <_getpid_r>
 8008a04:	4622      	mov	r2, r4
 8008a06:	4601      	mov	r1, r0
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a0e:	f000 b817 	b.w	8008a40 <_kill_r>
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d00a      	beq.n	8008a2c <_raise_r+0x4c>
 8008a16:	1c59      	adds	r1, r3, #1
 8008a18:	d103      	bne.n	8008a22 <_raise_r+0x42>
 8008a1a:	2316      	movs	r3, #22
 8008a1c:	6003      	str	r3, [r0, #0]
 8008a1e:	2001      	movs	r0, #1
 8008a20:	e7e7      	b.n	80089f2 <_raise_r+0x12>
 8008a22:	2100      	movs	r1, #0
 8008a24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	4798      	blx	r3
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e7e0      	b.n	80089f2 <_raise_r+0x12>

08008a30 <raise>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	@ (8008a3c <raise+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f7ff bfd3 	b.w	80089e0 <_raise_r>
 8008a3a:	bf00      	nop
 8008a3c:	20000020 	.word	0x20000020

08008a40 <_kill_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d07      	ldr	r5, [pc, #28]	@ (8008a60 <_kill_r+0x20>)
 8008a44:	2300      	movs	r3, #0
 8008a46:	4604      	mov	r4, r0
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	f7f9 fb07 	bl	8002060 <_kill>
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	d102      	bne.n	8008a5c <_kill_r+0x1c>
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	b103      	cbz	r3, 8008a5c <_kill_r+0x1c>
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000ab0 	.word	0x20000ab0

08008a64 <_getpid_r>:
 8008a64:	f7f9 baf4 	b.w	8002050 <_getpid>

08008a68 <__swhatbuf_r>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a70:	2900      	cmp	r1, #0
 8008a72:	b096      	sub	sp, #88	@ 0x58
 8008a74:	4615      	mov	r5, r2
 8008a76:	461e      	mov	r6, r3
 8008a78:	da0d      	bge.n	8008a96 <__swhatbuf_r+0x2e>
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a80:	f04f 0100 	mov.w	r1, #0
 8008a84:	bf14      	ite	ne
 8008a86:	2340      	movne	r3, #64	@ 0x40
 8008a88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	6031      	str	r1, [r6, #0]
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	b016      	add	sp, #88	@ 0x58
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
 8008a96:	466a      	mov	r2, sp
 8008a98:	f000 f848 	bl	8008b2c <_fstat_r>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	dbec      	blt.n	8008a7a <__swhatbuf_r+0x12>
 8008aa0:	9901      	ldr	r1, [sp, #4]
 8008aa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008aa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aaa:	4259      	negs	r1, r3
 8008aac:	4159      	adcs	r1, r3
 8008aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ab2:	e7eb      	b.n	8008a8c <__swhatbuf_r+0x24>

08008ab4 <__smakebuf_r>:
 8008ab4:	898b      	ldrh	r3, [r1, #12]
 8008ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ab8:	079d      	lsls	r5, r3, #30
 8008aba:	4606      	mov	r6, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	d507      	bpl.n	8008ad0 <__smakebuf_r+0x1c>
 8008ac0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	6163      	str	r3, [r4, #20]
 8008acc:	b003      	add	sp, #12
 8008ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad0:	ab01      	add	r3, sp, #4
 8008ad2:	466a      	mov	r2, sp
 8008ad4:	f7ff ffc8 	bl	8008a68 <__swhatbuf_r>
 8008ad8:	9f00      	ldr	r7, [sp, #0]
 8008ada:	4605      	mov	r5, r0
 8008adc:	4639      	mov	r1, r7
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7fe fee6 	bl	80078b0 <_malloc_r>
 8008ae4:	b948      	cbnz	r0, 8008afa <__smakebuf_r+0x46>
 8008ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aea:	059a      	lsls	r2, r3, #22
 8008aec:	d4ee      	bmi.n	8008acc <__smakebuf_r+0x18>
 8008aee:	f023 0303 	bic.w	r3, r3, #3
 8008af2:	f043 0302 	orr.w	r3, r3, #2
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	e7e2      	b.n	8008ac0 <__smakebuf_r+0xc>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	6020      	str	r0, [r4, #0]
 8008afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b0a:	b15b      	cbz	r3, 8008b24 <__smakebuf_r+0x70>
 8008b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b10:	4630      	mov	r0, r6
 8008b12:	f000 f81d 	bl	8008b50 <_isatty_r>
 8008b16:	b128      	cbz	r0, 8008b24 <__smakebuf_r+0x70>
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	f023 0303 	bic.w	r3, r3, #3
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	431d      	orrs	r5, r3
 8008b28:	81a5      	strh	r5, [r4, #12]
 8008b2a:	e7cf      	b.n	8008acc <__smakebuf_r+0x18>

08008b2c <_fstat_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d07      	ldr	r5, [pc, #28]	@ (8008b4c <_fstat_r+0x20>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	4611      	mov	r1, r2
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	f7f9 faf1 	bl	8002120 <_fstat>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	d102      	bne.n	8008b48 <_fstat_r+0x1c>
 8008b42:	682b      	ldr	r3, [r5, #0]
 8008b44:	b103      	cbz	r3, 8008b48 <_fstat_r+0x1c>
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	bd38      	pop	{r3, r4, r5, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000ab0 	.word	0x20000ab0

08008b50 <_isatty_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d06      	ldr	r5, [pc, #24]	@ (8008b6c <_isatty_r+0x1c>)
 8008b54:	2300      	movs	r3, #0
 8008b56:	4604      	mov	r4, r0
 8008b58:	4608      	mov	r0, r1
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	f7f9 faf0 	bl	8002140 <_isatty>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_isatty_r+0x1a>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_isatty_r+0x1a>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000ab0 	.word	0x20000ab0

08008b70 <_init>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr

08008b7c <_fini>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr
