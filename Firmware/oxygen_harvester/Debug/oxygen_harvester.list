
oxygen_harvester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  08008a58  08008a58  00009a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009628  08009628  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009628  08009628  0000a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009630  08009630  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009630  08009630  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009634  08009634  0000a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009638  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  200001dc  08009814  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a0  08009814  0000b9a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec41  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002782  00000000  00000000  00019e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0001c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a00  00000000  00000000  0001d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f2a  00000000  00000000  0001dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dcc  00000000  00000000  00036bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097312  00000000  00000000  000489c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfcd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  000dfd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000e4360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a40 	.word	0x08008a40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008a40 	.word	0x08008a40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <check_buf>:
uint32_t gasPressureBitBuffer[1];
GAS_t gas1;
char oled_buf2[100];

int check_buf(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
	for (int i = 0; i < GASRXBUFSIZE; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e019      	b.n	8000f88 <check_buf+0x40>
	{
		if ((gasRxBuffer[i] == 0x16) && (gasRxBuffer[i + 1] == 0x09) && (gasRxBuffer[i + 2] == 0x01))
 8000f54:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <check_buf+0x58>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b16      	cmp	r3, #22
 8000f5e:	d10d      	bne.n	8000f7c <check_buf+0x34>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <check_buf+0x58>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d107      	bne.n	8000f7c <check_buf+0x34>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <check_buf+0x58>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <check_buf+0x34>
			return 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e00b      	b.n	8000f94 <check_buf+0x4c>
		if (i > 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dc06      	bgt.n	8000f90 <check_buf+0x48>
	for (int i = 0; i < GASRXBUFSIZE; i++)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b0b      	cmp	r3, #11
 8000f8c:	dde2      	ble.n	8000f54 <check_buf+0xc>
 8000f8e:	e000      	b.n	8000f92 <check_buf+0x4a>
			break;
 8000f90:	bf00      	nop
	}

	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	20000200 	.word	0x20000200

08000fa4 <get_oxygen_params>:


void get_oxygen_params(void)
{
 8000fa4:	b598      	push	{r3, r4, r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	gas_counter = 0;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <get_oxygen_params+0xb0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
	gas_counter2 = 3;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	601a      	str	r2, [r3, #0]

	if (check_buf())
 8000fb4:	f7ff ffc8 	bl	8000f48 <check_buf>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d041      	beq.n	8001042 <get_oxygen_params+0x9e>
	{
		while (gas_counter < 3)
 8000fbe:	e02e      	b.n	800101e <get_oxygen_params+0x7a>
		{
			gas1.gas_params[gas_counter] = (gasRxBuffer[gas_counter2 + gas_counter] * 256 + gasRxBuffer[(++gas_counter2) + gas_counter])/10.0;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <get_oxygen_params+0xb0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a24      	ldr	r2, [pc, #144]	@ (800105c <get_oxygen_params+0xb8>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	3201      	adds	r2, #1
 8000fd6:	4920      	ldr	r1, [pc, #128]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fd8:	600a      	str	r2, [r1, #0]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	@ (8001058 <get_oxygen_params+0xb4>)
 8000fdc:	6811      	ldr	r1, [r2, #0]
 8000fde:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <get_oxygen_params+0xb0>)
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	440a      	add	r2, r1
 8000fe4:	491d      	ldr	r1, [pc, #116]	@ (800105c <get_oxygen_params+0xb8>)
 8000fe6:	5c8a      	ldrb	r2, [r1, r2]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff faa2 	bl	8000534 <__aeabi_i2d>
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <get_oxygen_params+0xbc>)
 8000ff6:	f7ff fc31 	bl	800085c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4915      	ldr	r1, [pc, #84]	@ (8001054 <get_oxygen_params+0xb0>)
 8001000:	680c      	ldr	r4, [r1, #0]
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fdd7 	bl	8000bb8 <__aeabi_d2f>
 800100a:	4602      	mov	r2, r0
 800100c:	4915      	ldr	r1, [pc, #84]	@ (8001064 <get_oxygen_params+0xc0>)
 800100e:	00a3      	lsls	r3, r4, #2
 8001010:	440b      	add	r3, r1
 8001012:	601a      	str	r2, [r3, #0]
			gas_counter++;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <get_oxygen_params+0xb0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <get_oxygen_params+0xb0>)
 800101c:	6013      	str	r3, [r2, #0]
		while (gas_counter < 3)
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <get_oxygen_params+0xb0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	ddcc      	ble.n	8000fc0 <get_oxygen_params+0x1c>
 8001026:	e010      	b.n	800104a <get_oxygen_params+0xa6>

	else
	{
		while (gas_counter < 3)
		{
			gas1.gas_params[gas_counter] = 0;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <get_oxygen_params+0xb0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <get_oxygen_params+0xc0>)
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
			gas_counter++;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <get_oxygen_params+0xb0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <get_oxygen_params+0xb0>)
 8001040:	6013      	str	r3, [r2, #0]
		while (gas_counter < 3)
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <get_oxygen_params+0xb0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b02      	cmp	r3, #2
 8001048:	ddee      	ble.n	8001028 <get_oxygen_params+0x84>
		}
	}
	gas_bit_to_bar();
 800104a:	f000 f80d 	bl	8001068 <gas_bit_to_bar>
}
 800104e:	bf00      	nop
 8001050:	bd98      	pop	{r3, r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	200001f8 	.word	0x200001f8
 8001058:	200001fc 	.word	0x200001fc
 800105c:	20000200 	.word	0x20000200
 8001060:	40240000 	.word	0x40240000
 8001064:	20000210 	.word	0x20000210

08001068 <gas_bit_to_bar>:


void gas_bit_to_bar(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	 * adc int to voltage -> voltage = int * 3.3/4096
	 * Using a resistance r:
	 * 	0bar is 4ma*r -> 4ma * 150R = 0.6V
	 * 	16bar is 20ma*r -> 20ma * 150R = 3V
	 */
	HAL_ADC_Start(&hadc1);
 800106c:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <gas_bit_to_bar+0x68>)
 800106e:	f001 fa53 	bl	8002518 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001072:	210a      	movs	r1, #10
 8001074:	4816      	ldr	r0, [pc, #88]	@ (80010d0 <gas_bit_to_bar+0x68>)
 8001076:	f001 fb03 	bl	8002680 <HAL_ADC_PollForConversion>
	*gasPressureBitBuffer = HAL_ADC_GetValue(&hadc1);
 800107a:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <gas_bit_to_bar+0x68>)
 800107c:	f001 fb8b 	bl	8002796 <HAL_ADC_GetValue>
 8001080:	4603      	mov	r3, r0
 8001082:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <gas_bit_to_bar+0x6c>)
 8001084:	6013      	str	r3, [r2, #0]
	gas1.gas_pressure = ((*gasPressureBitBuffer) * (3.3 / 4096.0)) / (PRESSURE_R_DROP / 3.0);
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <gas_bit_to_bar+0x6c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa42 	bl	8000514 <__aeabi_ui2d>
 8001090:	a30d      	add	r3, pc, #52	@ (adr r3, 80010c8 <gas_bit_to_bar+0x60>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fab7 	bl	8000608 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <gas_bit_to_bar+0x70>)
 80010a8:	f7ff fbd8 	bl	800085c <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fd80 	bl	8000bb8 <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <gas_bit_to_bar+0x74>)
 80010bc:	60d3      	str	r3, [r2, #12]
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	66666666 	.word	0x66666666
 80010cc:	3f4a6666 	.word	0x3f4a6666
 80010d0:	20000284 	.word	0x20000284
 80010d4:	2000020c 	.word	0x2000020c
 80010d8:	40490000 	.word	0x40490000
 80010dc:	20000210 	.word	0x20000210

080010e0 <power_electrodes>:

void power_electrodes(int power_direction, int *electrode_power_status)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Electrode1_Output_GPIO_Port, Electrode1_Output_Pin, power_direction);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f4:	480f      	ldr	r0, [pc, #60]	@ (8001134 <power_electrodes+0x54>)
 80010f6:	f002 fc39 	bl	800396c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Electrode2_Output_GPIO_Port, Electrode2_Output_Pin, power_direction);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <power_electrodes+0x54>)
 8001106:	f002 fc31 	bl	800396c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Electrode3_Output_GPIO_Port, Electrode3_Output_Pin, power_direction);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	2108      	movs	r1, #8
 8001112:	4809      	ldr	r0, [pc, #36]	@ (8001138 <power_electrodes+0x58>)
 8001114:	f002 fc2a 	bl	800396c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Electrode4_Output_GPIO_Port, Electrode4_Output_Pin, power_direction);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	2110      	movs	r1, #16
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <power_electrodes+0x58>)
 8001122:	f002 fc23 	bl	800396c <HAL_GPIO_WritePin>
	*electrode_power_status = 1;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400

0800113c <manage_chambers>:

void manage_chambers(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	if (gas1.gas_pressure >= PRESSURE_THRESH && *electrode_power_status)
 8001140:	4b36      	ldr	r3, [pc, #216]	@ (800121c <manage_chambers+0xe0>)
 8001142:	edd3 7a03 	vldr	s15, [r3, #12]
 8001146:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800114a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	db0e      	blt.n	8001172 <manage_chambers+0x36>
 8001154:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <manage_chambers+0xe4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <manage_chambers+0x36>
	{
		// stop operation as gas is full in reservoir
		display_message_overwrite("Pressure limit reached");
 800115e:	4831      	ldr	r0, [pc, #196]	@ (8001224 <manage_chambers+0xe8>)
 8001160:	f000 fd42 	bl	8001be8 <display_message_overwrite>
		power_electrodes(0, electrode_power_status);
 8001164:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <manage_chambers+0xe4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff ffb8 	bl	80010e0 <power_electrodes>
		return;
 8001170:	e053      	b.n	800121a <manage_chambers+0xde>
	}

	if (gas1.gas_concentration < CONCENTRATION_THRESH && *electrode_power_status)
 8001172:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <manage_chambers+0xe0>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d50e      	bpl.n	80011a4 <manage_chambers+0x68>
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <manage_chambers+0xe4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d009      	beq.n	80011a4 <manage_chambers+0x68>
	{
		// possible leakage
		display_message_overwrite("Possible GAS leakage");
 8001190:	4825      	ldr	r0, [pc, #148]	@ (8001228 <manage_chambers+0xec>)
 8001192:	f000 fd29 	bl	8001be8 <display_message_overwrite>
		power_electrodes(0, electrode_power_status);
 8001196:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <manage_chambers+0xe4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff ff9f 	bl	80010e0 <power_electrodes>
		return;
 80011a2:	e03a      	b.n	800121a <manage_chambers+0xde>
	}

	if (gas1.gas_temperature >= TEMPERATURE_THRESH && *electrode_power_status)
 80011a4:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <manage_chambers+0xe0>)
 80011a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011aa:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800122c <manage_chambers+0xf0>
 80011ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	db0e      	blt.n	80011d6 <manage_chambers+0x9a>
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <manage_chambers+0xe4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <manage_chambers+0x9a>
	{
		// possible overheating
		display_message_overwrite("Possible Overheating");
 80011c2:	481b      	ldr	r0, [pc, #108]	@ (8001230 <manage_chambers+0xf4>)
 80011c4:	f000 fd10 	bl	8001be8 <display_message_overwrite>
		power_electrodes(0, electrode_power_status);
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <manage_chambers+0xe4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff ff86 	bl	80010e0 <power_electrodes>
		return;
 80011d4:	e021      	b.n	800121a <manage_chambers+0xde>
	}

	if (gas1.gas_pressure < PRESSURE_THRESH &&
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <manage_chambers+0xe0>)
 80011d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80011dc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80011e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	d517      	bpl.n	800121a <manage_chambers+0xde>
			gas1.gas_temperature < TEMPERATURE_THRESH &&
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <manage_chambers+0xe0>)
 80011ec:	edd3 7a02 	vldr	s15, [r3, #8]
	if (gas1.gas_pressure < PRESSURE_THRESH &&
 80011f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800122c <manage_chambers+0xf0>
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d50d      	bpl.n	800121a <manage_chambers+0xde>
			!(*electrode_power_status))
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <manage_chambers+0xe4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
			gas1.gas_temperature < TEMPERATURE_THRESH &&
 8001204:	2b00      	cmp	r3, #0
 8001206:	d108      	bne.n	800121a <manage_chambers+0xde>
	{
		// gas parameters within threshold
		display_message_overwrite("Powering Electrodes");
 8001208:	480a      	ldr	r0, [pc, #40]	@ (8001234 <manage_chambers+0xf8>)
 800120a:	f000 fced 	bl	8001be8 <display_message_overwrite>
		power_electrodes(1, electrode_power_status);
 800120e:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <manage_chambers+0xe4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff ff63 	bl	80010e0 <power_electrodes>
	}

}
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000210 	.word	0x20000210
 8001220:	2000084c 	.word	0x2000084c
 8001224:	08008a58 	.word	0x08008a58
 8001228:	08008a70 	.word	0x08008a70
 800122c:	42700000 	.word	0x42700000
 8001230:	08008a88 	.word	0x08008a88
 8001234:	08008aa0 	.word	0x08008aa0

08001238 <display_gas_parameters>:

void display_gas_parameters(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	sprintf(oled_buf2, "P: %.4fbar", gas1.gas_pressure);
 800123c:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <display_gas_parameters+0x9c>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f989 	bl	8000558 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4923      	ldr	r1, [pc, #140]	@ (80012d8 <display_gas_parameters+0xa0>)
 800124c:	4823      	ldr	r0, [pc, #140]	@ (80012dc <display_gas_parameters+0xa4>)
 800124e:	f005 facb 	bl	80067e8 <siprintf>
	display_message_overwrite(oled_buf2);
 8001252:	4822      	ldr	r0, [pc, #136]	@ (80012dc <display_gas_parameters+0xa4>)
 8001254:	f000 fcc8 	bl	8001be8 <display_message_overwrite>
	display1.cur_y += 10;
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <display_gas_parameters+0xa8>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	330a      	adds	r3, #10
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <display_gas_parameters+0xa8>)
 8001262:	701a      	strb	r2, [r3, #0]
	sprintf(oled_buf2, "Conc: %.2f%%", gas1.gas_concentration);
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <display_gas_parameters+0x9c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f975 	bl	8000558 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	491c      	ldr	r1, [pc, #112]	@ (80012e4 <display_gas_parameters+0xac>)
 8001274:	4819      	ldr	r0, [pc, #100]	@ (80012dc <display_gas_parameters+0xa4>)
 8001276:	f005 fab7 	bl	80067e8 <siprintf>
	display_message(oled_buf2);
 800127a:	4818      	ldr	r0, [pc, #96]	@ (80012dc <display_gas_parameters+0xa4>)
 800127c:	f000 fc8e 	bl	8001b9c <display_message>
	display1.cur_y += 10;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <display_gas_parameters+0xa8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	330a      	adds	r3, #10
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <display_gas_parameters+0xa8>)
 800128a:	701a      	strb	r2, [r3, #0]
	sprintf(oled_buf2, "Flow: %.2fL/min", gas1.gas_flowrate);
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <display_gas_parameters+0x9c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f961 	bl	8000558 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4913      	ldr	r1, [pc, #76]	@ (80012e8 <display_gas_parameters+0xb0>)
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <display_gas_parameters+0xa4>)
 800129e:	f005 faa3 	bl	80067e8 <siprintf>
	display_message(oled_buf2);
 80012a2:	480e      	ldr	r0, [pc, #56]	@ (80012dc <display_gas_parameters+0xa4>)
 80012a4:	f000 fc7a 	bl	8001b9c <display_message>
	display1.cur_y += 10;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <display_gas_parameters+0xa8>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	330a      	adds	r3, #10
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <display_gas_parameters+0xa8>)
 80012b2:	701a      	strb	r2, [r3, #0]
	sprintf(oled_buf2, "Temp: %.2fdegC", gas1.gas_temperature);
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <display_gas_parameters+0x9c>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f94d 	bl	8000558 <__aeabi_f2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <display_gas_parameters+0xb4>)
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <display_gas_parameters+0xa4>)
 80012c6:	f005 fa8f 	bl	80067e8 <siprintf>
	display_message(oled_buf2);
 80012ca:	4804      	ldr	r0, [pc, #16]	@ (80012dc <display_gas_parameters+0xa4>)
 80012cc:	f000 fc66 	bl	8001b9c <display_message>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000210 	.word	0x20000210
 80012d8:	08008ab4 	.word	0x08008ab4
 80012dc:	20000220 	.word	0x20000220
 80012e0:	200007e0 	.word	0x200007e0
 80012e4:	08008ac0 	.word	0x08008ac0
 80012e8:	08008ad0 	.word	0x08008ad0
 80012ec:	08008ae0 	.word	0x08008ae0

080012f0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* GAS CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_UART_RxCpltCallback+0x34>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10c      	bne.n	800131c <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_DMA(huart, gasRxBuffer, GASRXBUFSIZE);
 8001302:	220c      	movs	r2, #12
 8001304:	4908      	ldr	r1, [pc, #32]	@ (8001328 <HAL_UART_RxCpltCallback+0x38>)
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f003 fca0 	bl	8004c4c <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <HAL_UART_RxCpltCallback+0x3c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_UART_RxCpltCallback+0x3c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0208 	bic.w	r2, r2, #8
 800131a:	601a      	str	r2, [r3, #0]
	}
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40004400 	.word	0x40004400
 8001328:	20000200 	.word	0x20000200
 800132c:	20000368 	.word	0x20000368

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f001 f816 	bl	8002364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f832 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f000 f962 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 8001340:	f000 f940 	bl	80015c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001344:	f000 f914 	bl	8001570 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001348:	f000 f892 	bl	8001470 <MX_ADC1_Init>
  MX_I2C2_Init();
 800134c:	f000 f8e2 	bl	8001514 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1500);
 8001350:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001354:	f001 f878 	bl	8002448 <HAL_Delay>
	ssd1306_Init();
 8001358:	f000 fa18 	bl	800178c <ssd1306_Init>
	/* GAS CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, gasRxBuffer, GASRXBUFSIZE);
 800135c:	220c      	movs	r2, #12
 800135e:	490d      	ldr	r1, [pc, #52]	@ (8001394 <main+0x64>)
 8001360:	480d      	ldr	r0, [pc, #52]	@ (8001398 <main+0x68>)
 8001362:	f003 fc73 	bl	8004c4c <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <main+0x6c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <main+0x6c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0208 	bic.w	r2, r2, #8
 8001374:	601a      	str	r2, [r3, #0]
	/* GAS CODE END 2 */
	/* WATER CODE BEGIN 2 */
	waterInitialization();
 8001376:	f000 fec9 	bl	800210c <waterInitialization>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/* GAS CODE BEGIN WHILE */
		waterManagement();
 800137a:	f000 ff31 	bl	80021e0 <waterManagement>
		get_oxygen_params();
 800137e:	f7ff fe11 	bl	8000fa4 <get_oxygen_params>
		manage_chambers();
 8001382:	f7ff fedb 	bl	800113c <manage_chambers>
		display_gas_parameters();
 8001386:	f7ff ff57 	bl	8001238 <display_gas_parameters>
		HAL_Delay(100);
 800138a:	2064      	movs	r0, #100	@ 0x64
 800138c:	f001 f85c 	bl	8002448 <HAL_Delay>
		waterManagement();
 8001390:	bf00      	nop
 8001392:	e7f2      	b.n	800137a <main+0x4a>
 8001394:	20000200 	.word	0x20000200
 8001398:	20000320 	.word	0x20000320
 800139c:	20000368 	.word	0x20000368

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	@ 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2230      	movs	r2, #48	@ 0x30
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 fa97 	bl	80068e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <SystemClock_Config+0xc8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	4a26      	ldr	r2, [pc, #152]	@ (8001468 <SystemClock_Config+0xc8>)
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d4:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <SystemClock_Config+0xc8>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4b21      	ldr	r3, [pc, #132]	@ (800146c <SystemClock_Config+0xcc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a20      	ldr	r2, [pc, #128]	@ (800146c <SystemClock_Config+0xcc>)
 80013ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <SystemClock_Config+0xcc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001400:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800140e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001410:	2319      	movs	r3, #25
 8001412:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001414:	23c0      	movs	r3, #192	@ 0xc0
 8001416:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800141c:	2304      	movs	r3, #4
 800141e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 0320 	add.w	r3, r7, #32
 8001424:	4618      	mov	r0, r3
 8001426:	f002 ff69 	bl	80042fc <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001430:	f000 f96c 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001434:	230f      	movs	r3, #15
 8001436:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001438:	2302      	movs	r3, #2
 800143a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2103      	movs	r1, #3
 8001450:	4618      	mov	r0, r3
 8001452:	f003 f9cb 	bl	80047ec <HAL_RCC_ClockConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800145c:	f000 f956 	bl	800170c <Error_Handler>
  }
}
 8001460:	bf00      	nop
 8001462:	3750      	adds	r7, #80	@ 0x50
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40007000 	.word	0x40007000

08001470 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <MX_ADC1_Init+0x98>)
 8001484:	4a21      	ldr	r2, [pc, #132]	@ (800150c <MX_ADC1_Init+0x9c>)
 8001486:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_ADC1_Init+0x98>)
 800148a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800148e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_ADC1_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_ADC1_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b0:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <MX_ADC1_Init+0xa0>)
 80014b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b6:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014be:	2201      	movs	r2, #1
 80014c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014d0:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014d2:	f000 ffdd 	bl	8002490 <HAL_ADC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014dc:	f000 f916 	bl	800170c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014e0:	2309      	movs	r3, #9
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_ADC1_Init+0x98>)
 80014f2:	f001 f95d 	bl	80027b0 <HAL_ADC_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014fc:	f000 f906 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000284 	.word	0x20000284
 800150c:	40012000 	.word	0x40012000
 8001510:	0f000001 	.word	0x0f000001

08001514 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_I2C2_Init+0x50>)
 800151a:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <MX_I2C2_Init+0x54>)
 800151c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_I2C2_Init+0x50>)
 8001520:	4a12      	ldr	r2, [pc, #72]	@ (800156c <MX_I2C2_Init+0x58>)
 8001522:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_I2C2_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_I2C2_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_I2C2_Init+0x50>)
 8001532:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001536:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <MX_I2C2_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_I2C2_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <MX_I2C2_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_I2C2_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	@ (8001564 <MX_I2C2_Init+0x50>)
 8001552:	f002 fa25 	bl	80039a0 <HAL_I2C_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800155c:	f000 f8d6 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200002cc 	.word	0x200002cc
 8001568:	40005800 	.word	0x40005800
 800156c:	00061a80 	.word	0x00061a80

08001570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_USART2_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800157c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a8:	f003 fb00 	bl	8004bac <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f000 f8ab 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000320 	.word	0x20000320
 80015c0:	40004400 	.word	0x40004400

080015c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_DMA_Init+0x3c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <MX_DMA_Init+0x3c>)
 80015d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_DMA_Init+0x3c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2010      	movs	r0, #16
 80015ec:	f001 fbe9 	bl	8002dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015f0:	2010      	movs	r0, #16
 80015f2:	f001 fc02 	bl	8002dfa <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b38      	ldr	r3, [pc, #224]	@ (8001700 <MX_GPIO_Init+0xfc>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a37      	ldr	r2, [pc, #220]	@ (8001700 <MX_GPIO_Init+0xfc>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b35      	ldr	r3, [pc, #212]	@ (8001700 <MX_GPIO_Init+0xfc>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <MX_GPIO_Init+0xfc>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a30      	ldr	r2, [pc, #192]	@ (8001700 <MX_GPIO_Init+0xfc>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b2e      	ldr	r3, [pc, #184]	@ (8001700 <MX_GPIO_Init+0xfc>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <MX_GPIO_Init+0xfc>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <MX_GPIO_Init+0xfc>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <MX_GPIO_Init+0xfc>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Electrode1_Output_Pin|Electrode2_Output_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001674:	4823      	ldr	r0, [pc, #140]	@ (8001704 <MX_GPIO_Init+0x100>)
 8001676:	f002 f979 	bl	800396c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Electrode3_Output_Pin|Electrode4_Output_Pin|Solenoid1_Output_Pin|Solenoid2_Output_Pin
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8001680:	4821      	ldr	r0, [pc, #132]	@ (8001708 <MX_GPIO_Init+0x104>)
 8001682:	f002 f973 	bl	800396c <HAL_GPIO_WritePin>
                          |Solenoid3_Output_Pin|Solenoid4_Output_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Float_Chamber1_min_Pin Float_Chamber1_max_Pin Float_Chamber2_min_Pin Float_Chamber2_max_Pin */
  GPIO_InitStruct.Pin = Float_Chamber1_min_Pin|Float_Chamber1_max_Pin|Float_Chamber2_min_Pin|Float_Chamber2_max_Pin;
 8001686:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800168a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	481b      	ldr	r0, [pc, #108]	@ (8001708 <MX_GPIO_Init+0x104>)
 800169c:	f001 ffca 	bl	8003634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Float_Chamber3_min_Pin Float_Chamber3_max_Pin Float_Chamber4_min_Pin Float_Chamber4_max_Pin */
  GPIO_InitStruct.Pin = Float_Chamber3_min_Pin|Float_Chamber3_max_Pin|Float_Chamber4_min_Pin|Float_Chamber4_max_Pin;
 80016a0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80016a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	4813      	ldr	r0, [pc, #76]	@ (8001704 <MX_GPIO_Init+0x100>)
 80016b6:	f001 ffbd 	bl	8003634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Electrode1_Output_Pin Electrode2_Output_Pin */
  GPIO_InitStruct.Pin = Electrode1_Output_Pin|Electrode2_Output_Pin;
 80016ba:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80016be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <MX_GPIO_Init+0x100>)
 80016d4:	f001 ffae 	bl	8003634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Electrode3_Output_Pin Electrode4_Output_Pin Solenoid1_Output_Pin Solenoid2_Output_Pin
                           Solenoid3_Output_Pin Solenoid4_Output_Pin */
  GPIO_InitStruct.Pin = Electrode3_Output_Pin|Electrode4_Output_Pin|Solenoid1_Output_Pin|Solenoid2_Output_Pin
 80016d8:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80016dc:	60fb      	str	r3, [r7, #12]
                          |Solenoid3_Output_Pin|Solenoid4_Output_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_GPIO_Init+0x104>)
 80016f2:	f001 ff9f 	bl	8003634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af04      	add	r7, sp, #16
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	2301      	movs	r3, #1
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2200      	movs	r2, #0
 8001744:	2178      	movs	r1, #120	@ 0x78
 8001746:	4803      	ldr	r0, [pc, #12]	@ (8001754 <ssd1306_WriteCommand+0x2c>)
 8001748:	f002 fa6e 	bl	8003c28 <HAL_I2C_Mem_Write>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200002cc 	.word	0x200002cc

08001758 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af04      	add	r7, sp, #16
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	f04f 32ff 	mov.w	r2, #4294967295
 800176a:	9202      	str	r2, [sp, #8]
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	2240      	movs	r2, #64	@ 0x40
 8001776:	2178      	movs	r1, #120	@ 0x78
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <ssd1306_WriteData+0x30>)
 800177a:	f002 fa55 	bl	8003c28 <HAL_I2C_Mem_Write>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002cc 	.word	0x200002cc

0800178c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001790:	f7ff ffc2 	bl	8001718 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001794:	2064      	movs	r0, #100	@ 0x64
 8001796:	f000 fe57 	bl	8002448 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f9e0 	bl	8001b60 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80017a0:	2020      	movs	r0, #32
 80017a2:	f7ff ffc1 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff ffbe 	bl	8001728 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017ac:	20b0      	movs	r0, #176	@ 0xb0
 80017ae:	f7ff ffbb 	bl	8001728 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80017b2:	20c8      	movs	r0, #200	@ 0xc8
 80017b4:	f7ff ffb8 	bl	8001728 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ffb5 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017be:	2010      	movs	r0, #16
 80017c0:	f7ff ffb2 	bl	8001728 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80017c4:	2040      	movs	r0, #64	@ 0x40
 80017c6:	f7ff ffaf 	bl	8001728 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80017ca:	20ff      	movs	r0, #255	@ 0xff
 80017cc:	f000 f9b4 	bl	8001b38 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017d0:	20a1      	movs	r0, #161	@ 0xa1
 80017d2:	f7ff ffa9 	bl	8001728 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017d6:	20a6      	movs	r0, #166	@ 0xa6
 80017d8:	f7ff ffa6 	bl	8001728 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017dc:	20a8      	movs	r0, #168	@ 0xa8
 80017de:	f7ff ffa3 	bl	8001728 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80017e2:	203f      	movs	r0, #63	@ 0x3f
 80017e4:	f7ff ffa0 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017e8:	20a4      	movs	r0, #164	@ 0xa4
 80017ea:	f7ff ff9d 	bl	8001728 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017ee:	20d3      	movs	r0, #211	@ 0xd3
 80017f0:	f7ff ff9a 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ff97 	bl	8001728 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017fa:	20d5      	movs	r0, #213	@ 0xd5
 80017fc:	f7ff ff94 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001800:	20f0      	movs	r0, #240	@ 0xf0
 8001802:	f7ff ff91 	bl	8001728 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001806:	20d9      	movs	r0, #217	@ 0xd9
 8001808:	f7ff ff8e 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800180c:	2022      	movs	r0, #34	@ 0x22
 800180e:	f7ff ff8b 	bl	8001728 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001812:	20da      	movs	r0, #218	@ 0xda
 8001814:	f7ff ff88 	bl	8001728 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001818:	2012      	movs	r0, #18
 800181a:	f7ff ff85 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800181e:	20db      	movs	r0, #219	@ 0xdb
 8001820:	f7ff ff82 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001824:	2020      	movs	r0, #32
 8001826:	f7ff ff7f 	bl	8001728 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800182a:	208d      	movs	r0, #141	@ 0x8d
 800182c:	f7ff ff7c 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001830:	2014      	movs	r0, #20
 8001832:	f7ff ff79 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001836:	2001      	movs	r0, #1
 8001838:	f000 f992 	bl	8001b60 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f80f 	bl	8001860 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001842:	f000 f825 	bl	8001890 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <ssd1306_Init+0xd0>)
 8001848:	2200      	movs	r2, #0
 800184a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <ssd1306_Init+0xd0>)
 800184e:	2200      	movs	r2, #0
 8001850:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001852:	4b02      	ldr	r3, [pc, #8]	@ (800185c <ssd1306_Init+0xd0>)
 8001854:	2201      	movs	r2, #1
 8001856:	711a      	strb	r2, [r3, #4]
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200007d8 	.word	0x200007d8

08001860 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <ssd1306_Fill+0x14>
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <ssd1306_Fill+0x16>
 8001874:	23ff      	movs	r3, #255	@ 0xff
 8001876:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 800187a:	4619      	mov	r1, r3
 800187c:	4803      	ldr	r0, [pc, #12]	@ (800188c <ssd1306_Fill+0x2c>)
 800187e:	f005 f830 	bl	80068e2 <memset>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200003c8 	.word	0x200003c8

08001890 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001896:	2300      	movs	r3, #0
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	e01a      	b.n	80018d2 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	3b50      	subs	r3, #80	@ 0x50
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff40 	bl	8001728 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ff3d 	bl	8001728 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80018ae:	2010      	movs	r0, #16
 80018b0:	f7ff ff3a 	bl	8001728 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_DISP_WIDTH *i],SSD1306_DISP_WIDTH);
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	4613      	mov	r3, r2
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	4413      	add	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	461a      	mov	r2, r3
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <ssd1306_UpdateScreen+0x54>)
 80018c2:	4413      	add	r3, r2
 80018c4:	2182      	movs	r1, #130	@ 0x82
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff46 	bl	8001758 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	3301      	adds	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b07      	cmp	r3, #7
 80018d6:	d9e1      	bls.n	800189c <ssd1306_UpdateScreen+0xc>
    }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200003c8 	.word	0x200003c8

080018e8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80018e8:	b490      	push	{r4, r7}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	460b      	mov	r3, r1
 80018f4:	71bb      	strb	r3, [r7, #6]
 80018f6:	4613      	mov	r3, r2
 80018f8:	717b      	strb	r3, [r7, #5]
    if((x + SSD1306_X_SC_OFFSET) >= SSD1306_DISP_WIDTH  || y >= SSD1306_HEIGHT) {
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db4d      	blt.n	800199e <ssd1306_DrawPixel+0xb6>
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	2b3f      	cmp	r3, #63	@ 0x3f
 8001906:	d84a      	bhi.n	800199e <ssd1306_DrawPixel+0xb6>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001908:	797b      	ldrb	r3, [r7, #5]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d122      	bne.n	8001954 <ssd1306_DrawPixel+0x6c>
        SSD1306_Buffer[(x + SSD1306_X_SC_OFFSET) + (y / 8) * SSD1306_DISP_WIDTH ] |= 1 << (y % 8);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	1c9a      	adds	r2, r3, #2
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	4601      	mov	r1, r0
 800191a:	460b      	mov	r3, r1
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	440b      	add	r3, r1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <ssd1306_DrawPixel+0xc0>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	b25a      	sxtb	r2, r3
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	b25b      	sxtb	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b25c      	sxtb	r4, r3
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	1c9a      	adds	r2, r3, #2
 8001940:	4601      	mov	r1, r0
 8001942:	460b      	mov	r3, r1
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	440b      	add	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	b2e1      	uxtb	r1, r4
 800194e:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <ssd1306_DrawPixel+0xc0>)
 8001950:	54d1      	strb	r1, [r2, r3]
 8001952:	e025      	b.n	80019a0 <ssd1306_DrawPixel+0xb8>
    } else { 
        SSD1306_Buffer[(x + SSD1306_X_SC_OFFSET) + (y / 8) * SSD1306_DISP_WIDTH ] &= ~(1 << (y % 8));
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	1c9a      	adds	r2, r3, #2
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	b2d8      	uxtb	r0, r3
 800195e:	4601      	mov	r1, r0
 8001960:	460b      	mov	r3, r1
 8001962:	019b      	lsls	r3, r3, #6
 8001964:	440b      	add	r3, r1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <ssd1306_DrawPixel+0xc0>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	b25a      	sxtb	r2, r3
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	b25b      	sxtb	r3, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	b25b      	sxtb	r3, r3
 8001982:	4013      	ands	r3, r2
 8001984:	b25c      	sxtb	r4, r3
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	1c9a      	adds	r2, r3, #2
 800198a:	4601      	mov	r1, r0
 800198c:	460b      	mov	r3, r1
 800198e:	019b      	lsls	r3, r3, #6
 8001990:	440b      	add	r3, r1
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	b2e1      	uxtb	r1, r4
 8001998:	4a03      	ldr	r2, [pc, #12]	@ (80019a8 <ssd1306_DrawPixel+0xc0>)
 800199a:	54d1      	strb	r1, [r2, r3]
 800199c:	e000      	b.n	80019a0 <ssd1306_DrawPixel+0xb8>
        return;
 800199e:	bf00      	nop
    }
}
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc90      	pop	{r4, r7}
 80019a6:	4770      	bx	lr
 80019a8:	200003c8 	.word	0x200003c8

080019ac <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	1d38      	adds	r0, r7, #4
 80019b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80019ba:	461a      	mov	r2, r3
 80019bc:	4623      	mov	r3, r4
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	4613      	mov	r3, r2
 80019c2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b1f      	cmp	r3, #31
 80019c8:	d902      	bls.n	80019d0 <ssd1306_WriteChar+0x24>
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80019ce:	d901      	bls.n	80019d4 <ssd1306_WriteChar+0x28>
        return 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e06c      	b.n	8001aae <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	793b      	ldrb	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	2b80      	cmp	r3, #128	@ 0x80
 80019e0:	dc06      	bgt.n	80019f0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80019e2:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 80019e4:	885b      	ldrh	r3, [r3, #2]
 80019e6:	461a      	mov	r2, r3
 80019e8:	797b      	ldrb	r3, [r7, #5]
 80019ea:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019ec:	2b40      	cmp	r3, #64	@ 0x40
 80019ee:	dd01      	ble.n	80019f4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e05c      	b.n	8001aae <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	e04c      	b.n	8001a94 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	3b20      	subs	r3, #32
 8001a00:	7979      	ldrb	r1, [r7, #5]
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4619      	mov	r1, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	440b      	add	r3, r1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	e034      	b.n	8001a84 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d012      	beq.n	8001a50 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	b2d8      	uxtb	r0, r3
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 8001a3a:	885b      	ldrh	r3, [r3, #2]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	7bba      	ldrb	r2, [r7, #14]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff ff4d 	bl	80018e8 <ssd1306_DrawPixel>
 8001a4e:	e016      	b.n	8001a7e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b2d8      	uxtb	r0, r3
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 8001a60:	885b      	ldrh	r3, [r3, #2]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b2d9      	uxtb	r1, r3
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	793b      	ldrb	r3, [r7, #4]
 8001a86:	461a      	mov	r2, r3
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d3c5      	bcc.n	8001a1a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	797b      	ldrb	r3, [r7, #5]
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d3ad      	bcc.n	80019fa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	793a      	ldrb	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <ssd1306_WriteChar+0x10c>)
 8001aaa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	@ 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200007d8 	.word	0x200007d8

08001abc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	1d38      	adds	r0, r7, #4
 8001ac6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001aca:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001acc:	e012      	b.n	8001af4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	7818      	ldrb	r0, [r3, #0]
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	1d3a      	adds	r2, r7, #4
 8001ad6:	ca06      	ldmia	r2, {r1, r2}
 8001ad8:	f7ff ff68 	bl	80019ac <ssd1306_WriteChar>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d002      	beq.n	8001aee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	e008      	b.n	8001b00 <ssd1306_WriteString+0x44>
        }
        str++;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e8      	bne.n	8001ace <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	781b      	ldrb	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4613      	mov	r3, r2
 8001b16:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <ssd1306_SetCursor+0x2c>)
 8001b1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b20:	79bb      	ldrb	r3, [r7, #6]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <ssd1306_SetCursor+0x2c>)
 8001b26:	805a      	strh	r2, [r3, #2]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	200007d8 	.word	0x200007d8

08001b38 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b42:	2381      	movs	r3, #129	@ 0x81
 8001b44:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fded 	bl	8001728 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fde9 	bl	8001728 <ssd1306_WriteCommand>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b70:	23af      	movs	r3, #175	@ 0xaf
 8001b72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <ssd1306_SetDisplayOn+0x38>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	715a      	strb	r2, [r3, #5]
 8001b7a:	e004      	b.n	8001b86 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001b7c:	23ae      	movs	r3, #174	@ 0xae
 8001b7e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <ssd1306_SetDisplayOn+0x38>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fdcd 	bl	8001728 <ssd1306_WriteCommand>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200007d8 	.word	0x200007d8

08001b9c <display_message>:
#include "ssd1306.h"

Display_t display1;

void display_message(char *message)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	ssd1306_SetCursor(display1.cur_x, display1.cur_y);
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <display_message+0x3c>)
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <display_message+0x3c>)
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffaa 	bl	8001b08 <ssd1306_SetCursor>
	sprintf(display1.oled_buf, "%s", message);
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4909      	ldr	r1, [pc, #36]	@ (8001bdc <display_message+0x40>)
 8001bb8:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <display_message+0x44>)
 8001bba:	f004 fe15 	bl	80067e8 <siprintf>
    ssd1306_WriteString(display1.oled_buf, Font_7x10, White);
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <display_message+0x48>)
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	ca06      	ldmia	r2, {r1, r2}
 8001bc4:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <display_message+0x44>)
 8001bc6:	f7ff ff79 	bl	8001abc <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001bca:	f7ff fe61 	bl	8001890 <ssd1306_UpdateScreen>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200007e0 	.word	0x200007e0
 8001bdc:	08008af0 	.word	0x08008af0
 8001be0:	200007e2 	.word	0x200007e2
 8001be4:	20000000 	.word	0x20000000

08001be8 <display_message_overwrite>:

void display_message_overwrite(char *message)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fe35 	bl	8001860 <ssd1306_Fill>
	display1.cur_y = 0;
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <display_message_overwrite+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	display1.cur_x = 0;
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <display_message_overwrite+0x4c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	705a      	strb	r2, [r3, #1]
	ssd1306_SetCursor(display1.cur_x, display1.cur_y);
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <display_message_overwrite+0x4c>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <display_message_overwrite+0x4c>)
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff7b 	bl	8001b08 <ssd1306_SetCursor>
	sprintf(display1.oled_buf, "%s", message);
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <display_message_overwrite+0x50>)
 8001c16:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <display_message_overwrite+0x54>)
 8001c18:	f004 fde6 	bl	80067e8 <siprintf>
    ssd1306_WriteString(display1.oled_buf, Font_7x10, White);
 8001c1c:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <display_message_overwrite+0x58>)
 8001c1e:	2301      	movs	r3, #1
 8001c20:	ca06      	ldmia	r2, {r1, r2}
 8001c22:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <display_message_overwrite+0x54>)
 8001c24:	f7ff ff4a 	bl	8001abc <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001c28:	f7ff fe32 	bl	8001890 <ssd1306_UpdateScreen>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200007e0 	.word	0x200007e0
 8001c38:	08008af0 	.word	0x08008af0
 8001c3c:	200007e2 	.word	0x200007e2
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_ADC_MspInit+0x7c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d127      	bne.n	8001d06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a0e      	ldr	r2, [pc, #56]	@ (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_ADC_MspInit+0x80>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Gas_Pressure_Pin;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Gas_Pressure_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <HAL_ADC_MspInit+0x84>)
 8001d02:	f001 fc97 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	@ 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40012000 	.word	0x40012000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020400 	.word	0x40020400

08001d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a22      	ldr	r2, [pc, #136]	@ (8001dc4 <HAL_I2C_MspInit+0xa8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d13d      	bne.n	8001dba <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_I2C_MspInit+0xac>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <HAL_I2C_MspInit+0xac>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <HAL_I2C_MspInit+0xac>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d60:	2312      	movs	r3, #18
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	4815      	ldr	r0, [pc, #84]	@ (8001dcc <HAL_I2C_MspInit+0xb0>)
 8001d78:	f001 fc5c 	bl	8003634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d82:	2312      	movs	r3, #18
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001d8e:	2309      	movs	r3, #9
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <HAL_I2C_MspInit+0xb0>)
 8001d9a:	f001 fc4b 	bl	8003634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_I2C_MspInit+0xac>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <HAL_I2C_MspInit+0xac>)
 8001da8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_I2C_MspInit+0xac>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	@ 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40005800 	.word	0x40005800
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a34      	ldr	r2, [pc, #208]	@ (8001ec0 <HAL_UART_MspInit+0xf0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d162      	bne.n	8001eb8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <HAL_UART_MspInit+0xf4>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <HAL_UART_MspInit+0xf4>)
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <HAL_UART_MspInit+0xf4>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <HAL_UART_MspInit+0xf4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <HAL_UART_MspInit+0xf4>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <HAL_UART_MspInit+0xf4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4820      	ldr	r0, [pc, #128]	@ (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001e46:	f001 fbf5 	bl	8003634 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e4c:	4a20      	ldr	r2, [pc, #128]	@ (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e56:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e8c:	480f      	ldr	r0, [pc, #60]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e8e:	f000 ffcf 	bl	8002e30 <HAL_DMA_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e98:	f7ff fc38 	bl	800170c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_UART_MspInit+0xfc>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2026      	movs	r0, #38	@ 0x26
 8001eae:	f000 ff88 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb2:	2026      	movs	r0, #38	@ 0x26
 8001eb4:	f000 ffa1 	bl	8002dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	@ 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	20000368 	.word	0x20000368
 8001ed0:	40026088 	.word	0x40026088

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <NMI_Handler+0x4>

08001edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2a:	f000 fa6d 	bl	8002408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <DMA1_Stream5_IRQHandler+0x10>)
 8001f3a:	f001 f911 	bl	8003160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000368 	.word	0x20000368

08001f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <USART2_IRQHandler+0x10>)
 8001f4e:	f002 fea3 	bl	8004c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000320 	.word	0x20000320

08001f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_kill>:

int _kill(int pid, int sig)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f76:	f004 fd07 	bl	8006988 <__errno>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2216      	movs	r2, #22
 8001f7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_exit>:

void _exit (int status)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ffe7 	bl	8001f6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f9e:	bf00      	nop
 8001fa0:	e7fd      	b.n	8001f9e <_exit+0x12>

08001fa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e00a      	b.n	8001fca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	4601      	mov	r1, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	60ba      	str	r2, [r7, #8]
 8001fc0:	b2ca      	uxtb	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	dbf0      	blt.n	8001fb4 <_read+0x12>
  }

  return len;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e009      	b.n	8002002 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	60ba      	str	r2, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3301      	adds	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	dbf1      	blt.n	8001fee <_write+0x12>
  }
  return len;
 800200a:	687b      	ldr	r3, [r7, #4]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_close>:

int _close(int file)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800203c:	605a      	str	r2, [r3, #4]
  return 0;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_isatty>:

int _isatty(int file)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	@ (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f004 fc6c 	bl	8006988 <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20020000 	.word	0x20020000
 80020dc:	00000400 	.word	0x00000400
 80020e0:	20000848 	.word	0x20000848
 80020e4:	200009a0 	.word	0x200009a0

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <waterInitialization>:
#include "gas.h"
#include "ssd1306_funcs.h"

int *electrode_power_status;

void waterInitialization(){
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
	display_message_overwrite("Starting");
 8002112:	482c      	ldr	r0, [pc, #176]	@ (80021c4 <waterInitialization+0xb8>)
 8002114:	f7ff fd68 	bl	8001be8 <display_message_overwrite>
	display1.cur_y += 10;
 8002118:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <waterInitialization+0xbc>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	330a      	adds	r3, #10
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <waterInitialization+0xbc>)
 8002122:	701a      	strb	r2, [r3, #0]
	display_message("Initialization...");
 8002124:	4829      	ldr	r0, [pc, #164]	@ (80021cc <waterInitialization+0xc0>)
 8002126:	f7ff fd39 	bl	8001b9c <display_message>
	while(1){
		int initial_min_1 = HAL_GPIO_ReadPin(Float_Chamber1_min_GPIO_Port, Float_Chamber1_min_Pin);
 800212a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800212e:	4828      	ldr	r0, [pc, #160]	@ (80021d0 <waterInitialization+0xc4>)
 8002130:	f001 fc04 	bl	800393c <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	617b      	str	r3, [r7, #20]
		int initial_max_1 = HAL_GPIO_ReadPin(Float_Chamber1_max_GPIO_Port, Float_Chamber1_max_Pin);
 8002138:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800213c:	4824      	ldr	r0, [pc, #144]	@ (80021d0 <waterInitialization+0xc4>)
 800213e:	f001 fbfd 	bl	800393c <HAL_GPIO_ReadPin>
 8002142:	4603      	mov	r3, r0
 8002144:	613b      	str	r3, [r7, #16]
		int initial_min_2 = HAL_GPIO_ReadPin(Float_Chamber2_min_GPIO_Port, Float_Chamber2_min_Pin);
 8002146:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800214a:	4821      	ldr	r0, [pc, #132]	@ (80021d0 <waterInitialization+0xc4>)
 800214c:	f001 fbf6 	bl	800393c <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	60fb      	str	r3, [r7, #12]
		int initial_max_2 = HAL_GPIO_ReadPin(Float_Chamber2_max_GPIO_Port, Float_Chamber2_max_Pin);
 8002154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002158:	481d      	ldr	r0, [pc, #116]	@ (80021d0 <waterInitialization+0xc4>)
 800215a:	f001 fbef 	bl	800393c <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	60bb      	str	r3, [r7, #8]
		//		int initial_min_3 = HAL_GPIO_ReadPin(Float_Chamber3_min_GPIO_Port, Float_Chamber3_min_Pin);
		//		int initial_max_3 = HAL_GPIO_ReadPin(Float_Chamber3_max_GPIO_Port, Float_Chamber3_max_Pin);
		int initial_min_4 = HAL_GPIO_ReadPin(Float_Chamber4_min_GPIO_Port, Float_Chamber4_min_Pin);
 8002162:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002166:	481b      	ldr	r0, [pc, #108]	@ (80021d4 <waterInitialization+0xc8>)
 8002168:	f001 fbe8 	bl	800393c <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	607b      	str	r3, [r7, #4]
		int initial_max_4 = HAL_GPIO_ReadPin(Float_Chamber4_max_GPIO_Port, Float_Chamber4_max_Pin);
 8002170:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002174:	4817      	ldr	r0, [pc, #92]	@ (80021d4 <waterInitialization+0xc8>)
 8002176:	f001 fbe1 	bl	800393c <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	603b      	str	r3, [r7, #0]

		waterLevel_Chamber_1(initial_min_1, initial_max_1);
 800217e:	6939      	ldr	r1, [r7, #16]
 8002180:	6978      	ldr	r0, [r7, #20]
 8002182:	f000 f86f 	bl	8002264 <waterLevel_Chamber_1>
		waterLevel_Chamber_2(initial_min_2, initial_max_2);
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f887 	bl	800229c <waterLevel_Chamber_2>
		//		waterLevel_Chamber_3(initial_min_3, initial_max_3);
		waterLevel_Chamber_4(initial_min_4, initial_max_4);
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f89f 	bl	80022d4 <waterLevel_Chamber_4>

		if (initial_max_1 == 1 && initial_max_2 == 1 && initial_max_4 == 1) {
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d1c6      	bne.n	800212a <waterInitialization+0x1e>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d1c3      	bne.n	800212a <waterInitialization+0x1e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d1c0      	bne.n	800212a <waterInitialization+0x1e>
			display_message_overwrite("Done Initialization...");
 80021a8:	480b      	ldr	r0, [pc, #44]	@ (80021d8 <waterInitialization+0xcc>)
 80021aa:	f7ff fd1d 	bl	8001be8 <display_message_overwrite>
			break;
 80021ae:	bf00      	nop
		}
	}
	power_electrodes(1, electrode_power_status);
 80021b0:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <waterInitialization+0xd0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7fe ff92 	bl	80010e0 <power_electrodes>
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	08008af4 	.word	0x08008af4
 80021c8:	200007e0 	.word	0x200007e0
 80021cc:	08008b00 	.word	0x08008b00
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020000 	.word	0x40020000
 80021d8:	08008b14 	.word	0x08008b14
 80021dc:	2000084c 	.word	0x2000084c

080021e0 <waterManagement>:

void waterManagement(){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
	int current_min_1 = HAL_GPIO_ReadPin(Float_Chamber1_min_GPIO_Port, Float_Chamber1_min_Pin);
 80021e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021ea:	481c      	ldr	r0, [pc, #112]	@ (800225c <waterManagement+0x7c>)
 80021ec:	f001 fba6 	bl	800393c <HAL_GPIO_ReadPin>
 80021f0:	4603      	mov	r3, r0
 80021f2:	617b      	str	r3, [r7, #20]
	int current_max_1 = HAL_GPIO_ReadPin(Float_Chamber1_max_GPIO_Port, Float_Chamber1_max_Pin);
 80021f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021f8:	4818      	ldr	r0, [pc, #96]	@ (800225c <waterManagement+0x7c>)
 80021fa:	f001 fb9f 	bl	800393c <HAL_GPIO_ReadPin>
 80021fe:	4603      	mov	r3, r0
 8002200:	613b      	str	r3, [r7, #16]
	int current_min_2 = HAL_GPIO_ReadPin(Float_Chamber2_min_GPIO_Port, Float_Chamber2_min_Pin);
 8002202:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002206:	4815      	ldr	r0, [pc, #84]	@ (800225c <waterManagement+0x7c>)
 8002208:	f001 fb98 	bl	800393c <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]
	int current_max_2 = HAL_GPIO_ReadPin(Float_Chamber2_max_GPIO_Port, Float_Chamber2_max_Pin);
 8002210:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002214:	4811      	ldr	r0, [pc, #68]	@ (800225c <waterManagement+0x7c>)
 8002216:	f001 fb91 	bl	800393c <HAL_GPIO_ReadPin>
 800221a:	4603      	mov	r3, r0
 800221c:	60bb      	str	r3, [r7, #8]
	//		int current_min_3 = HAL_GPIO_ReadPin(Float_Chamber3_min_GPIO_Port, Float_Chamber3_min_Pin);
	//		int current_max_3 = HAL_GPIO_ReadPin(Float_Chamber3_max_GPIO_Port, Float_Chamber3_max_Pin);
	int current_min_4 = HAL_GPIO_ReadPin(Float_Chamber4_min_GPIO_Port, Float_Chamber4_min_Pin);
 800221e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002222:	480f      	ldr	r0, [pc, #60]	@ (8002260 <waterManagement+0x80>)
 8002224:	f001 fb8a 	bl	800393c <HAL_GPIO_ReadPin>
 8002228:	4603      	mov	r3, r0
 800222a:	607b      	str	r3, [r7, #4]
	int current_max_4 = HAL_GPIO_ReadPin(Float_Chamber4_max_GPIO_Port, Float_Chamber4_max_Pin);
 800222c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002230:	480b      	ldr	r0, [pc, #44]	@ (8002260 <waterManagement+0x80>)
 8002232:	f001 fb83 	bl	800393c <HAL_GPIO_ReadPin>
 8002236:	4603      	mov	r3, r0
 8002238:	603b      	str	r3, [r7, #0]

	waterLevel_Chamber_1(current_min_1, current_max_1);
 800223a:	6939      	ldr	r1, [r7, #16]
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f000 f811 	bl	8002264 <waterLevel_Chamber_1>
	waterLevel_Chamber_2(current_min_2, current_max_2);
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f829 	bl	800229c <waterLevel_Chamber_2>
	//		waterLevel_Chamber_3(current_min_3, current_max_3);
	waterLevel_Chamber_4(current_min_4, current_max_4);
 800224a:	6839      	ldr	r1, [r7, #0]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f841 	bl	80022d4 <waterLevel_Chamber_4>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40020400 	.word	0x40020400
 8002260:	40020000 	.word	0x40020000

08002264 <waterLevel_Chamber_1>:

void waterLevel_Chamber_1(int chamberMin, int chamberMax){
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	if(chamberMin == 0){
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d104      	bne.n	800227e <waterLevel_Chamber_1+0x1a>
		HAL_GPIO_WritePin(Solenoid1_Output_GPIO_Port, Solenoid1_Output_Pin, 1);
 8002274:	2201      	movs	r2, #1
 8002276:	2120      	movs	r1, #32
 8002278:	4807      	ldr	r0, [pc, #28]	@ (8002298 <waterLevel_Chamber_1+0x34>)
 800227a:	f001 fb77 	bl	800396c <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d104      	bne.n	800228e <waterLevel_Chamber_1+0x2a>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid1_Output_GPIO_Port, Solenoid1_Output_Pin, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	2120      	movs	r1, #32
 8002288:	4803      	ldr	r0, [pc, #12]	@ (8002298 <waterLevel_Chamber_1+0x34>)
 800228a:	f001 fb6f 	bl	800396c <HAL_GPIO_WritePin>
	}
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40020400 	.word	0x40020400

0800229c <waterLevel_Chamber_2>:

void waterLevel_Chamber_2(int chamberMin, int chamberMax){
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
	if(chamberMin == 0){
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <waterLevel_Chamber_2+0x1a>
		HAL_GPIO_WritePin(Solenoid2_Output_GPIO_Port, Solenoid2_Output_Pin, 1);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2140      	movs	r1, #64	@ 0x40
 80022b0:	4807      	ldr	r0, [pc, #28]	@ (80022d0 <waterLevel_Chamber_2+0x34>)
 80022b2:	f001 fb5b 	bl	800396c <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d104      	bne.n	80022c6 <waterLevel_Chamber_2+0x2a>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid2_Output_GPIO_Port, Solenoid2_Output_Pin, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2140      	movs	r1, #64	@ 0x40
 80022c0:	4803      	ldr	r0, [pc, #12]	@ (80022d0 <waterLevel_Chamber_2+0x34>)
 80022c2:	f001 fb53 	bl	800396c <HAL_GPIO_WritePin>
	}
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40020400 	.word	0x40020400

080022d4 <waterLevel_Chamber_4>:
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid3_Output_GPIO_Port, Solenoid3_Output_Pin, 0);
	}
}

void waterLevel_Chamber_4(int chamberMin, int chamberMax){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	if(chamberMin == 0){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <waterLevel_Chamber_4+0x1c>
		HAL_GPIO_WritePin(Solenoid4_Output_GPIO_Port, Solenoid4_Output_Pin, 1);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ea:	4808      	ldr	r0, [pc, #32]	@ (800230c <waterLevel_Chamber_4+0x38>)
 80022ec:	f001 fb3e 	bl	800396c <HAL_GPIO_WritePin>
	}
	if(chamberMax == 1){
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <waterLevel_Chamber_4+0x2e>
		//digitalWrite(waterValve, LOW);
		HAL_GPIO_WritePin(Solenoid4_Output_GPIO_Port, Solenoid4_Output_Pin, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022fc:	4803      	ldr	r0, [pc, #12]	@ (800230c <waterLevel_Chamber_4+0x38>)
 80022fe:	f001 fb35 	bl	800396c <HAL_GPIO_WritePin>
	}
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40020400 	.word	0x40020400

08002310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002348 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002314:	f7ff fee8 	bl	80020e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002318:	480c      	ldr	r0, [pc, #48]	@ (800234c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800231a:	490d      	ldr	r1, [pc, #52]	@ (8002350 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002330:	4c0a      	ldr	r4, [pc, #40]	@ (800235c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233e:	f004 fb29 	bl	8006994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002342:	f7fe fff5 	bl	8001330 <main>
  bx  lr    
 8002346:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002354:	08009638 	.word	0x08009638
  ldr r2, =_sbss
 8002358:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800235c:	200009a0 	.word	0x200009a0

08002360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC_IRQHandler>
	...

08002364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002368:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0d      	ldr	r2, [pc, #52]	@ (80023a4 <HAL_Init+0x40>)
 800236e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <HAL_Init+0x40>)
 800237a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <HAL_Init+0x40>)
 8002386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238c:	2003      	movs	r0, #3
 800238e:	f000 fd0d 	bl	8002dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002392:	200f      	movs	r0, #15
 8002394:	f000 f808 	bl	80023a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002398:	f7ff fc54 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00

080023a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_InitTick+0x54>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_InitTick+0x58>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023be:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fd25 	bl	8002e16 <HAL_SYSTICK_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00e      	b.n	80023f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b0f      	cmp	r3, #15
 80023da:	d80a      	bhi.n	80023f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023dc:	2200      	movs	r2, #0
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f000 fced 	bl	8002dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e8:	4a06      	ldr	r2, [pc, #24]	@ (8002404 <HAL_InitTick+0x5c>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000008 	.word	0x20000008
 8002400:	20000010 	.word	0x20000010
 8002404:	2000000c 	.word	0x2000000c

08002408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_IncTick+0x20>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_IncTick+0x24>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4a04      	ldr	r2, [pc, #16]	@ (800242c <HAL_IncTick+0x24>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000010 	.word	0x20000010
 800242c:	20000850 	.word	0x20000850

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000850 	.word	0x20000850

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_Delay+0x44>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffde 	bl	8002430 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000010 	.word	0x20000010

08002490 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e033      	b.n	800250e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff fbf0 	bl	8001c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024d6:	f023 0302 	bic.w	r3, r3, #2
 80024da:	f043 0202 	orr.w	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa96 	bl	8002a14 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f023 0303 	bic.w	r3, r3, #3
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80024fe:	e001      	b.n	8002504 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_ADC_Start+0x1a>
 800252e:	2302      	movs	r3, #2
 8002530:	e097      	b.n	8002662 <HAL_ADC_Start+0x14a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d018      	beq.n	800257a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002558:	4b45      	ldr	r3, [pc, #276]	@ (8002670 <HAL_ADC_Start+0x158>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a45      	ldr	r2, [pc, #276]	@ (8002674 <HAL_ADC_Start+0x15c>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0c9a      	lsrs	r2, r3, #18
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800256c:	e002      	b.n	8002574 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3b01      	subs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f9      	bne.n	800256e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d15f      	bne.n	8002648 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c6:	d106      	bne.n	80025d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	f023 0206 	bic.w	r2, r3, #6
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80025d4:	e002      	b.n	80025dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_ADC_Start+0x160>)
 80025e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d129      	bne.n	8002660 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	e020      	b.n	8002660 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a16      	ldr	r2, [pc, #88]	@ (800267c <HAL_ADC_Start+0x164>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d11b      	bne.n	8002660 <HAL_ADC_Start+0x148>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d114      	bne.n	8002660 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	e00b      	b.n	8002660 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f043 0210 	orr.w	r2, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000008 	.word	0x20000008
 8002674:	431bde83 	.word	0x431bde83
 8002678:	40012300 	.word	0x40012300
 800267c:	40012000 	.word	0x40012000

08002680 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269c:	d113      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ac:	d10b      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e063      	b.n	800278e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c6:	f7ff feb3 	bl	8002430 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026cc:	e021      	b.n	8002712 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d01d      	beq.n	8002712 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_ADC_PollForConversion+0x6c>
 80026dc:	f7ff fea8 	bl	8002430 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d212      	bcs.n	8002712 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d00b      	beq.n	8002712 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f043 0204 	orr.w	r2, r3, #4
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e03d      	b.n	800278e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d1d6      	bne.n	80026ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0212 	mvn.w	r2, #18
 8002728:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d123      	bne.n	800278c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11f      	bne.n	800278c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1c>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e113      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x244>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b09      	cmp	r3, #9
 80027da:	d925      	bls.n	8002828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68d9      	ldr	r1, [r3, #12]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	3b1e      	subs	r3, #30
 80027f2:	2207      	movs	r2, #7
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43da      	mvns	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	400a      	ands	r2, r1
 8002800:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68d9      	ldr	r1, [r3, #12]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	4618      	mov	r0, r3
 8002814:	4603      	mov	r3, r0
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4403      	add	r3, r0
 800281a:	3b1e      	subs	r3, #30
 800281c:	409a      	lsls	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	e022      	b.n	800286e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6919      	ldr	r1, [r3, #16]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	2207      	movs	r2, #7
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6919      	ldr	r1, [r3, #16]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	4618      	mov	r0, r3
 800285e:	4603      	mov	r3, r0
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4403      	add	r3, r0
 8002864:	409a      	lsls	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b06      	cmp	r3, #6
 8002874:	d824      	bhi.n	80028c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3b05      	subs	r3, #5
 8002888:	221f      	movs	r2, #31
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	400a      	ands	r2, r1
 8002896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	3b05      	subs	r3, #5
 80028b2:	fa00 f203 	lsl.w	r2, r0, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028be:	e04c      	b.n	800295a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d824      	bhi.n	8002912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3b23      	subs	r3, #35	@ 0x23
 80028da:	221f      	movs	r2, #31
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43da      	mvns	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	400a      	ands	r2, r1
 80028e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3b23      	subs	r3, #35	@ 0x23
 8002904:	fa00 f203 	lsl.w	r2, r0, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002910:	e023      	b.n	800295a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	3b41      	subs	r3, #65	@ 0x41
 8002924:	221f      	movs	r2, #31
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	400a      	ands	r2, r1
 8002932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	3b41      	subs	r3, #65	@ 0x41
 800294e:	fa00 f203 	lsl.w	r2, r0, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295a:	4b29      	ldr	r3, [pc, #164]	@ (8002a00 <HAL_ADC_ConfigChannel+0x250>)
 800295c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_ADC_ConfigChannel+0x254>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d10f      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1d8>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b12      	cmp	r3, #18
 800296e:	d10b      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_ADC_ConfigChannel+0x254>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d12b      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x23a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_ADC_ConfigChannel+0x258>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x1f4>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b11      	cmp	r3, #17
 80029a2:	d122      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a11      	ldr	r2, [pc, #68]	@ (8002a08 <HAL_ADC_ConfigChannel+0x258>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d111      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029c6:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <HAL_ADC_ConfigChannel+0x25c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_ADC_ConfigChannel+0x260>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	0c9a      	lsrs	r2, r3, #18
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029dc:	e002      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f9      	bne.n	80029de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40012300 	.word	0x40012300
 8002a04:	40012000 	.word	0x40012000
 8002a08:	10000012 	.word	0x10000012
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	431bde83 	.word	0x431bde83

08002a14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a1c:	4b79      	ldr	r3, [pc, #484]	@ (8002c04 <ADC_Init+0x1f0>)
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <ADC_Init+0x1f4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e00f      	b.n	8002b12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0202 	bic.w	r2, r2, #2
 8002b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7e1b      	ldrb	r3, [r3, #24]
 8002b2c:	005a      	lsls	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	035a      	lsls	r2, r3, #13
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e007      	b.n	8002b88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	051a      	lsls	r2, r3, #20
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bca:	025a      	lsls	r2, r3, #9
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	029a      	lsls	r2, r3, #10
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40012300 	.word	0x40012300
 8002c08:	0f000001 	.word	0x0f000001

08002c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3e:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	60d3      	str	r3, [r2, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <__NVIC_GetPriorityGrouping+0x18>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 0307 	and.w	r3, r3, #7
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	db0b      	blt.n	8002c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4907      	ldr	r1, [pc, #28]	@ (8002ca8 <__NVIC_EnableIRQ+0x38>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2001      	movs	r0, #1
 8002c92:	fa00 f202 	lsl.w	r2, r0, r2
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000e100 	.word	0xe000e100

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	@ (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	@ (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	@ 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f1c3 0307 	rsb	r3, r3, #7
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2304      	movcs	r3, #4
 8002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d902      	bls.n	8002d30 <NVIC_EncodePriority+0x30>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b03      	subs	r3, #3
 8002d2e:	e000      	b.n	8002d32 <NVIC_EncodePriority+0x32>
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	401a      	ands	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	4313      	orrs	r3, r2
         );
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	@ 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d78:	d301      	bcc.n	8002d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <SysTick_Config+0x40>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d86:	210f      	movs	r1, #15
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f7ff ff8e 	bl	8002cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <SysTick_Config+0x40>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d96:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <SysTick_Config+0x40>)
 8002d98:	2207      	movs	r2, #7
 8002d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	e000e010 	.word	0xe000e010

08002dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff29 	bl	8002c0c <__NVIC_SetPriorityGrouping>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd4:	f7ff ff3e 	bl	8002c54 <__NVIC_GetPriorityGrouping>
 8002dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff8e 	bl	8002d00 <NVIC_EncodePriority>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff5d 	bl	8002cac <__NVIC_SetPriority>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff31 	bl	8002c70 <__NVIC_EnableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffa2 	bl	8002d68 <SysTick_Config>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff faf8 	bl	8002430 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e099      	b.n	8002f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6c:	e00f      	b.n	8002e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7ff fadf 	bl	8002430 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d908      	bls.n	8002e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e078      	b.n	8002f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e8      	bne.n	8002e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4b38      	ldr	r3, [pc, #224]	@ (8002f88 <HAL_DMA_Init+0x158>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d117      	bne.n	8002f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb01 	bl	800353c <DMA_CheckFifoParam>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2240      	movs	r2, #64	@ 0x40
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e016      	b.n	8002f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fab8 	bl	80034d0 <DMA_CalcBaseAndBitshift>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	223f      	movs	r2, #63	@ 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	f010803f 	.word	0xf010803f

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Start_IT+0x26>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e040      	b.n	8003034 <HAL_DMA_Start_IT+0xa8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d12f      	bne.n	8003026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa4a 	bl	8003474 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	223f      	movs	r2, #63	@ 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0216 	orr.w	r2, r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e005      	b.n	8003032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800304a:	f7ff f9f1 	bl	8002430 <HAL_GetTick>
 800304e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d008      	beq.n	800306e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	@ 0x80
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e052      	b.n	8003114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0216 	bic.w	r2, r2, #22
 800307c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800308c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_DMA_Abort+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030be:	e013      	b.n	80030e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030c0:	f7ff f9b6 	bl	8002430 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d90c      	bls.n	80030e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2203      	movs	r2, #3
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e015      	b.n	8003114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e4      	bne.n	80030c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	223f      	movs	r2, #63	@ 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d004      	beq.n	800313a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2280      	movs	r2, #128	@ 0x80
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00c      	b.n	8003154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2205      	movs	r2, #5
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800316c:	4b8e      	ldr	r3, [pc, #568]	@ (80033a8 <HAL_DMA_IRQHandler+0x248>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a8e      	ldr	r2, [pc, #568]	@ (80033ac <HAL_DMA_IRQHandler+0x24c>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	2208      	movs	r2, #8
 800318c:	409a      	lsls	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01a      	beq.n	80031cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0204 	bic.w	r2, r2, #4
 80031b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	2208      	movs	r2, #8
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	2201      	movs	r2, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ee:	2201      	movs	r2, #1
 80031f0:	409a      	lsls	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fa:	f043 0202 	orr.w	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	2204      	movs	r2, #4
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d012      	beq.n	8003238 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	2204      	movs	r2, #4
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	2210      	movs	r2, #16
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d043      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d03c      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2210      	movs	r2, #16
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d024      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
 800328e:	e01f      	b.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
 80032a0:	e016      	b.n	80032d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0208 	bic.w	r2, r2, #8
 80032be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	2220      	movs	r2, #32
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 808f 	beq.w	8003400 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8087 	beq.w	8003400 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	2220      	movs	r2, #32
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b05      	cmp	r3, #5
 8003308:	d136      	bne.n	8003378 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0216 	bic.w	r2, r2, #22
 8003318:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003328:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_DMA_IRQHandler+0x1da>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0208 	bic.w	r2, r2, #8
 8003348:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334e:	223f      	movs	r2, #63	@ 0x3f
 8003350:	409a      	lsls	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336a:	2b00      	cmp	r3, #0
 800336c:	d07e      	beq.n	800346c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
        }
        return;
 8003376:	e079      	b.n	800346c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003398:	2b00      	cmp	r3, #0
 800339a:	d031      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
 80033a4:	e02c      	b.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
 80033a6:	bf00      	nop
 80033a8:	20000008 	.word	0x20000008
 80033ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d023      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e01e      	b.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10f      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	2b00      	cmp	r3, #0
 8003406:	d032      	beq.n	800346e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d022      	beq.n	800345a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2205      	movs	r2, #5
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	d307      	bcc.n	8003448 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f2      	bne.n	800342c <HAL_DMA_IRQHandler+0x2cc>
 8003446:	e000      	b.n	800344a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003448:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
 800346a:	e000      	b.n	800346e <HAL_DMA_IRQHandler+0x30e>
        return;
 800346c:	bf00      	nop
    }
  }
}
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003490:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b40      	cmp	r3, #64	@ 0x40
 80034a0:	d108      	bne.n	80034b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034b2:	e007      	b.n	80034c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	3b10      	subs	r3, #16
 80034e0:	4a14      	ldr	r2, [pc, #80]	@ (8003534 <DMA_CalcBaseAndBitshift+0x64>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ea:	4a13      	ldr	r2, [pc, #76]	@ (8003538 <DMA_CalcBaseAndBitshift+0x68>)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d909      	bls.n	8003512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003510:	e007      	b.n	8003522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	aaaaaaab 	.word	0xaaaaaaab
 8003538:	080092b0 	.word	0x080092b0

0800353c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d11f      	bne.n	8003596 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d856      	bhi.n	800360a <DMA_CheckFifoParam+0xce>
 800355c:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <DMA_CheckFifoParam+0x28>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003587 	.word	0x08003587
 800356c:	08003575 	.word	0x08003575
 8003570:	0800360b 	.word	0x0800360b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d046      	beq.n	800360e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003584:	e043      	b.n	800360e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800358e:	d140      	bne.n	8003612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003594:	e03d      	b.n	8003612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800359e:	d121      	bne.n	80035e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d837      	bhi.n	8003616 <DMA_CheckFifoParam+0xda>
 80035a6:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <DMA_CheckFifoParam+0x70>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035c3 	.word	0x080035c3
 80035b4:	080035bd 	.word	0x080035bd
 80035b8:	080035d5 	.word	0x080035d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      break;
 80035c0:	e030      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d025      	beq.n	800361a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d2:	e022      	b.n	800361a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035dc:	d11f      	bne.n	800361e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035e2:	e01c      	b.n	800361e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d903      	bls.n	80035f2 <DMA_CheckFifoParam+0xb6>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d003      	beq.n	80035f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035f0:	e018      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
      break;
 80035f6:	e015      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e00b      	b.n	8003622 <DMA_CheckFifoParam+0xe6>
      break;
 800360a:	bf00      	nop
 800360c:	e00a      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
 8003610:	e008      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 8003612:	bf00      	nop
 8003614:	e006      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
 8003618:	e004      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;   
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
    }
  } 
  
  return status; 
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop

08003634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	@ 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e159      	b.n	8003904 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003650:	2201      	movs	r2, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	f040 8148 	bne.w	80038fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d005      	beq.n	8003686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003682:	2b02      	cmp	r3, #2
 8003684:	d130      	bne.n	80036e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 0201 	and.w	r2, r3, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d017      	beq.n	8003724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d123      	bne.n	8003778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3208      	adds	r2, #8
 8003738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	220f      	movs	r2, #15
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	08da      	lsrs	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	69b9      	ldr	r1, [r7, #24]
 8003774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0203 	and.w	r2, r3, #3
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a2 	beq.w	80038fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b57      	ldr	r3, [pc, #348]	@ (800391c <HAL_GPIO_Init+0x2e8>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	4a56      	ldr	r2, [pc, #344]	@ (800391c <HAL_GPIO_Init+0x2e8>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ca:	4b54      	ldr	r3, [pc, #336]	@ (800391c <HAL_GPIO_Init+0x2e8>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d6:	4a52      	ldr	r2, [pc, #328]	@ (8003920 <HAL_GPIO_Init+0x2ec>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a49      	ldr	r2, [pc, #292]	@ (8003924 <HAL_GPIO_Init+0x2f0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d019      	beq.n	8003836 <HAL_GPIO_Init+0x202>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a48      	ldr	r2, [pc, #288]	@ (8003928 <HAL_GPIO_Init+0x2f4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x1fe>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a47      	ldr	r2, [pc, #284]	@ (800392c <HAL_GPIO_Init+0x2f8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x1fa>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a46      	ldr	r2, [pc, #280]	@ (8003930 <HAL_GPIO_Init+0x2fc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x1f6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a45      	ldr	r2, [pc, #276]	@ (8003934 <HAL_GPIO_Init+0x300>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x1f2>
 8003822:	2304      	movs	r3, #4
 8003824:	e008      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003826:	2307      	movs	r3, #7
 8003828:	e006      	b.n	8003838 <HAL_GPIO_Init+0x204>
 800382a:	2303      	movs	r3, #3
 800382c:	e004      	b.n	8003838 <HAL_GPIO_Init+0x204>
 800382e:	2302      	movs	r3, #2
 8003830:	e002      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003836:	2300      	movs	r3, #0
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f002 0203 	and.w	r2, r2, #3
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	4093      	lsls	r3, r2
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003848:	4935      	ldr	r1, [pc, #212]	@ (8003920 <HAL_GPIO_Init+0x2ec>)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003856:	4b38      	ldr	r3, [pc, #224]	@ (8003938 <HAL_GPIO_Init+0x304>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800387a:	4a2f      	ldr	r2, [pc, #188]	@ (8003938 <HAL_GPIO_Init+0x304>)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_GPIO_Init+0x304>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a4:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <HAL_GPIO_Init+0x304>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038aa:	4b23      	ldr	r3, [pc, #140]	@ (8003938 <HAL_GPIO_Init+0x304>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003938 <HAL_GPIO_Init+0x304>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d4:	4b18      	ldr	r3, [pc, #96]	@ (8003938 <HAL_GPIO_Init+0x304>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003938 <HAL_GPIO_Init+0x304>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3301      	adds	r3, #1
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	f67f aea2 	bls.w	8003650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3724      	adds	r7, #36	@ 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	40013800 	.word	0x40013800
 8003924:	40020000 	.word	0x40020000
 8003928:	40020400 	.word	0x40020400
 800392c:	40020800 	.word	0x40020800
 8003930:	40020c00 	.word	0x40020c00
 8003934:	40021000 	.word	0x40021000
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e001      	b.n	800395e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
 8003978:	4613      	mov	r3, r2
 800397a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800397c:	787b      	ldrb	r3, [r7, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003988:	e003      	b.n	8003992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	041a      	lsls	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	619a      	str	r2, [r3, #24]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e12b      	b.n	8003c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fe f9a8 	bl	8001d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2224      	movs	r2, #36	@ 0x24
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a04:	f001 f8aa 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8003a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a81      	ldr	r2, [pc, #516]	@ (8003c14 <HAL_I2C_Init+0x274>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d807      	bhi.n	8003a24 <HAL_I2C_Init+0x84>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a80      	ldr	r2, [pc, #512]	@ (8003c18 <HAL_I2C_Init+0x278>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	bf94      	ite	ls
 8003a1c:	2301      	movls	r3, #1
 8003a1e:	2300      	movhi	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e006      	b.n	8003a32 <HAL_I2C_Init+0x92>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a7d      	ldr	r2, [pc, #500]	@ (8003c1c <HAL_I2C_Init+0x27c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	bf94      	ite	ls
 8003a2c:	2301      	movls	r3, #1
 8003a2e:	2300      	movhi	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0e7      	b.n	8003c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a78      	ldr	r2, [pc, #480]	@ (8003c20 <HAL_I2C_Init+0x280>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0c9b      	lsrs	r3, r3, #18
 8003a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a6a      	ldr	r2, [pc, #424]	@ (8003c14 <HAL_I2C_Init+0x274>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d802      	bhi.n	8003a74 <HAL_I2C_Init+0xd4>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3301      	adds	r3, #1
 8003a72:	e009      	b.n	8003a88 <HAL_I2C_Init+0xe8>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	4a69      	ldr	r2, [pc, #420]	@ (8003c24 <HAL_I2C_Init+0x284>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	3301      	adds	r3, #1
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	495c      	ldr	r1, [pc, #368]	@ (8003c14 <HAL_I2C_Init+0x274>)
 8003aa4:	428b      	cmp	r3, r1
 8003aa6:	d819      	bhi.n	8003adc <HAL_I2C_Init+0x13c>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1e59      	subs	r1, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab6:	1c59      	adds	r1, r3, #1
 8003ab8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003abc:	400b      	ands	r3, r1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_I2C_Init+0x138>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1e59      	subs	r1, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad6:	e051      	b.n	8003b7c <HAL_I2C_Init+0x1dc>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	e04f      	b.n	8003b7c <HAL_I2C_Init+0x1dc>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d111      	bne.n	8003b08 <HAL_I2C_Init+0x168>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1e58      	subs	r0, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	440b      	add	r3, r1
 8003af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e012      	b.n	8003b2e <HAL_I2C_Init+0x18e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1e58      	subs	r0, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	0099      	lsls	r1, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Init+0x196>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e022      	b.n	8003b7c <HAL_I2C_Init+0x1dc>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10e      	bne.n	8003b5c <HAL_I2C_Init+0x1bc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1e58      	subs	r0, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	440b      	add	r3, r1
 8003b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b50:	3301      	adds	r3, #1
 8003b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5a:	e00f      	b.n	8003b7c <HAL_I2C_Init+0x1dc>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e58      	subs	r0, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	0099      	lsls	r1, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	6809      	ldr	r1, [r1, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003baa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6911      	ldr	r1, [r2, #16]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68d2      	ldr	r2, [r2, #12]
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	000186a0 	.word	0x000186a0
 8003c18:	001e847f 	.word	0x001e847f
 8003c1c:	003d08ff 	.word	0x003d08ff
 8003c20:	431bde83 	.word	0x431bde83
 8003c24:	10624dd3 	.word	0x10624dd3

08003c28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	4608      	mov	r0, r1
 8003c32:	4611      	mov	r1, r2
 8003c34:	461a      	mov	r2, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	817b      	strh	r3, [r7, #10]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	813b      	strh	r3, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c42:	f7fe fbf5 	bl	8002430 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	f040 80d9 	bne.w	8003e08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2319      	movs	r3, #25
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	496d      	ldr	r1, [pc, #436]	@ (8003e14 <HAL_I2C_Mem_Write+0x1ec>)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f971 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e0cc      	b.n	8003e0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_I2C_Mem_Write+0x56>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e0c5      	b.n	8003e0a <HAL_I2C_Mem_Write+0x1e2>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d007      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2221      	movs	r2, #33	@ 0x21
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	@ 0x40
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8003e18 <HAL_I2C_Mem_Write+0x1f0>)
 8003ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ce6:	88f8      	ldrh	r0, [r7, #6]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f890 	bl	8003e1c <I2C_RequestMemoryWrite>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d052      	beq.n	8003da8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e081      	b.n	8003e0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fa36 	bl	800417c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d107      	bne.n	8003d2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06b      	b.n	8003e0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d11b      	bne.n	8003da8 <HAL_I2C_Mem_Write+0x180>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1aa      	bne.n	8003d06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fa29 	bl	800420c <I2C_WaitOnBTFFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d107      	bne.n	8003dd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e016      	b.n	8003e0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	00100002 	.word	0x00100002
 8003e18:	ffff0000 	.word	0xffff0000

08003e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	817b      	strh	r3, [r7, #10]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	813b      	strh	r3, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f878 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6c:	d103      	bne.n	8003e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e05f      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7a:	897b      	ldrh	r3, [r7, #10]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	492d      	ldr	r1, [pc, #180]	@ (8003f44 <I2C_RequestMemoryWrite+0x128>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f8d3 	bl	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e04c      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f95e 	bl	800417c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e02b      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee8:	893b      	ldrh	r3, [r7, #8]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e021      	b.n	8003f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef4:	893b      	ldrh	r3, [r7, #8]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f938 	bl	800417c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e005      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2e:	893b      	ldrh	r3, [r7, #8]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	00010002 	.word	0x00010002

08003f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f58:	e048      	b.n	8003fec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d044      	beq.n	8003fec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fe fa65 	bl	8002430 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d139      	bne.n	8003fec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10d      	bne.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	e00c      	b.n	8003fb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d116      	bne.n	8003fec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e023      	b.n	8004034 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d10d      	bne.n	8004012 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	e00c      	b.n	800402c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	43da      	mvns	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4013      	ands	r3, r2
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	429a      	cmp	r2, r3
 8004030:	d093      	beq.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800404a:	e071      	b.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d123      	bne.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004074:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e067      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d041      	beq.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ac:	f7fe f9c0 	bl	8002430 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d302      	bcc.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d136      	bne.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10c      	bne.n	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	43da      	mvns	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e00b      	b.n	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e021      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10c      	bne.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	43da      	mvns	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e00b      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf14      	ite	ne
 8004166:	2301      	movne	r3, #1
 8004168:	2300      	moveq	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f af6d 	bne.w	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004188:	e034      	b.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f886 	bl	800429c <I2C_IsAcknowledgeFailed>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e034      	b.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d028      	beq.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fe f945 	bl	8002430 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11d      	bne.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b80      	cmp	r3, #128	@ 0x80
 80041c4:	d016      	beq.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e007      	b.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	2b80      	cmp	r3, #128	@ 0x80
 8004200:	d1c3      	bne.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004218:	e034      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f83e 	bl	800429c <I2C_IsAcknowledgeFailed>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e034      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d028      	beq.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fe f8fd 	bl	8002430 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11d      	bne.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d016      	beq.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e007      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d1c3      	bne.n	800421a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b2:	d11b      	bne.n	80042ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	f043 0204 	orr.w	r2, r3, #4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e267      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d075      	beq.n	8004406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431a:	4b88      	ldr	r3, [pc, #544]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00c      	beq.n	8004340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004326:	4b85      	ldr	r3, [pc, #532]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800432e:	2b08      	cmp	r3, #8
 8004330:	d112      	bne.n	8004358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b82      	ldr	r3, [pc, #520]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800433e:	d10b      	bne.n	8004358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	4b7e      	ldr	r3, [pc, #504]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05b      	beq.n	8004404 <HAL_RCC_OscConfig+0x108>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d157      	bne.n	8004404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e242      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004360:	d106      	bne.n	8004370 <HAL_RCC_OscConfig+0x74>
 8004362:	4b76      	ldr	r3, [pc, #472]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a75      	ldr	r2, [pc, #468]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e01d      	b.n	80043ac <HAL_RCC_OscConfig+0xb0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x98>
 800437a:	4b70      	ldr	r3, [pc, #448]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a6f      	ldr	r2, [pc, #444]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b6d      	ldr	r3, [pc, #436]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6c      	ldr	r2, [pc, #432]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0xb0>
 8004394:	4b69      	ldr	r3, [pc, #420]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a68      	ldr	r2, [pc, #416]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800439a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b66      	ldr	r3, [pc, #408]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a65      	ldr	r2, [pc, #404]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe f83c 	bl	8002430 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fe f838 	bl	8002430 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	@ 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e207      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b5b      	ldr	r3, [pc, #364]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xc0>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe f828 	bl	8002430 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe f824 	bl	8002430 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1f3      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	4b51      	ldr	r3, [pc, #324]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0xe8>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d063      	beq.n	80044da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004412:	4b4a      	ldr	r3, [pc, #296]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800441e:	4b47      	ldr	r3, [pc, #284]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004426:	2b08      	cmp	r3, #8
 8004428:	d11c      	bne.n	8004464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b44      	ldr	r3, [pc, #272]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d116      	bne.n	8004464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	4b41      	ldr	r3, [pc, #260]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_RCC_OscConfig+0x152>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d001      	beq.n	800444e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e1c7      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b3b      	ldr	r3, [pc, #236]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4937      	ldr	r1, [pc, #220]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	e03a      	b.n	80044da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446c:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <HAL_RCC_OscConfig+0x244>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fd ffdd 	bl	8002430 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447a:	f7fd ffd9 	bl	8002430 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e1a8      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448c:	4b2b      	ldr	r3, [pc, #172]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b28      	ldr	r3, [pc, #160]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4925      	ldr	r1, [pc, #148]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
 80044ac:	e015      	b.n	80044da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ae:	4b24      	ldr	r3, [pc, #144]	@ (8004540 <HAL_RCC_OscConfig+0x244>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd ffbc 	bl	8002430 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fd ffb8 	bl	8002430 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e187      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	4b1b      	ldr	r3, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d036      	beq.n	8004554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ee:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <HAL_RCC_OscConfig+0x248>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd ff9c 	bl	8002430 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fd ff98 	bl	8002430 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e167      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450e:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x200>
 800451a:	e01b      	b.n	8004554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_RCC_OscConfig+0x248>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004522:	f7fd ff85 	bl	8002430 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	e00e      	b.n	8004548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800452a:	f7fd ff81 	bl	8002430 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d907      	bls.n	8004548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e150      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
 800453c:	40023800 	.word	0x40023800
 8004540:	42470000 	.word	0x42470000
 8004544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004548:	4b88      	ldr	r3, [pc, #544]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 800454a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ea      	bne.n	800452a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8097 	beq.w	8004690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004566:	4b81      	ldr	r3, [pc, #516]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10f      	bne.n	8004592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	4b7d      	ldr	r3, [pc, #500]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	4a7c      	ldr	r2, [pc, #496]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 800457c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004580:	6413      	str	r3, [r2, #64]	@ 0x40
 8004582:	4b7a      	ldr	r3, [pc, #488]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004592:	4b77      	ldr	r3, [pc, #476]	@ (8004770 <HAL_RCC_OscConfig+0x474>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d118      	bne.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800459e:	4b74      	ldr	r3, [pc, #464]	@ (8004770 <HAL_RCC_OscConfig+0x474>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a73      	ldr	r2, [pc, #460]	@ (8004770 <HAL_RCC_OscConfig+0x474>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045aa:	f7fd ff41 	bl	8002430 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7fd ff3d 	bl	8002430 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e10c      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004770 <HAL_RCC_OscConfig+0x474>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_OscConfig+0x2ea>
 80045d8:	4b64      	ldr	r3, [pc, #400]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a63      	ldr	r2, [pc, #396]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e4:	e01c      	b.n	8004620 <HAL_RCC_OscConfig+0x324>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x30c>
 80045ee:	4b5f      	ldr	r3, [pc, #380]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	4a5e      	ldr	r2, [pc, #376]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fa:	4b5c      	ldr	r3, [pc, #368]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	4a5b      	ldr	r2, [pc, #364]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	6713      	str	r3, [r2, #112]	@ 0x70
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0x324>
 8004608:	4b58      	ldr	r3, [pc, #352]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a57      	ldr	r2, [pc, #348]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	6713      	str	r3, [r2, #112]	@ 0x70
 8004614:	4b55      	ldr	r3, [pc, #340]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a54      	ldr	r2, [pc, #336]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fd ff02 	bl	8002430 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	e00a      	b.n	8004646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004630:	f7fd fefe 	bl	8002430 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0cb      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	4b49      	ldr	r3, [pc, #292]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0ee      	beq.n	8004630 <HAL_RCC_OscConfig+0x334>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004654:	f7fd feec 	bl	8002430 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd fee8 	bl	8002430 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0b5      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004672:	4b3e      	ldr	r3, [pc, #248]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1ee      	bne.n	800465c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d105      	bne.n	8004690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004684:	4b39      	ldr	r3, [pc, #228]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	4a38      	ldr	r2, [pc, #224]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 800468a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800468e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a1 	beq.w	80047dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800469a:	4b34      	ldr	r3, [pc, #208]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d05c      	beq.n	8004760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d141      	bne.n	8004732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fd febc 	bl	8002430 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046bc:	f7fd feb8 	bl	8002430 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e087      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ce:	4b27      	ldr	r3, [pc, #156]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	019b      	lsls	r3, r3, #6
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	3b01      	subs	r3, #1
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	491b      	ldr	r1, [pc, #108]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004704:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470a:	f7fd fe91 	bl	8002430 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004712:	f7fd fe8d 	bl	8002430 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e05c      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x416>
 8004730:	e054      	b.n	80047dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd fe7a 	bl	8002430 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd fe76 	bl	8002430 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e045      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <HAL_RCC_OscConfig+0x470>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x444>
 800475e:	e03d      	b.n	80047dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e038      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
 800476c:	40023800 	.word	0x40023800
 8004770:	40007000 	.word	0x40007000
 8004774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <HAL_RCC_OscConfig+0x4ec>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d028      	beq.n	80047d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d121      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d11a      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d111      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	3b01      	subs	r3, #1
 80047c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800

080047ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0cc      	b.n	800499a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004800:	4b68      	ldr	r3, [pc, #416]	@ (80049a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d90c      	bls.n	8004828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b65      	ldr	r3, [pc, #404]	@ (80049a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b63      	ldr	r3, [pc, #396]	@ (80049a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0b8      	b.n	800499a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d020      	beq.n	8004876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004840:	4b59      	ldr	r3, [pc, #356]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a58      	ldr	r2, [pc, #352]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800484a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004858:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a52      	ldr	r2, [pc, #328]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004864:	4b50      	ldr	r3, [pc, #320]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	494d      	ldr	r1, [pc, #308]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d044      	beq.n	800490c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488a:	4b47      	ldr	r3, [pc, #284]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d119      	bne.n	80048ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e07f      	b.n	800499a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d003      	beq.n	80048aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048aa:	4b3f      	ldr	r3, [pc, #252]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e06f      	b.n	800499a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ba:	4b3b      	ldr	r3, [pc, #236]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e067      	b.n	800499a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ca:	4b37      	ldr	r3, [pc, #220]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 0203 	bic.w	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4934      	ldr	r1, [pc, #208]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048dc:	f7fd fda8 	bl	8002430 <HAL_GetTick>
 80048e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e4:	f7fd fda4 	bl	8002430 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e04f      	b.n	800499a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	4b2b      	ldr	r3, [pc, #172]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 020c 	and.w	r2, r3, #12
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	429a      	cmp	r2, r3
 800490a:	d1eb      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800490c:	4b25      	ldr	r3, [pc, #148]	@ (80049a4 <HAL_RCC_ClockConfig+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d20c      	bcs.n	8004934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b22      	ldr	r3, [pc, #136]	@ (80049a4 <HAL_RCC_ClockConfig+0x1b8>)
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004922:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e032      	b.n	800499a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4916      	ldr	r1, [pc, #88]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800495e:	4b12      	ldr	r3, [pc, #72]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	490e      	ldr	r1, [pc, #56]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004972:	f000 f821 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004976:	4602      	mov	r2, r0
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	490a      	ldr	r1, [pc, #40]	@ (80049ac <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	5ccb      	ldrb	r3, [r1, r3]
 8004986:	fa22 f303 	lsr.w	r3, r2, r3
 800498a:	4a09      	ldr	r2, [pc, #36]	@ (80049b0 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800498e:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd fd08 	bl	80023a8 <HAL_InitTick>

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023c00 	.word	0x40023c00
 80049a8:	40023800 	.word	0x40023800
 80049ac:	08009298 	.word	0x08009298
 80049b0:	20000008 	.word	0x20000008
 80049b4:	2000000c 	.word	0x2000000c

080049b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049bc:	b090      	sub	sp, #64	@ 0x40
 80049be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c4:	2300      	movs	r3, #0
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049c8:	2300      	movs	r3, #0
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049d0:	4b59      	ldr	r3, [pc, #356]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d00d      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x40>
 80049dc:	2b08      	cmp	r3, #8
 80049de:	f200 80a1 	bhi.w	8004b24 <HAL_RCC_GetSysClockFreq+0x16c>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x34>
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ea:	e09b      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ec:	4b53      	ldr	r3, [pc, #332]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x184>)
 80049ee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80049f0:	e09b      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049f2:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049f6:	e098      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a00:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a02:	4b4d      	ldr	r3, [pc, #308]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d028      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	2200      	movs	r2, #0
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a20:	2100      	movs	r1, #0
 8004a22:	4b47      	ldr	r3, [pc, #284]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a24:	fb03 f201 	mul.w	r2, r3, r1
 8004a28:	2300      	movs	r3, #0
 8004a2a:	fb00 f303 	mul.w	r3, r0, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	4a43      	ldr	r2, [pc, #268]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a32:	fba0 1202 	umull	r1, r2, r0, r2
 8004a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a38:	460a      	mov	r2, r1
 8004a3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a3e:	4413      	add	r3, r2
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a44:	2200      	movs	r2, #0
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	61fa      	str	r2, [r7, #28]
 8004a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a52:	f7fc f901 	bl	8000c58 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a5e:	e053      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a60:	4b35      	ldr	r3, [pc, #212]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	099b      	lsrs	r3, r3, #6
 8004a66:	2200      	movs	r2, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	617a      	str	r2, [r7, #20]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a72:	f04f 0b00 	mov.w	fp, #0
 8004a76:	4652      	mov	r2, sl
 8004a78:	465b      	mov	r3, fp
 8004a7a:	f04f 0000 	mov.w	r0, #0
 8004a7e:	f04f 0100 	mov.w	r1, #0
 8004a82:	0159      	lsls	r1, r3, #5
 8004a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a88:	0150      	lsls	r0, r2, #5
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	ebb2 080a 	subs.w	r8, r2, sl
 8004a92:	eb63 090b 	sbc.w	r9, r3, fp
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004aa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004aa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004aaa:	ebb2 0408 	subs.w	r4, r2, r8
 8004aae:	eb63 0509 	sbc.w	r5, r3, r9
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	00eb      	lsls	r3, r5, #3
 8004abc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac0:	00e2      	lsls	r2, r4, #3
 8004ac2:	4614      	mov	r4, r2
 8004ac4:	461d      	mov	r5, r3
 8004ac6:	eb14 030a 	adds.w	r3, r4, sl
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	eb45 030b 	adc.w	r3, r5, fp
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ade:	4629      	mov	r1, r5
 8004ae0:	028b      	lsls	r3, r1, #10
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae8:	4621      	mov	r1, r4
 8004aea:	028a      	lsls	r2, r1, #10
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af2:	2200      	movs	r2, #0
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	60fa      	str	r2, [r7, #12]
 8004af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004afc:	f7fc f8ac 	bl	8000c58 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004b18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3740      	adds	r7, #64	@ 0x40
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	017d7840 	.word	0x017d7840

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000008 	.word	0x20000008

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a9b      	lsrs	r3, r3, #10
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	080092a8 	.word	0x080092a8

08004b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b88:	f7ff ffdc 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0b5b      	lsrs	r3, r3, #13
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	@ (8004ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	080092a8 	.word	0x080092a8

08004bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e042      	b.n	8004c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd f8fc 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	@ 0x24
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fe6b 	bl	80058cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d112      	bne.n	8004c8c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_UART_Receive_DMA+0x26>
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00b      	b.n	8004c8e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fbc2 	bl	800540c <UART_Start_Receive_DMA>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	e000      	b.n	8004c8e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b0ba      	sub	sp, #232	@ 0xe8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_UART_IRQHandler+0x66>
 8004cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fd29 	bl	800574e <UART_Receive_IT>
      return;
 8004cfc:	e25b      	b.n	80051b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80de 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x22c>
 8004d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80d1 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0xae>
 8004d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_UART_IRQHandler+0xd2>
 8004d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	f043 0202 	orr.w	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_UART_IRQHandler+0xf6>
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d86:	f043 0204 	orr.w	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <HAL_UART_IRQHandler+0x126>
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f043 0208 	orr.w	r2, r3, #8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 81f2 	beq.w	80051ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x14e>
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fcb4 	bl	800574e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_UART_IRQHandler+0x17a>
 8004e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04f      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fbbc 	bl	8005590 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d141      	bne.n	8004eaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3314      	adds	r3, #20
 8004e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1d9      	bne.n	8004e26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d013      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005078 <HAL_UART_IRQHandler+0x3e0>)
 8004e80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe f948 	bl	800311c <HAL_DMA_Abort_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00e      	b.n	8004ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f99e 	bl	80051e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e00a      	b.n	8004ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f99a 	bl	80051e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e006      	b.n	8004ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f996 	bl	80051e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ebe:	e175      	b.n	80051ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	bf00      	nop
    return;
 8004ec2:	e173      	b.n	80051ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	f040 814f 	bne.w	800516c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8148 	beq.w	800516c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8141 	beq.w	800516c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eea:	2300      	movs	r3, #0
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	f040 80b6 	bne.w	800507c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8145 	beq.w	80051b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	f080 813e 	bcs.w	80051b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f46:	f000 8088 	beq.w	800505a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d9      	bne.n	8004f4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3314      	adds	r3, #20
 8004f9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e1      	bne.n	8004f96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ff6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ffc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e3      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502a:	f023 0310 	bic.w	r3, r3, #16
 800502e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800503c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800503e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005042:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800504a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e3      	bne.n	8005018 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005054:	4618      	mov	r0, r3
 8005056:	f7fd fff1 	bl	800303c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005068:	b29b      	uxth	r3, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	b29b      	uxth	r3, r3
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8c1 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005076:	e09b      	b.n	80051b0 <HAL_UART_IRQHandler+0x518>
 8005078:	08005657 	.word	0x08005657
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005084:	b29b      	uxth	r3, r3
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 808e 	beq.w	80051b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8089 	beq.w	80051b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80050c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e3      	bne.n	80050a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3314      	adds	r3, #20
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e3      	bne.n	80050da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0310 	bic.w	r3, r3, #16
 8005136:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005144:	61fa      	str	r2, [r7, #28]
 8005146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	69b9      	ldr	r1, [r7, #24]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	617b      	str	r3, [r7, #20]
   return(result);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e3      	bne.n	8005120 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800515e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f847 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800516a:	e023      	b.n	80051b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_UART_IRQHandler+0x4f4>
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800517c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fa7a 	bl	800567e <UART_Transmit_IT>
    return;
 800518a:	e014      	b.n	80051b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00e      	beq.n	80051b6 <HAL_UART_IRQHandler+0x51e>
 8005198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800519c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 faba 	bl	800571e <UART_EndTransmit_IT>
    return;
 80051aa:	e004      	b.n	80051b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80051ac:	bf00      	nop
 80051ae:	e002      	b.n	80051b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051b0:	bf00      	nop
 80051b2:	e000      	b.n	80051b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051b4:	bf00      	nop
  }
}
 80051b6:	37e8      	adds	r7, #232	@ 0xe8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b09c      	sub	sp, #112	@ 0x70
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d172      	bne.n	8005312 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800522c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800522e:	2200      	movs	r2, #0
 8005230:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800524a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005252:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005254:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	667b      	str	r3, [r7, #100]	@ 0x64
 800527e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005286:	647a      	str	r2, [r7, #68]	@ 0x44
 8005288:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800528c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3314      	adds	r3, #20
 80052a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	623b      	str	r3, [r7, #32]
   return(result);
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3314      	adds	r3, #20
 80052b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80052bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d119      	bne.n	8005312 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 0310 	bic.w	r3, r3, #16
 80052f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052fe:	61fa      	str	r2, [r7, #28]
 8005300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	69b9      	ldr	r1, [r7, #24]
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	617b      	str	r3, [r7, #20]
   return(result);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005314:	2200      	movs	r2, #0
 8005316:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	2b01      	cmp	r3, #1
 800531e:	d106      	bne.n	800532e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005322:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005324:	4619      	mov	r1, r3
 8005326:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005328:	f7ff ff66 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800532c:	e002      	b.n	8005334 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800532e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005330:	f7fb ffde 	bl	80012f0 <HAL_UART_RxCpltCallback>
}
 8005334:	bf00      	nop
 8005336:	3770      	adds	r7, #112	@ 0x70
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005348:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005354:	2b01      	cmp	r3, #1
 8005356:	d108      	bne.n	800536a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	b29b      	uxth	r3, r3
 8005360:	4619      	mov	r1, r3
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff ff48 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005368:	e002      	b.n	8005370 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff ff30 	bl	80051d0 <HAL_UART_RxHalfCpltCallback>
}
 8005370:	bf00      	nop
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005388:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005394:	2b80      	cmp	r3, #128	@ 0x80
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b21      	cmp	r3, #33	@ 0x21
 80053aa:	d108      	bne.n	80053be <UART_DMAError+0x46>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f000 f8c1 	bl	8005540 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c8:	2b40      	cmp	r3, #64	@ 0x40
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b22      	cmp	r3, #34	@ 0x22
 80053de:	d108      	bne.n	80053f2 <UART_DMAError+0x7a>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80053ec:	68b8      	ldr	r0, [r7, #8]
 80053ee:	f000 f8cf 	bl	8005590 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053fe:	68b8      	ldr	r0, [r7, #8]
 8005400:	f7ff fef0 	bl	80051e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b098      	sub	sp, #96	@ 0x60
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2222      	movs	r2, #34	@ 0x22
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	4a3e      	ldr	r2, [pc, #248]	@ (8005534 <UART_Start_Receive_DMA+0x128>)
 800543a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005440:	4a3d      	ldr	r2, [pc, #244]	@ (8005538 <UART_Start_Receive_DMA+0x12c>)
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	4a3c      	ldr	r2, [pc, #240]	@ (800553c <UART_Start_Receive_DMA+0x130>)
 800544a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005450:	2200      	movs	r2, #0
 8005452:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005454:	f107 0308 	add.w	r3, r7, #8
 8005458:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	f7fd fd8e 	bl	8002f8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d019      	beq.n	80054c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800549e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80054b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80054bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3314      	adds	r3, #20
 80054c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3314      	adds	r3, #20
 80054e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80054e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80054e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3314      	adds	r3, #20
 80054fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	617b      	str	r3, [r7, #20]
   return(result);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800550c:	653b      	str	r3, [r7, #80]	@ 0x50
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005516:	627a      	str	r2, [r7, #36]	@ 0x24
 8005518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6a39      	ldr	r1, [r7, #32]
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	61fb      	str	r3, [r7, #28]
   return(result);
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3760      	adds	r7, #96	@ 0x60
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08005211 	.word	0x08005211
 8005538:	0800533d 	.word	0x0800533d
 800553c:	08005379 	.word	0x08005379

08005540 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	@ 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60bb      	str	r3, [r7, #8]
   return(result);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	61ba      	str	r2, [r7, #24]
 800556a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	613b      	str	r3, [r7, #16]
   return(result);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005584:	bf00      	nop
 8005586:	3724      	adds	r7, #36	@ 0x24
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b095      	sub	sp, #84	@ 0x54
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80055ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	61fb      	str	r3, [r7, #28]
   return(result);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	2b01      	cmp	r3, #1
 8005606:	d119      	bne.n	800563c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	60bb      	str	r3, [r7, #8]
   return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005628:	61ba      	str	r2, [r7, #24]
 800562a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	613b      	str	r3, [r7, #16]
   return(result);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800564a:	bf00      	nop
 800564c:	3754      	adds	r7, #84	@ 0x54
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fdb7 	bl	80051e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b21      	cmp	r3, #33	@ 0x21
 8005690:	d13e      	bne.n	8005710 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569a:	d114      	bne.n	80056c6 <UART_Transmit_IT+0x48>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d110      	bne.n	80056c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	1c9a      	adds	r2, r3, #2
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	621a      	str	r2, [r3, #32]
 80056c4:	e008      	b.n	80056d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	1c59      	adds	r1, r3, #1
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6211      	str	r1, [r2, #32]
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4619      	mov	r1, r3
 80056e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10f      	bne.n	800570c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800570a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005734:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fd3c 	bl	80051bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b08c      	sub	sp, #48	@ 0x30
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b22      	cmp	r3, #34	@ 0x22
 8005760:	f040 80ae 	bne.w	80058c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576c:	d117      	bne.n	800579e <UART_Receive_IT+0x50>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d113      	bne.n	800579e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578c:	b29a      	uxth	r2, r3
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	1c9a      	adds	r2, r3, #2
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28
 800579c:	e026      	b.n	80057ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b0:	d007      	beq.n	80057c2 <UART_Receive_IT+0x74>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <UART_Receive_IT+0x82>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e008      	b.n	80057e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4619      	mov	r1, r3
 80057fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d15d      	bne.n	80058bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0220 	bic.w	r2, r2, #32
 800580e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800581e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	2b01      	cmp	r3, #1
 8005844:	d135      	bne.n	80058b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	613b      	str	r3, [r7, #16]
   return(result);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f023 0310 	bic.w	r3, r3, #16
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586c:	623a      	str	r2, [r7, #32]
 800586e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	69f9      	ldr	r1, [r7, #28]
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	61bb      	str	r3, [r7, #24]
   return(result);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b10      	cmp	r3, #16
 800588c:	d10a      	bne.n	80058a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fca4 	bl	80051f8 <HAL_UARTEx_RxEventCallback>
 80058b0:	e002      	b.n	80058b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fb fd1c 	bl	80012f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e002      	b.n	80058c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3730      	adds	r7, #48	@ 0x30
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b0c0      	sub	sp, #256	@ 0x100
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	ea40 0301 	orr.w	r3, r0, r1
 80058f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	431a      	orrs	r2, r3
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005924:	f021 010c 	bic.w	r1, r1, #12
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005932:	430b      	orrs	r3, r1
 8005934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	6999      	ldr	r1, [r3, #24]
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	ea40 0301 	orr.w	r3, r0, r1
 8005952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b8f      	ldr	r3, [pc, #572]	@ (8005b98 <UART_SetConfig+0x2cc>)
 800595c:	429a      	cmp	r2, r3
 800595e:	d005      	beq.n	800596c <UART_SetConfig+0xa0>
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b8d      	ldr	r3, [pc, #564]	@ (8005b9c <UART_SetConfig+0x2d0>)
 8005968:	429a      	cmp	r2, r3
 800596a:	d104      	bne.n	8005976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7ff f90a 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8005970:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005974:	e003      	b.n	800597e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005976:	f7ff f8f1 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 800597a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005988:	f040 810c 	bne.w	8005ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005996:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800599a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059a6:	415b      	adcs	r3, r3
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059ae:	4621      	mov	r1, r4
 80059b0:	eb12 0801 	adds.w	r8, r2, r1
 80059b4:	4629      	mov	r1, r5
 80059b6:	eb43 0901 	adc.w	r9, r3, r1
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ce:	4690      	mov	r8, r2
 80059d0:	4699      	mov	r9, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	eb18 0303 	adds.w	r3, r8, r3
 80059d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059dc:	462b      	mov	r3, r5
 80059de:	eb49 0303 	adc.w	r3, r9, r3
 80059e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059fa:	460b      	mov	r3, r1
 80059fc:	18db      	adds	r3, r3, r3
 80059fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a00:	4613      	mov	r3, r2
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a10:	f7fb f922 	bl	8000c58 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4b61      	ldr	r3, [pc, #388]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	011c      	lsls	r4, r3, #4
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a44:	4641      	mov	r1, r8
 8005a46:	eb12 0a01 	adds.w	sl, r2, r1
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a64:	4692      	mov	sl, r2
 8005a66:	469b      	mov	fp, r3
 8005a68:	4643      	mov	r3, r8
 8005a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a72:	464b      	mov	r3, r9
 8005a74:	eb4b 0303 	adc.w	r3, fp, r3
 8005a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a90:	460b      	mov	r3, r1
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a96:	4613      	mov	r3, r2
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aa6:	f7fb f8d7 	bl	8000c58 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2264      	movs	r2, #100	@ 0x64
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	1acb      	subs	r3, r1, r3
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ac6:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ad4:	441c      	add	r4, r3
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005af0:	415b      	adcs	r3, r3
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005af8:	4641      	mov	r1, r8
 8005afa:	1851      	adds	r1, r2, r1
 8005afc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005afe:	4649      	mov	r1, r9
 8005b00:	414b      	adcs	r3, r1
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b10:	4659      	mov	r1, fp
 8005b12:	00cb      	lsls	r3, r1, #3
 8005b14:	4651      	mov	r1, sl
 8005b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	00ca      	lsls	r2, r1, #3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	4642      	mov	r2, r8
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	460a      	mov	r2, r1
 8005b30:	eb42 0303 	adc.w	r3, r2, r3
 8005b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	18db      	adds	r3, r3, r3
 8005b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b52:	4613      	mov	r3, r2
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b62:	f7fb f879 	bl	8000c58 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	@ 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3332      	adds	r3, #50	@ 0x32
 8005b7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 0207 	and.w	r2, r3, #7
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4422      	add	r2, r4
 8005b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b94:	e106      	b.n	8005da4 <UART_SetConfig+0x4d8>
 8005b96:	bf00      	nop
 8005b98:	40011000 	.word	0x40011000
 8005b9c:	40011400 	.word	0x40011400
 8005ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	464b      	mov	r3, r9
 8005bba:	1891      	adds	r1, r2, r2
 8005bbc:	6239      	str	r1, [r7, #32]
 8005bbe:	415b      	adcs	r3, r3
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	1854      	adds	r4, r2, r1
 8005bca:	4649      	mov	r1, r9
 8005bcc:	eb43 0501 	adc.w	r5, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	00eb      	lsls	r3, r5, #3
 8005bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bde:	00e2      	lsls	r2, r4, #3
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	4643      	mov	r3, r8
 8005be6:	18e3      	adds	r3, r4, r3
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bec:	464b      	mov	r3, r9
 8005bee:	eb45 0303 	adc.w	r3, r5, r3
 8005bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c12:	4629      	mov	r1, r5
 8005c14:	008b      	lsls	r3, r1, #2
 8005c16:	4621      	mov	r1, r4
 8005c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	008a      	lsls	r2, r1, #2
 8005c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c24:	f7fb f818 	bl	8000c58 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4b60      	ldr	r3, [pc, #384]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	011c      	lsls	r4, r3, #4
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	1891      	adds	r1, r2, r2
 8005c4e:	61b9      	str	r1, [r7, #24]
 8005c50:	415b      	adcs	r3, r3
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c58:	4641      	mov	r1, r8
 8005c5a:	1851      	adds	r1, r2, r1
 8005c5c:	6139      	str	r1, [r7, #16]
 8005c5e:	4649      	mov	r1, r9
 8005c60:	414b      	adcs	r3, r1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c70:	4659      	mov	r1, fp
 8005c72:	00cb      	lsls	r3, r1, #3
 8005c74:	4651      	mov	r1, sl
 8005c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	00ca      	lsls	r2, r1, #3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	4642      	mov	r2, r8
 8005c86:	189b      	adds	r3, r3, r2
 8005c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	460a      	mov	r2, r1
 8005c90:	eb42 0303 	adc.w	r3, r2, r3
 8005c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	008b      	lsls	r3, r1, #2
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cba:	4641      	mov	r1, r8
 8005cbc:	008a      	lsls	r2, r1, #2
 8005cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cc2:	f7fa ffc9 	bl	8000c58 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4b38      	ldr	r3, [pc, #224]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005cce:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2264      	movs	r2, #100	@ 0x64
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	1acb      	subs	r3, r1, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	@ 0x32
 8005ce0:	4a33      	ldr	r2, [pc, #204]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cec:	441c      	add	r4, r3
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	415b      	adcs	r3, r3
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d3e:	464b      	mov	r3, r9
 8005d40:	460a      	mov	r2, r1
 8005d42:	eb42 0303 	adc.w	r3, r2, r3
 8005d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d52:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d60:	4649      	mov	r1, r9
 8005d62:	008b      	lsls	r3, r1, #2
 8005d64:	4641      	mov	r1, r8
 8005d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6a:	4641      	mov	r1, r8
 8005d6c:	008a      	lsls	r2, r1, #2
 8005d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d72:	f7fa ff71 	bl	8000c58 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	@ 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	@ 0x32
 8005d8e:	4a08      	ldr	r2, [pc, #32]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4422      	add	r2, r4
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005daa:	46bd      	mov	sp, r7
 8005dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db0:	51eb851f 	.word	0x51eb851f

08005db4 <__cvt>:
 8005db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	ec57 6b10 	vmov	r6, r7, d0
 8005dbc:	2f00      	cmp	r7, #0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	bfbb      	ittet	lt
 8005dc6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005dca:	461f      	movlt	r7, r3
 8005dcc:	2300      	movge	r3, #0
 8005dce:	232d      	movlt	r3, #45	@ 0x2d
 8005dd0:	700b      	strb	r3, [r1, #0]
 8005dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dd4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005dd8:	4691      	mov	r9, r2
 8005dda:	f023 0820 	bic.w	r8, r3, #32
 8005dde:	bfbc      	itt	lt
 8005de0:	4632      	movlt	r2, r6
 8005de2:	4616      	movlt	r6, r2
 8005de4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005de8:	d005      	beq.n	8005df6 <__cvt+0x42>
 8005dea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005dee:	d100      	bne.n	8005df2 <__cvt+0x3e>
 8005df0:	3401      	adds	r4, #1
 8005df2:	2102      	movs	r1, #2
 8005df4:	e000      	b.n	8005df8 <__cvt+0x44>
 8005df6:	2103      	movs	r1, #3
 8005df8:	ab03      	add	r3, sp, #12
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	ab02      	add	r3, sp, #8
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	ec47 6b10 	vmov	d0, r6, r7
 8005e04:	4653      	mov	r3, sl
 8005e06:	4622      	mov	r2, r4
 8005e08:	f000 fe82 	bl	8006b10 <_dtoa_r>
 8005e0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e10:	4605      	mov	r5, r0
 8005e12:	d119      	bne.n	8005e48 <__cvt+0x94>
 8005e14:	f019 0f01 	tst.w	r9, #1
 8005e18:	d00e      	beq.n	8005e38 <__cvt+0x84>
 8005e1a:	eb00 0904 	add.w	r9, r0, r4
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2300      	movs	r3, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e2a:	b108      	cbz	r0, 8005e30 <__cvt+0x7c>
 8005e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e30:	2230      	movs	r2, #48	@ 0x30
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	454b      	cmp	r3, r9
 8005e36:	d31e      	bcc.n	8005e76 <__cvt+0xc2>
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e3c:	1b5b      	subs	r3, r3, r5
 8005e3e:	4628      	mov	r0, r5
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	b004      	add	sp, #16
 8005e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e4c:	eb00 0904 	add.w	r9, r0, r4
 8005e50:	d1e5      	bne.n	8005e1e <__cvt+0x6a>
 8005e52:	7803      	ldrb	r3, [r0, #0]
 8005e54:	2b30      	cmp	r3, #48	@ 0x30
 8005e56:	d10a      	bne.n	8005e6e <__cvt+0xba>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e64:	b918      	cbnz	r0, 8005e6e <__cvt+0xba>
 8005e66:	f1c4 0401 	rsb	r4, r4, #1
 8005e6a:	f8ca 4000 	str.w	r4, [sl]
 8005e6e:	f8da 3000 	ldr.w	r3, [sl]
 8005e72:	4499      	add	r9, r3
 8005e74:	e7d3      	b.n	8005e1e <__cvt+0x6a>
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	9103      	str	r1, [sp, #12]
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e7d9      	b.n	8005e32 <__cvt+0x7e>

08005e7e <__exponent>:
 8005e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e80:	2900      	cmp	r1, #0
 8005e82:	bfba      	itte	lt
 8005e84:	4249      	neglt	r1, r1
 8005e86:	232d      	movlt	r3, #45	@ 0x2d
 8005e88:	232b      	movge	r3, #43	@ 0x2b
 8005e8a:	2909      	cmp	r1, #9
 8005e8c:	7002      	strb	r2, [r0, #0]
 8005e8e:	7043      	strb	r3, [r0, #1]
 8005e90:	dd29      	ble.n	8005ee6 <__exponent+0x68>
 8005e92:	f10d 0307 	add.w	r3, sp, #7
 8005e96:	461d      	mov	r5, r3
 8005e98:	270a      	movs	r7, #10
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ea0:	fb07 1416 	mls	r4, r7, r6, r1
 8005ea4:	3430      	adds	r4, #48	@ 0x30
 8005ea6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005eaa:	460c      	mov	r4, r1
 8005eac:	2c63      	cmp	r4, #99	@ 0x63
 8005eae:	f103 33ff 	add.w	r3, r3, #4294967295
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	dcf1      	bgt.n	8005e9a <__exponent+0x1c>
 8005eb6:	3130      	adds	r1, #48	@ 0x30
 8005eb8:	1e94      	subs	r4, r2, #2
 8005eba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ebe:	1c41      	adds	r1, r0, #1
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	42ab      	cmp	r3, r5
 8005ec4:	d30a      	bcc.n	8005edc <__exponent+0x5e>
 8005ec6:	f10d 0309 	add.w	r3, sp, #9
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	42ac      	cmp	r4, r5
 8005ece:	bf88      	it	hi
 8005ed0:	2300      	movhi	r3, #0
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	4403      	add	r3, r0
 8005ed6:	1a18      	subs	r0, r3, r0
 8005ed8:	b003      	add	sp, #12
 8005eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005edc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ee0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ee4:	e7ed      	b.n	8005ec2 <__exponent+0x44>
 8005ee6:	2330      	movs	r3, #48	@ 0x30
 8005ee8:	3130      	adds	r1, #48	@ 0x30
 8005eea:	7083      	strb	r3, [r0, #2]
 8005eec:	70c1      	strb	r1, [r0, #3]
 8005eee:	1d03      	adds	r3, r0, #4
 8005ef0:	e7f1      	b.n	8005ed6 <__exponent+0x58>
	...

08005ef4 <_printf_float>:
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	b08d      	sub	sp, #52	@ 0x34
 8005efa:	460c      	mov	r4, r1
 8005efc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f00:	4616      	mov	r6, r2
 8005f02:	461f      	mov	r7, r3
 8005f04:	4605      	mov	r5, r0
 8005f06:	f000 fcf5 	bl	80068f4 <_localeconv_r>
 8005f0a:	6803      	ldr	r3, [r0, #0]
 8005f0c:	9304      	str	r3, [sp, #16]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fa f9b6 	bl	8000280 <strlen>
 8005f14:	2300      	movs	r3, #0
 8005f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f18:	f8d8 3000 	ldr.w	r3, [r8]
 8005f1c:	9005      	str	r0, [sp, #20]
 8005f1e:	3307      	adds	r3, #7
 8005f20:	f023 0307 	bic.w	r3, r3, #7
 8005f24:	f103 0208 	add.w	r2, r3, #8
 8005f28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f2c:	f8d4 b000 	ldr.w	fp, [r4]
 8005f30:	f8c8 2000 	str.w	r2, [r8]
 8005f34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f3c:	9307      	str	r3, [sp, #28]
 8005f3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80061bc <_printf_float+0x2c8>)
 8005f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f50:	f7fa fdf4 	bl	8000b3c <__aeabi_dcmpun>
 8005f54:	bb70      	cbnz	r0, 8005fb4 <_printf_float+0xc0>
 8005f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f5a:	4b98      	ldr	r3, [pc, #608]	@ (80061bc <_printf_float+0x2c8>)
 8005f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f60:	f7fa fdce 	bl	8000b00 <__aeabi_dcmple>
 8005f64:	bb30      	cbnz	r0, 8005fb4 <_printf_float+0xc0>
 8005f66:	2200      	movs	r2, #0
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f7fa fdbd 	bl	8000aec <__aeabi_dcmplt>
 8005f72:	b110      	cbz	r0, 8005f7a <_printf_float+0x86>
 8005f74:	232d      	movs	r3, #45	@ 0x2d
 8005f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f7a:	4a91      	ldr	r2, [pc, #580]	@ (80061c0 <_printf_float+0x2cc>)
 8005f7c:	4b91      	ldr	r3, [pc, #580]	@ (80061c4 <_printf_float+0x2d0>)
 8005f7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f82:	bf94      	ite	ls
 8005f84:	4690      	movls	r8, r2
 8005f86:	4698      	movhi	r8, r3
 8005f88:	2303      	movs	r3, #3
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	f02b 0304 	bic.w	r3, fp, #4
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	f04f 0900 	mov.w	r9, #0
 8005f96:	9700      	str	r7, [sp, #0]
 8005f98:	4633      	mov	r3, r6
 8005f9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 f9d2 	bl	8006348 <_printf_common>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f040 808d 	bne.w	80060c4 <_printf_float+0x1d0>
 8005faa:	f04f 30ff 	mov.w	r0, #4294967295
 8005fae:	b00d      	add	sp, #52	@ 0x34
 8005fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4649      	mov	r1, r9
 8005fbc:	f7fa fdbe 	bl	8000b3c <__aeabi_dcmpun>
 8005fc0:	b140      	cbz	r0, 8005fd4 <_printf_float+0xe0>
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bfbc      	itt	lt
 8005fc8:	232d      	movlt	r3, #45	@ 0x2d
 8005fca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005fce:	4a7e      	ldr	r2, [pc, #504]	@ (80061c8 <_printf_float+0x2d4>)
 8005fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80061cc <_printf_float+0x2d8>)
 8005fd2:	e7d4      	b.n	8005f7e <_printf_float+0x8a>
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005fda:	9206      	str	r2, [sp, #24]
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	d13b      	bne.n	8006058 <_printf_float+0x164>
 8005fe0:	2306      	movs	r3, #6
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ff0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ff4:	ab09      	add	r3, sp, #36	@ 0x24
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	6861      	ldr	r1, [r4, #4]
 8005ffa:	ec49 8b10 	vmov	d0, r8, r9
 8005ffe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006002:	4628      	mov	r0, r5
 8006004:	f7ff fed6 	bl	8005db4 <__cvt>
 8006008:	9b06      	ldr	r3, [sp, #24]
 800600a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800600c:	2b47      	cmp	r3, #71	@ 0x47
 800600e:	4680      	mov	r8, r0
 8006010:	d129      	bne.n	8006066 <_printf_float+0x172>
 8006012:	1cc8      	adds	r0, r1, #3
 8006014:	db02      	blt.n	800601c <_printf_float+0x128>
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	4299      	cmp	r1, r3
 800601a:	dd41      	ble.n	80060a0 <_printf_float+0x1ac>
 800601c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006020:	fa5f fa8a 	uxtb.w	sl, sl
 8006024:	3901      	subs	r1, #1
 8006026:	4652      	mov	r2, sl
 8006028:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800602c:	9109      	str	r1, [sp, #36]	@ 0x24
 800602e:	f7ff ff26 	bl	8005e7e <__exponent>
 8006032:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006034:	1813      	adds	r3, r2, r0
 8006036:	2a01      	cmp	r2, #1
 8006038:	4681      	mov	r9, r0
 800603a:	6123      	str	r3, [r4, #16]
 800603c:	dc02      	bgt.n	8006044 <_printf_float+0x150>
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	07d2      	lsls	r2, r2, #31
 8006042:	d501      	bpl.n	8006048 <_printf_float+0x154>
 8006044:	3301      	adds	r3, #1
 8006046:	6123      	str	r3, [r4, #16]
 8006048:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0a2      	beq.n	8005f96 <_printf_float+0xa2>
 8006050:	232d      	movs	r3, #45	@ 0x2d
 8006052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006056:	e79e      	b.n	8005f96 <_printf_float+0xa2>
 8006058:	9a06      	ldr	r2, [sp, #24]
 800605a:	2a47      	cmp	r2, #71	@ 0x47
 800605c:	d1c2      	bne.n	8005fe4 <_printf_float+0xf0>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1c0      	bne.n	8005fe4 <_printf_float+0xf0>
 8006062:	2301      	movs	r3, #1
 8006064:	e7bd      	b.n	8005fe2 <_printf_float+0xee>
 8006066:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800606a:	d9db      	bls.n	8006024 <_printf_float+0x130>
 800606c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006070:	d118      	bne.n	80060a4 <_printf_float+0x1b0>
 8006072:	2900      	cmp	r1, #0
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	dd0b      	ble.n	8006090 <_printf_float+0x19c>
 8006078:	6121      	str	r1, [r4, #16]
 800607a:	b913      	cbnz	r3, 8006082 <_printf_float+0x18e>
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	07d0      	lsls	r0, r2, #31
 8006080:	d502      	bpl.n	8006088 <_printf_float+0x194>
 8006082:	3301      	adds	r3, #1
 8006084:	440b      	add	r3, r1
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	65a1      	str	r1, [r4, #88]	@ 0x58
 800608a:	f04f 0900 	mov.w	r9, #0
 800608e:	e7db      	b.n	8006048 <_printf_float+0x154>
 8006090:	b913      	cbnz	r3, 8006098 <_printf_float+0x1a4>
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	07d2      	lsls	r2, r2, #31
 8006096:	d501      	bpl.n	800609c <_printf_float+0x1a8>
 8006098:	3302      	adds	r3, #2
 800609a:	e7f4      	b.n	8006086 <_printf_float+0x192>
 800609c:	2301      	movs	r3, #1
 800609e:	e7f2      	b.n	8006086 <_printf_float+0x192>
 80060a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060a6:	4299      	cmp	r1, r3
 80060a8:	db05      	blt.n	80060b6 <_printf_float+0x1c2>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	6121      	str	r1, [r4, #16]
 80060ae:	07d8      	lsls	r0, r3, #31
 80060b0:	d5ea      	bpl.n	8006088 <_printf_float+0x194>
 80060b2:	1c4b      	adds	r3, r1, #1
 80060b4:	e7e7      	b.n	8006086 <_printf_float+0x192>
 80060b6:	2900      	cmp	r1, #0
 80060b8:	bfd4      	ite	le
 80060ba:	f1c1 0202 	rsble	r2, r1, #2
 80060be:	2201      	movgt	r2, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	e7e0      	b.n	8006086 <_printf_float+0x192>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	055a      	lsls	r2, r3, #21
 80060c8:	d407      	bmi.n	80060da <_printf_float+0x1e6>
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	4642      	mov	r2, r8
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	d12b      	bne.n	8006130 <_printf_float+0x23c>
 80060d8:	e767      	b.n	8005faa <_printf_float+0xb6>
 80060da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060de:	f240 80dd 	bls.w	800629c <_printf_float+0x3a8>
 80060e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060e6:	2200      	movs	r2, #0
 80060e8:	2300      	movs	r3, #0
 80060ea:	f7fa fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d033      	beq.n	800615a <_printf_float+0x266>
 80060f2:	4a37      	ldr	r2, [pc, #220]	@ (80061d0 <_printf_float+0x2dc>)
 80060f4:	2301      	movs	r3, #1
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	f43f af54 	beq.w	8005faa <_printf_float+0xb6>
 8006102:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006106:	4543      	cmp	r3, r8
 8006108:	db02      	blt.n	8006110 <_printf_float+0x21c>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	07d8      	lsls	r0, r3, #31
 800610e:	d50f      	bpl.n	8006130 <_printf_float+0x23c>
 8006110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	f43f af45 	beq.w	8005faa <_printf_float+0xb6>
 8006120:	f04f 0900 	mov.w	r9, #0
 8006124:	f108 38ff 	add.w	r8, r8, #4294967295
 8006128:	f104 0a1a 	add.w	sl, r4, #26
 800612c:	45c8      	cmp	r8, r9
 800612e:	dc09      	bgt.n	8006144 <_printf_float+0x250>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	079b      	lsls	r3, r3, #30
 8006134:	f100 8103 	bmi.w	800633e <_printf_float+0x44a>
 8006138:	68e0      	ldr	r0, [r4, #12]
 800613a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800613c:	4298      	cmp	r0, r3
 800613e:	bfb8      	it	lt
 8006140:	4618      	movlt	r0, r3
 8006142:	e734      	b.n	8005fae <_printf_float+0xba>
 8006144:	2301      	movs	r3, #1
 8006146:	4652      	mov	r2, sl
 8006148:	4631      	mov	r1, r6
 800614a:	4628      	mov	r0, r5
 800614c:	47b8      	blx	r7
 800614e:	3001      	adds	r0, #1
 8006150:	f43f af2b 	beq.w	8005faa <_printf_float+0xb6>
 8006154:	f109 0901 	add.w	r9, r9, #1
 8006158:	e7e8      	b.n	800612c <_printf_float+0x238>
 800615a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	dc39      	bgt.n	80061d4 <_printf_float+0x2e0>
 8006160:	4a1b      	ldr	r2, [pc, #108]	@ (80061d0 <_printf_float+0x2dc>)
 8006162:	2301      	movs	r3, #1
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f af1d 	beq.w	8005faa <_printf_float+0xb6>
 8006170:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006174:	ea59 0303 	orrs.w	r3, r9, r3
 8006178:	d102      	bne.n	8006180 <_printf_float+0x28c>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	07d9      	lsls	r1, r3, #31
 800617e:	d5d7      	bpl.n	8006130 <_printf_float+0x23c>
 8006180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f af0d 	beq.w	8005faa <_printf_float+0xb6>
 8006190:	f04f 0a00 	mov.w	sl, #0
 8006194:	f104 0b1a 	add.w	fp, r4, #26
 8006198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800619a:	425b      	negs	r3, r3
 800619c:	4553      	cmp	r3, sl
 800619e:	dc01      	bgt.n	80061a4 <_printf_float+0x2b0>
 80061a0:	464b      	mov	r3, r9
 80061a2:	e793      	b.n	80060cc <_printf_float+0x1d8>
 80061a4:	2301      	movs	r3, #1
 80061a6:	465a      	mov	r2, fp
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f aefb 	beq.w	8005faa <_printf_float+0xb6>
 80061b4:	f10a 0a01 	add.w	sl, sl, #1
 80061b8:	e7ee      	b.n	8006198 <_printf_float+0x2a4>
 80061ba:	bf00      	nop
 80061bc:	7fefffff 	.word	0x7fefffff
 80061c0:	080092b8 	.word	0x080092b8
 80061c4:	080092bc 	.word	0x080092bc
 80061c8:	080092c0 	.word	0x080092c0
 80061cc:	080092c4 	.word	0x080092c4
 80061d0:	080092c8 	.word	0x080092c8
 80061d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061da:	4553      	cmp	r3, sl
 80061dc:	bfa8      	it	ge
 80061de:	4653      	movge	r3, sl
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	4699      	mov	r9, r3
 80061e4:	dc36      	bgt.n	8006254 <_printf_float+0x360>
 80061e6:	f04f 0b00 	mov.w	fp, #0
 80061ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061ee:	f104 021a 	add.w	r2, r4, #26
 80061f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061f4:	9306      	str	r3, [sp, #24]
 80061f6:	eba3 0309 	sub.w	r3, r3, r9
 80061fa:	455b      	cmp	r3, fp
 80061fc:	dc31      	bgt.n	8006262 <_printf_float+0x36e>
 80061fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006200:	459a      	cmp	sl, r3
 8006202:	dc3a      	bgt.n	800627a <_printf_float+0x386>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	07da      	lsls	r2, r3, #31
 8006208:	d437      	bmi.n	800627a <_printf_float+0x386>
 800620a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800620c:	ebaa 0903 	sub.w	r9, sl, r3
 8006210:	9b06      	ldr	r3, [sp, #24]
 8006212:	ebaa 0303 	sub.w	r3, sl, r3
 8006216:	4599      	cmp	r9, r3
 8006218:	bfa8      	it	ge
 800621a:	4699      	movge	r9, r3
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	dc33      	bgt.n	800628a <_printf_float+0x396>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800622a:	f104 0b1a 	add.w	fp, r4, #26
 800622e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006230:	ebaa 0303 	sub.w	r3, sl, r3
 8006234:	eba3 0309 	sub.w	r3, r3, r9
 8006238:	4543      	cmp	r3, r8
 800623a:	f77f af79 	ble.w	8006130 <_printf_float+0x23c>
 800623e:	2301      	movs	r3, #1
 8006240:	465a      	mov	r2, fp
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	47b8      	blx	r7
 8006248:	3001      	adds	r0, #1
 800624a:	f43f aeae 	beq.w	8005faa <_printf_float+0xb6>
 800624e:	f108 0801 	add.w	r8, r8, #1
 8006252:	e7ec      	b.n	800622e <_printf_float+0x33a>
 8006254:	4642      	mov	r2, r8
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	d1c2      	bne.n	80061e6 <_printf_float+0x2f2>
 8006260:	e6a3      	b.n	8005faa <_printf_float+0xb6>
 8006262:	2301      	movs	r3, #1
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	9206      	str	r2, [sp, #24]
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae9c 	beq.w	8005faa <_printf_float+0xb6>
 8006272:	9a06      	ldr	r2, [sp, #24]
 8006274:	f10b 0b01 	add.w	fp, fp, #1
 8006278:	e7bb      	b.n	80061f2 <_printf_float+0x2fe>
 800627a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800627e:	4631      	mov	r1, r6
 8006280:	4628      	mov	r0, r5
 8006282:	47b8      	blx	r7
 8006284:	3001      	adds	r0, #1
 8006286:	d1c0      	bne.n	800620a <_printf_float+0x316>
 8006288:	e68f      	b.n	8005faa <_printf_float+0xb6>
 800628a:	9a06      	ldr	r2, [sp, #24]
 800628c:	464b      	mov	r3, r9
 800628e:	4442      	add	r2, r8
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	d1c3      	bne.n	8006222 <_printf_float+0x32e>
 800629a:	e686      	b.n	8005faa <_printf_float+0xb6>
 800629c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062a0:	f1ba 0f01 	cmp.w	sl, #1
 80062a4:	dc01      	bgt.n	80062aa <_printf_float+0x3b6>
 80062a6:	07db      	lsls	r3, r3, #31
 80062a8:	d536      	bpl.n	8006318 <_printf_float+0x424>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4642      	mov	r2, r8
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f ae78 	beq.w	8005faa <_printf_float+0xb6>
 80062ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	f43f ae70 	beq.w	8005faa <_printf_float+0xb6>
 80062ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062ce:	2200      	movs	r2, #0
 80062d0:	2300      	movs	r3, #0
 80062d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062d6:	f7fa fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80062da:	b9c0      	cbnz	r0, 800630e <_printf_float+0x41a>
 80062dc:	4653      	mov	r3, sl
 80062de:	f108 0201 	add.w	r2, r8, #1
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	d10c      	bne.n	8006306 <_printf_float+0x412>
 80062ec:	e65d      	b.n	8005faa <_printf_float+0xb6>
 80062ee:	2301      	movs	r3, #1
 80062f0:	465a      	mov	r2, fp
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	f43f ae56 	beq.w	8005faa <_printf_float+0xb6>
 80062fe:	f108 0801 	add.w	r8, r8, #1
 8006302:	45d0      	cmp	r8, sl
 8006304:	dbf3      	blt.n	80062ee <_printf_float+0x3fa>
 8006306:	464b      	mov	r3, r9
 8006308:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800630c:	e6df      	b.n	80060ce <_printf_float+0x1da>
 800630e:	f04f 0800 	mov.w	r8, #0
 8006312:	f104 0b1a 	add.w	fp, r4, #26
 8006316:	e7f4      	b.n	8006302 <_printf_float+0x40e>
 8006318:	2301      	movs	r3, #1
 800631a:	4642      	mov	r2, r8
 800631c:	e7e1      	b.n	80062e2 <_printf_float+0x3ee>
 800631e:	2301      	movs	r3, #1
 8006320:	464a      	mov	r2, r9
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	f43f ae3e 	beq.w	8005faa <_printf_float+0xb6>
 800632e:	f108 0801 	add.w	r8, r8, #1
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006336:	1a5b      	subs	r3, r3, r1
 8006338:	4543      	cmp	r3, r8
 800633a:	dcf0      	bgt.n	800631e <_printf_float+0x42a>
 800633c:	e6fc      	b.n	8006138 <_printf_float+0x244>
 800633e:	f04f 0800 	mov.w	r8, #0
 8006342:	f104 0919 	add.w	r9, r4, #25
 8006346:	e7f4      	b.n	8006332 <_printf_float+0x43e>

08006348 <_printf_common>:
 8006348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	4616      	mov	r6, r2
 800634e:	4698      	mov	r8, r3
 8006350:	688a      	ldr	r2, [r1, #8]
 8006352:	690b      	ldr	r3, [r1, #16]
 8006354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006358:	4293      	cmp	r3, r2
 800635a:	bfb8      	it	lt
 800635c:	4613      	movlt	r3, r2
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006364:	4607      	mov	r7, r0
 8006366:	460c      	mov	r4, r1
 8006368:	b10a      	cbz	r2, 800636e <_printf_common+0x26>
 800636a:	3301      	adds	r3, #1
 800636c:	6033      	str	r3, [r6, #0]
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	0699      	lsls	r1, r3, #26
 8006372:	bf42      	ittt	mi
 8006374:	6833      	ldrmi	r3, [r6, #0]
 8006376:	3302      	addmi	r3, #2
 8006378:	6033      	strmi	r3, [r6, #0]
 800637a:	6825      	ldr	r5, [r4, #0]
 800637c:	f015 0506 	ands.w	r5, r5, #6
 8006380:	d106      	bne.n	8006390 <_printf_common+0x48>
 8006382:	f104 0a19 	add.w	sl, r4, #25
 8006386:	68e3      	ldr	r3, [r4, #12]
 8006388:	6832      	ldr	r2, [r6, #0]
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	42ab      	cmp	r3, r5
 800638e:	dc26      	bgt.n	80063de <_printf_common+0x96>
 8006390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	3b00      	subs	r3, #0
 8006398:	bf18      	it	ne
 800639a:	2301      	movne	r3, #1
 800639c:	0692      	lsls	r2, r2, #26
 800639e:	d42b      	bmi.n	80063f8 <_printf_common+0xb0>
 80063a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063a4:	4641      	mov	r1, r8
 80063a6:	4638      	mov	r0, r7
 80063a8:	47c8      	blx	r9
 80063aa:	3001      	adds	r0, #1
 80063ac:	d01e      	beq.n	80063ec <_printf_common+0xa4>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	6922      	ldr	r2, [r4, #16]
 80063b2:	f003 0306 	and.w	r3, r3, #6
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	bf02      	ittt	eq
 80063ba:	68e5      	ldreq	r5, [r4, #12]
 80063bc:	6833      	ldreq	r3, [r6, #0]
 80063be:	1aed      	subeq	r5, r5, r3
 80063c0:	68a3      	ldr	r3, [r4, #8]
 80063c2:	bf0c      	ite	eq
 80063c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063c8:	2500      	movne	r5, #0
 80063ca:	4293      	cmp	r3, r2
 80063cc:	bfc4      	itt	gt
 80063ce:	1a9b      	subgt	r3, r3, r2
 80063d0:	18ed      	addgt	r5, r5, r3
 80063d2:	2600      	movs	r6, #0
 80063d4:	341a      	adds	r4, #26
 80063d6:	42b5      	cmp	r5, r6
 80063d8:	d11a      	bne.n	8006410 <_printf_common+0xc8>
 80063da:	2000      	movs	r0, #0
 80063dc:	e008      	b.n	80063f0 <_printf_common+0xa8>
 80063de:	2301      	movs	r3, #1
 80063e0:	4652      	mov	r2, sl
 80063e2:	4641      	mov	r1, r8
 80063e4:	4638      	mov	r0, r7
 80063e6:	47c8      	blx	r9
 80063e8:	3001      	adds	r0, #1
 80063ea:	d103      	bne.n	80063f4 <_printf_common+0xac>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f4:	3501      	adds	r5, #1
 80063f6:	e7c6      	b.n	8006386 <_printf_common+0x3e>
 80063f8:	18e1      	adds	r1, r4, r3
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	2030      	movs	r0, #48	@ 0x30
 80063fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006402:	4422      	add	r2, r4
 8006404:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006408:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800640c:	3302      	adds	r3, #2
 800640e:	e7c7      	b.n	80063a0 <_printf_common+0x58>
 8006410:	2301      	movs	r3, #1
 8006412:	4622      	mov	r2, r4
 8006414:	4641      	mov	r1, r8
 8006416:	4638      	mov	r0, r7
 8006418:	47c8      	blx	r9
 800641a:	3001      	adds	r0, #1
 800641c:	d0e6      	beq.n	80063ec <_printf_common+0xa4>
 800641e:	3601      	adds	r6, #1
 8006420:	e7d9      	b.n	80063d6 <_printf_common+0x8e>
	...

08006424 <_printf_i>:
 8006424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	7e0f      	ldrb	r7, [r1, #24]
 800642a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800642c:	2f78      	cmp	r7, #120	@ 0x78
 800642e:	4691      	mov	r9, r2
 8006430:	4680      	mov	r8, r0
 8006432:	460c      	mov	r4, r1
 8006434:	469a      	mov	sl, r3
 8006436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800643a:	d807      	bhi.n	800644c <_printf_i+0x28>
 800643c:	2f62      	cmp	r7, #98	@ 0x62
 800643e:	d80a      	bhi.n	8006456 <_printf_i+0x32>
 8006440:	2f00      	cmp	r7, #0
 8006442:	f000 80d2 	beq.w	80065ea <_printf_i+0x1c6>
 8006446:	2f58      	cmp	r7, #88	@ 0x58
 8006448:	f000 80b9 	beq.w	80065be <_printf_i+0x19a>
 800644c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006454:	e03a      	b.n	80064cc <_printf_i+0xa8>
 8006456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800645a:	2b15      	cmp	r3, #21
 800645c:	d8f6      	bhi.n	800644c <_printf_i+0x28>
 800645e:	a101      	add	r1, pc, #4	@ (adr r1, 8006464 <_printf_i+0x40>)
 8006460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006464:	080064bd 	.word	0x080064bd
 8006468:	080064d1 	.word	0x080064d1
 800646c:	0800644d 	.word	0x0800644d
 8006470:	0800644d 	.word	0x0800644d
 8006474:	0800644d 	.word	0x0800644d
 8006478:	0800644d 	.word	0x0800644d
 800647c:	080064d1 	.word	0x080064d1
 8006480:	0800644d 	.word	0x0800644d
 8006484:	0800644d 	.word	0x0800644d
 8006488:	0800644d 	.word	0x0800644d
 800648c:	0800644d 	.word	0x0800644d
 8006490:	080065d1 	.word	0x080065d1
 8006494:	080064fb 	.word	0x080064fb
 8006498:	0800658b 	.word	0x0800658b
 800649c:	0800644d 	.word	0x0800644d
 80064a0:	0800644d 	.word	0x0800644d
 80064a4:	080065f3 	.word	0x080065f3
 80064a8:	0800644d 	.word	0x0800644d
 80064ac:	080064fb 	.word	0x080064fb
 80064b0:	0800644d 	.word	0x0800644d
 80064b4:	0800644d 	.word	0x0800644d
 80064b8:	08006593 	.word	0x08006593
 80064bc:	6833      	ldr	r3, [r6, #0]
 80064be:	1d1a      	adds	r2, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6032      	str	r2, [r6, #0]
 80064c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064cc:	2301      	movs	r3, #1
 80064ce:	e09d      	b.n	800660c <_printf_i+0x1e8>
 80064d0:	6833      	ldr	r3, [r6, #0]
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	1d19      	adds	r1, r3, #4
 80064d6:	6031      	str	r1, [r6, #0]
 80064d8:	0606      	lsls	r6, r0, #24
 80064da:	d501      	bpl.n	80064e0 <_printf_i+0xbc>
 80064dc:	681d      	ldr	r5, [r3, #0]
 80064de:	e003      	b.n	80064e8 <_printf_i+0xc4>
 80064e0:	0645      	lsls	r5, r0, #25
 80064e2:	d5fb      	bpl.n	80064dc <_printf_i+0xb8>
 80064e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	da03      	bge.n	80064f4 <_printf_i+0xd0>
 80064ec:	232d      	movs	r3, #45	@ 0x2d
 80064ee:	426d      	negs	r5, r5
 80064f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064f4:	4859      	ldr	r0, [pc, #356]	@ (800665c <_printf_i+0x238>)
 80064f6:	230a      	movs	r3, #10
 80064f8:	e011      	b.n	800651e <_printf_i+0xfa>
 80064fa:	6821      	ldr	r1, [r4, #0]
 80064fc:	6833      	ldr	r3, [r6, #0]
 80064fe:	0608      	lsls	r0, r1, #24
 8006500:	f853 5b04 	ldr.w	r5, [r3], #4
 8006504:	d402      	bmi.n	800650c <_printf_i+0xe8>
 8006506:	0649      	lsls	r1, r1, #25
 8006508:	bf48      	it	mi
 800650a:	b2ad      	uxthmi	r5, r5
 800650c:	2f6f      	cmp	r7, #111	@ 0x6f
 800650e:	4853      	ldr	r0, [pc, #332]	@ (800665c <_printf_i+0x238>)
 8006510:	6033      	str	r3, [r6, #0]
 8006512:	bf14      	ite	ne
 8006514:	230a      	movne	r3, #10
 8006516:	2308      	moveq	r3, #8
 8006518:	2100      	movs	r1, #0
 800651a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800651e:	6866      	ldr	r6, [r4, #4]
 8006520:	60a6      	str	r6, [r4, #8]
 8006522:	2e00      	cmp	r6, #0
 8006524:	bfa2      	ittt	ge
 8006526:	6821      	ldrge	r1, [r4, #0]
 8006528:	f021 0104 	bicge.w	r1, r1, #4
 800652c:	6021      	strge	r1, [r4, #0]
 800652e:	b90d      	cbnz	r5, 8006534 <_printf_i+0x110>
 8006530:	2e00      	cmp	r6, #0
 8006532:	d04b      	beq.n	80065cc <_printf_i+0x1a8>
 8006534:	4616      	mov	r6, r2
 8006536:	fbb5 f1f3 	udiv	r1, r5, r3
 800653a:	fb03 5711 	mls	r7, r3, r1, r5
 800653e:	5dc7      	ldrb	r7, [r0, r7]
 8006540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006544:	462f      	mov	r7, r5
 8006546:	42bb      	cmp	r3, r7
 8006548:	460d      	mov	r5, r1
 800654a:	d9f4      	bls.n	8006536 <_printf_i+0x112>
 800654c:	2b08      	cmp	r3, #8
 800654e:	d10b      	bne.n	8006568 <_printf_i+0x144>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	07df      	lsls	r7, r3, #31
 8006554:	d508      	bpl.n	8006568 <_printf_i+0x144>
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	6861      	ldr	r1, [r4, #4]
 800655a:	4299      	cmp	r1, r3
 800655c:	bfde      	ittt	le
 800655e:	2330      	movle	r3, #48	@ 0x30
 8006560:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006564:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006568:	1b92      	subs	r2, r2, r6
 800656a:	6122      	str	r2, [r4, #16]
 800656c:	f8cd a000 	str.w	sl, [sp]
 8006570:	464b      	mov	r3, r9
 8006572:	aa03      	add	r2, sp, #12
 8006574:	4621      	mov	r1, r4
 8006576:	4640      	mov	r0, r8
 8006578:	f7ff fee6 	bl	8006348 <_printf_common>
 800657c:	3001      	adds	r0, #1
 800657e:	d14a      	bne.n	8006616 <_printf_i+0x1f2>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	b004      	add	sp, #16
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f043 0320 	orr.w	r3, r3, #32
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	4833      	ldr	r0, [pc, #204]	@ (8006660 <_printf_i+0x23c>)
 8006594:	2778      	movs	r7, #120	@ 0x78
 8006596:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	6831      	ldr	r1, [r6, #0]
 800659e:	061f      	lsls	r7, r3, #24
 80065a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80065a4:	d402      	bmi.n	80065ac <_printf_i+0x188>
 80065a6:	065f      	lsls	r7, r3, #25
 80065a8:	bf48      	it	mi
 80065aa:	b2ad      	uxthmi	r5, r5
 80065ac:	6031      	str	r1, [r6, #0]
 80065ae:	07d9      	lsls	r1, r3, #31
 80065b0:	bf44      	itt	mi
 80065b2:	f043 0320 	orrmi.w	r3, r3, #32
 80065b6:	6023      	strmi	r3, [r4, #0]
 80065b8:	b11d      	cbz	r5, 80065c2 <_printf_i+0x19e>
 80065ba:	2310      	movs	r3, #16
 80065bc:	e7ac      	b.n	8006518 <_printf_i+0xf4>
 80065be:	4827      	ldr	r0, [pc, #156]	@ (800665c <_printf_i+0x238>)
 80065c0:	e7e9      	b.n	8006596 <_printf_i+0x172>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f023 0320 	bic.w	r3, r3, #32
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	e7f6      	b.n	80065ba <_printf_i+0x196>
 80065cc:	4616      	mov	r6, r2
 80065ce:	e7bd      	b.n	800654c <_printf_i+0x128>
 80065d0:	6833      	ldr	r3, [r6, #0]
 80065d2:	6825      	ldr	r5, [r4, #0]
 80065d4:	6961      	ldr	r1, [r4, #20]
 80065d6:	1d18      	adds	r0, r3, #4
 80065d8:	6030      	str	r0, [r6, #0]
 80065da:	062e      	lsls	r6, r5, #24
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	d501      	bpl.n	80065e4 <_printf_i+0x1c0>
 80065e0:	6019      	str	r1, [r3, #0]
 80065e2:	e002      	b.n	80065ea <_printf_i+0x1c6>
 80065e4:	0668      	lsls	r0, r5, #25
 80065e6:	d5fb      	bpl.n	80065e0 <_printf_i+0x1bc>
 80065e8:	8019      	strh	r1, [r3, #0]
 80065ea:	2300      	movs	r3, #0
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	4616      	mov	r6, r2
 80065f0:	e7bc      	b.n	800656c <_printf_i+0x148>
 80065f2:	6833      	ldr	r3, [r6, #0]
 80065f4:	1d1a      	adds	r2, r3, #4
 80065f6:	6032      	str	r2, [r6, #0]
 80065f8:	681e      	ldr	r6, [r3, #0]
 80065fa:	6862      	ldr	r2, [r4, #4]
 80065fc:	2100      	movs	r1, #0
 80065fe:	4630      	mov	r0, r6
 8006600:	f7f9 fdee 	bl	80001e0 <memchr>
 8006604:	b108      	cbz	r0, 800660a <_printf_i+0x1e6>
 8006606:	1b80      	subs	r0, r0, r6
 8006608:	6060      	str	r0, [r4, #4]
 800660a:	6863      	ldr	r3, [r4, #4]
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	2300      	movs	r3, #0
 8006610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006614:	e7aa      	b.n	800656c <_printf_i+0x148>
 8006616:	6923      	ldr	r3, [r4, #16]
 8006618:	4632      	mov	r2, r6
 800661a:	4649      	mov	r1, r9
 800661c:	4640      	mov	r0, r8
 800661e:	47d0      	blx	sl
 8006620:	3001      	adds	r0, #1
 8006622:	d0ad      	beq.n	8006580 <_printf_i+0x15c>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	079b      	lsls	r3, r3, #30
 8006628:	d413      	bmi.n	8006652 <_printf_i+0x22e>
 800662a:	68e0      	ldr	r0, [r4, #12]
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	4298      	cmp	r0, r3
 8006630:	bfb8      	it	lt
 8006632:	4618      	movlt	r0, r3
 8006634:	e7a6      	b.n	8006584 <_printf_i+0x160>
 8006636:	2301      	movs	r3, #1
 8006638:	4632      	mov	r2, r6
 800663a:	4649      	mov	r1, r9
 800663c:	4640      	mov	r0, r8
 800663e:	47d0      	blx	sl
 8006640:	3001      	adds	r0, #1
 8006642:	d09d      	beq.n	8006580 <_printf_i+0x15c>
 8006644:	3501      	adds	r5, #1
 8006646:	68e3      	ldr	r3, [r4, #12]
 8006648:	9903      	ldr	r1, [sp, #12]
 800664a:	1a5b      	subs	r3, r3, r1
 800664c:	42ab      	cmp	r3, r5
 800664e:	dcf2      	bgt.n	8006636 <_printf_i+0x212>
 8006650:	e7eb      	b.n	800662a <_printf_i+0x206>
 8006652:	2500      	movs	r5, #0
 8006654:	f104 0619 	add.w	r6, r4, #25
 8006658:	e7f5      	b.n	8006646 <_printf_i+0x222>
 800665a:	bf00      	nop
 800665c:	080092ca 	.word	0x080092ca
 8006660:	080092db 	.word	0x080092db

08006664 <std>:
 8006664:	2300      	movs	r3, #0
 8006666:	b510      	push	{r4, lr}
 8006668:	4604      	mov	r4, r0
 800666a:	e9c0 3300 	strd	r3, r3, [r0]
 800666e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006672:	6083      	str	r3, [r0, #8]
 8006674:	8181      	strh	r1, [r0, #12]
 8006676:	6643      	str	r3, [r0, #100]	@ 0x64
 8006678:	81c2      	strh	r2, [r0, #14]
 800667a:	6183      	str	r3, [r0, #24]
 800667c:	4619      	mov	r1, r3
 800667e:	2208      	movs	r2, #8
 8006680:	305c      	adds	r0, #92	@ 0x5c
 8006682:	f000 f92e 	bl	80068e2 <memset>
 8006686:	4b0d      	ldr	r3, [pc, #52]	@ (80066bc <std+0x58>)
 8006688:	6263      	str	r3, [r4, #36]	@ 0x24
 800668a:	4b0d      	ldr	r3, [pc, #52]	@ (80066c0 <std+0x5c>)
 800668c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <std+0x60>)
 8006690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006692:	4b0d      	ldr	r3, [pc, #52]	@ (80066c8 <std+0x64>)
 8006694:	6323      	str	r3, [r4, #48]	@ 0x30
 8006696:	4b0d      	ldr	r3, [pc, #52]	@ (80066cc <std+0x68>)
 8006698:	6224      	str	r4, [r4, #32]
 800669a:	429c      	cmp	r4, r3
 800669c:	d006      	beq.n	80066ac <std+0x48>
 800669e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066a2:	4294      	cmp	r4, r2
 80066a4:	d002      	beq.n	80066ac <std+0x48>
 80066a6:	33d0      	adds	r3, #208	@ 0xd0
 80066a8:	429c      	cmp	r4, r3
 80066aa:	d105      	bne.n	80066b8 <std+0x54>
 80066ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b4:	f000 b992 	b.w	80069dc <__retarget_lock_init_recursive>
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	08006829 	.word	0x08006829
 80066c0:	0800684b 	.word	0x0800684b
 80066c4:	08006883 	.word	0x08006883
 80066c8:	080068a7 	.word	0x080068a7
 80066cc:	20000854 	.word	0x20000854

080066d0 <stdio_exit_handler>:
 80066d0:	4a02      	ldr	r2, [pc, #8]	@ (80066dc <stdio_exit_handler+0xc>)
 80066d2:	4903      	ldr	r1, [pc, #12]	@ (80066e0 <stdio_exit_handler+0x10>)
 80066d4:	4803      	ldr	r0, [pc, #12]	@ (80066e4 <stdio_exit_handler+0x14>)
 80066d6:	f000 b869 	b.w	80067ac <_fwalk_sglue>
 80066da:	bf00      	nop
 80066dc:	20000014 	.word	0x20000014
 80066e0:	08008355 	.word	0x08008355
 80066e4:	20000024 	.word	0x20000024

080066e8 <cleanup_stdio>:
 80066e8:	6841      	ldr	r1, [r0, #4]
 80066ea:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <cleanup_stdio+0x34>)
 80066ec:	4299      	cmp	r1, r3
 80066ee:	b510      	push	{r4, lr}
 80066f0:	4604      	mov	r4, r0
 80066f2:	d001      	beq.n	80066f8 <cleanup_stdio+0x10>
 80066f4:	f001 fe2e 	bl	8008354 <_fflush_r>
 80066f8:	68a1      	ldr	r1, [r4, #8]
 80066fa:	4b09      	ldr	r3, [pc, #36]	@ (8006720 <cleanup_stdio+0x38>)
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d002      	beq.n	8006706 <cleanup_stdio+0x1e>
 8006700:	4620      	mov	r0, r4
 8006702:	f001 fe27 	bl	8008354 <_fflush_r>
 8006706:	68e1      	ldr	r1, [r4, #12]
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <cleanup_stdio+0x3c>)
 800670a:	4299      	cmp	r1, r3
 800670c:	d004      	beq.n	8006718 <cleanup_stdio+0x30>
 800670e:	4620      	mov	r0, r4
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f001 be1e 	b.w	8008354 <_fflush_r>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	bf00      	nop
 800671c:	20000854 	.word	0x20000854
 8006720:	200008bc 	.word	0x200008bc
 8006724:	20000924 	.word	0x20000924

08006728 <global_stdio_init.part.0>:
 8006728:	b510      	push	{r4, lr}
 800672a:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <global_stdio_init.part.0+0x30>)
 800672c:	4c0b      	ldr	r4, [pc, #44]	@ (800675c <global_stdio_init.part.0+0x34>)
 800672e:	4a0c      	ldr	r2, [pc, #48]	@ (8006760 <global_stdio_init.part.0+0x38>)
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	4620      	mov	r0, r4
 8006734:	2200      	movs	r2, #0
 8006736:	2104      	movs	r1, #4
 8006738:	f7ff ff94 	bl	8006664 <std>
 800673c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006740:	2201      	movs	r2, #1
 8006742:	2109      	movs	r1, #9
 8006744:	f7ff ff8e 	bl	8006664 <std>
 8006748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800674c:	2202      	movs	r2, #2
 800674e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006752:	2112      	movs	r1, #18
 8006754:	f7ff bf86 	b.w	8006664 <std>
 8006758:	2000098c 	.word	0x2000098c
 800675c:	20000854 	.word	0x20000854
 8006760:	080066d1 	.word	0x080066d1

08006764 <__sfp_lock_acquire>:
 8006764:	4801      	ldr	r0, [pc, #4]	@ (800676c <__sfp_lock_acquire+0x8>)
 8006766:	f000 b93a 	b.w	80069de <__retarget_lock_acquire_recursive>
 800676a:	bf00      	nop
 800676c:	20000995 	.word	0x20000995

08006770 <__sfp_lock_release>:
 8006770:	4801      	ldr	r0, [pc, #4]	@ (8006778 <__sfp_lock_release+0x8>)
 8006772:	f000 b935 	b.w	80069e0 <__retarget_lock_release_recursive>
 8006776:	bf00      	nop
 8006778:	20000995 	.word	0x20000995

0800677c <__sinit>:
 800677c:	b510      	push	{r4, lr}
 800677e:	4604      	mov	r4, r0
 8006780:	f7ff fff0 	bl	8006764 <__sfp_lock_acquire>
 8006784:	6a23      	ldr	r3, [r4, #32]
 8006786:	b11b      	cbz	r3, 8006790 <__sinit+0x14>
 8006788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800678c:	f7ff bff0 	b.w	8006770 <__sfp_lock_release>
 8006790:	4b04      	ldr	r3, [pc, #16]	@ (80067a4 <__sinit+0x28>)
 8006792:	6223      	str	r3, [r4, #32]
 8006794:	4b04      	ldr	r3, [pc, #16]	@ (80067a8 <__sinit+0x2c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f5      	bne.n	8006788 <__sinit+0xc>
 800679c:	f7ff ffc4 	bl	8006728 <global_stdio_init.part.0>
 80067a0:	e7f2      	b.n	8006788 <__sinit+0xc>
 80067a2:	bf00      	nop
 80067a4:	080066e9 	.word	0x080066e9
 80067a8:	2000098c 	.word	0x2000098c

080067ac <_fwalk_sglue>:
 80067ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b0:	4607      	mov	r7, r0
 80067b2:	4688      	mov	r8, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	2600      	movs	r6, #0
 80067b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067bc:	f1b9 0901 	subs.w	r9, r9, #1
 80067c0:	d505      	bpl.n	80067ce <_fwalk_sglue+0x22>
 80067c2:	6824      	ldr	r4, [r4, #0]
 80067c4:	2c00      	cmp	r4, #0
 80067c6:	d1f7      	bne.n	80067b8 <_fwalk_sglue+0xc>
 80067c8:	4630      	mov	r0, r6
 80067ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d907      	bls.n	80067e4 <_fwalk_sglue+0x38>
 80067d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067d8:	3301      	adds	r3, #1
 80067da:	d003      	beq.n	80067e4 <_fwalk_sglue+0x38>
 80067dc:	4629      	mov	r1, r5
 80067de:	4638      	mov	r0, r7
 80067e0:	47c0      	blx	r8
 80067e2:	4306      	orrs	r6, r0
 80067e4:	3568      	adds	r5, #104	@ 0x68
 80067e6:	e7e9      	b.n	80067bc <_fwalk_sglue+0x10>

080067e8 <siprintf>:
 80067e8:	b40e      	push	{r1, r2, r3}
 80067ea:	b500      	push	{lr}
 80067ec:	b09c      	sub	sp, #112	@ 0x70
 80067ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80067f0:	9002      	str	r0, [sp, #8]
 80067f2:	9006      	str	r0, [sp, #24]
 80067f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067f8:	4809      	ldr	r0, [pc, #36]	@ (8006820 <siprintf+0x38>)
 80067fa:	9107      	str	r1, [sp, #28]
 80067fc:	9104      	str	r1, [sp, #16]
 80067fe:	4909      	ldr	r1, [pc, #36]	@ (8006824 <siprintf+0x3c>)
 8006800:	f853 2b04 	ldr.w	r2, [r3], #4
 8006804:	9105      	str	r1, [sp, #20]
 8006806:	6800      	ldr	r0, [r0, #0]
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	a902      	add	r1, sp, #8
 800680c:	f001 fc22 	bl	8008054 <_svfiprintf_r>
 8006810:	9b02      	ldr	r3, [sp, #8]
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	b01c      	add	sp, #112	@ 0x70
 8006818:	f85d eb04 	ldr.w	lr, [sp], #4
 800681c:	b003      	add	sp, #12
 800681e:	4770      	bx	lr
 8006820:	20000020 	.word	0x20000020
 8006824:	ffff0208 	.word	0xffff0208

08006828 <__sread>:
 8006828:	b510      	push	{r4, lr}
 800682a:	460c      	mov	r4, r1
 800682c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006830:	f000 f886 	bl	8006940 <_read_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	bfab      	itete	ge
 8006838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800683a:	89a3      	ldrhlt	r3, [r4, #12]
 800683c:	181b      	addge	r3, r3, r0
 800683e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006842:	bfac      	ite	ge
 8006844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006846:	81a3      	strhlt	r3, [r4, #12]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__swrite>:
 800684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684e:	461f      	mov	r7, r3
 8006850:	898b      	ldrh	r3, [r1, #12]
 8006852:	05db      	lsls	r3, r3, #23
 8006854:	4605      	mov	r5, r0
 8006856:	460c      	mov	r4, r1
 8006858:	4616      	mov	r6, r2
 800685a:	d505      	bpl.n	8006868 <__swrite+0x1e>
 800685c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006860:	2302      	movs	r3, #2
 8006862:	2200      	movs	r2, #0
 8006864:	f000 f85a 	bl	800691c <_lseek_r>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	4632      	mov	r2, r6
 8006876:	463b      	mov	r3, r7
 8006878:	4628      	mov	r0, r5
 800687a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	f000 b871 	b.w	8006964 <_write_r>

08006882 <__sseek>:
 8006882:	b510      	push	{r4, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688a:	f000 f847 	bl	800691c <_lseek_r>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	bf15      	itete	ne
 8006894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800689a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800689e:	81a3      	strheq	r3, [r4, #12]
 80068a0:	bf18      	it	ne
 80068a2:	81a3      	strhne	r3, [r4, #12]
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <__sclose>:
 80068a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068aa:	f000 b827 	b.w	80068fc <_close_r>

080068ae <memmove>:
 80068ae:	4288      	cmp	r0, r1
 80068b0:	b510      	push	{r4, lr}
 80068b2:	eb01 0402 	add.w	r4, r1, r2
 80068b6:	d902      	bls.n	80068be <memmove+0x10>
 80068b8:	4284      	cmp	r4, r0
 80068ba:	4623      	mov	r3, r4
 80068bc:	d807      	bhi.n	80068ce <memmove+0x20>
 80068be:	1e43      	subs	r3, r0, #1
 80068c0:	42a1      	cmp	r1, r4
 80068c2:	d008      	beq.n	80068d6 <memmove+0x28>
 80068c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068cc:	e7f8      	b.n	80068c0 <memmove+0x12>
 80068ce:	4402      	add	r2, r0
 80068d0:	4601      	mov	r1, r0
 80068d2:	428a      	cmp	r2, r1
 80068d4:	d100      	bne.n	80068d8 <memmove+0x2a>
 80068d6:	bd10      	pop	{r4, pc}
 80068d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068e0:	e7f7      	b.n	80068d2 <memmove+0x24>

080068e2 <memset>:
 80068e2:	4402      	add	r2, r0
 80068e4:	4603      	mov	r3, r0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d100      	bne.n	80068ec <memset+0xa>
 80068ea:	4770      	bx	lr
 80068ec:	f803 1b01 	strb.w	r1, [r3], #1
 80068f0:	e7f9      	b.n	80068e6 <memset+0x4>
	...

080068f4 <_localeconv_r>:
 80068f4:	4800      	ldr	r0, [pc, #0]	@ (80068f8 <_localeconv_r+0x4>)
 80068f6:	4770      	bx	lr
 80068f8:	20000160 	.word	0x20000160

080068fc <_close_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d06      	ldr	r5, [pc, #24]	@ (8006918 <_close_r+0x1c>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	f7fb fb84 	bl	8002014 <_close>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_close_r+0x1a>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_close_r+0x1a>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	20000990 	.word	0x20000990

0800691c <_lseek_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d07      	ldr	r5, [pc, #28]	@ (800693c <_lseek_r+0x20>)
 8006920:	4604      	mov	r4, r0
 8006922:	4608      	mov	r0, r1
 8006924:	4611      	mov	r1, r2
 8006926:	2200      	movs	r2, #0
 8006928:	602a      	str	r2, [r5, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	f7fb fb99 	bl	8002062 <_lseek>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_lseek_r+0x1e>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_lseek_r+0x1e>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	20000990 	.word	0x20000990

08006940 <_read_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d07      	ldr	r5, [pc, #28]	@ (8006960 <_read_r+0x20>)
 8006944:	4604      	mov	r4, r0
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	2200      	movs	r2, #0
 800694c:	602a      	str	r2, [r5, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f7fb fb27 	bl	8001fa2 <_read>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_read_r+0x1e>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_read_r+0x1e>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20000990 	.word	0x20000990

08006964 <_write_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d07      	ldr	r5, [pc, #28]	@ (8006984 <_write_r+0x20>)
 8006968:	4604      	mov	r4, r0
 800696a:	4608      	mov	r0, r1
 800696c:	4611      	mov	r1, r2
 800696e:	2200      	movs	r2, #0
 8006970:	602a      	str	r2, [r5, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	f7fb fb32 	bl	8001fdc <_write>
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	d102      	bne.n	8006982 <_write_r+0x1e>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	b103      	cbz	r3, 8006982 <_write_r+0x1e>
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	20000990 	.word	0x20000990

08006988 <__errno>:
 8006988:	4b01      	ldr	r3, [pc, #4]	@ (8006990 <__errno+0x8>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000020 	.word	0x20000020

08006994 <__libc_init_array>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4d0d      	ldr	r5, [pc, #52]	@ (80069cc <__libc_init_array+0x38>)
 8006998:	4c0d      	ldr	r4, [pc, #52]	@ (80069d0 <__libc_init_array+0x3c>)
 800699a:	1b64      	subs	r4, r4, r5
 800699c:	10a4      	asrs	r4, r4, #2
 800699e:	2600      	movs	r6, #0
 80069a0:	42a6      	cmp	r6, r4
 80069a2:	d109      	bne.n	80069b8 <__libc_init_array+0x24>
 80069a4:	4d0b      	ldr	r5, [pc, #44]	@ (80069d4 <__libc_init_array+0x40>)
 80069a6:	4c0c      	ldr	r4, [pc, #48]	@ (80069d8 <__libc_init_array+0x44>)
 80069a8:	f002 f84a 	bl	8008a40 <_init>
 80069ac:	1b64      	subs	r4, r4, r5
 80069ae:	10a4      	asrs	r4, r4, #2
 80069b0:	2600      	movs	r6, #0
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	d105      	bne.n	80069c2 <__libc_init_array+0x2e>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069bc:	4798      	blx	r3
 80069be:	3601      	adds	r6, #1
 80069c0:	e7ee      	b.n	80069a0 <__libc_init_array+0xc>
 80069c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c6:	4798      	blx	r3
 80069c8:	3601      	adds	r6, #1
 80069ca:	e7f2      	b.n	80069b2 <__libc_init_array+0x1e>
 80069cc:	08009630 	.word	0x08009630
 80069d0:	08009630 	.word	0x08009630
 80069d4:	08009630 	.word	0x08009630
 80069d8:	08009634 	.word	0x08009634

080069dc <__retarget_lock_init_recursive>:
 80069dc:	4770      	bx	lr

080069de <__retarget_lock_acquire_recursive>:
 80069de:	4770      	bx	lr

080069e0 <__retarget_lock_release_recursive>:
 80069e0:	4770      	bx	lr

080069e2 <memcpy>:
 80069e2:	440a      	add	r2, r1
 80069e4:	4291      	cmp	r1, r2
 80069e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80069ea:	d100      	bne.n	80069ee <memcpy+0xc>
 80069ec:	4770      	bx	lr
 80069ee:	b510      	push	{r4, lr}
 80069f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f8:	4291      	cmp	r1, r2
 80069fa:	d1f9      	bne.n	80069f0 <memcpy+0xe>
 80069fc:	bd10      	pop	{r4, pc}

080069fe <quorem>:
 80069fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a02:	6903      	ldr	r3, [r0, #16]
 8006a04:	690c      	ldr	r4, [r1, #16]
 8006a06:	42a3      	cmp	r3, r4
 8006a08:	4607      	mov	r7, r0
 8006a0a:	db7e      	blt.n	8006b0a <quorem+0x10c>
 8006a0c:	3c01      	subs	r4, #1
 8006a0e:	f101 0814 	add.w	r8, r1, #20
 8006a12:	00a3      	lsls	r3, r4, #2
 8006a14:	f100 0514 	add.w	r5, r0, #20
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a30:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a34:	d32e      	bcc.n	8006a94 <quorem+0x96>
 8006a36:	f04f 0a00 	mov.w	sl, #0
 8006a3a:	46c4      	mov	ip, r8
 8006a3c:	46ae      	mov	lr, r5
 8006a3e:	46d3      	mov	fp, sl
 8006a40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a44:	b298      	uxth	r0, r3
 8006a46:	fb06 a000 	mla	r0, r6, r0, sl
 8006a4a:	0c02      	lsrs	r2, r0, #16
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	fb06 2303 	mla	r3, r6, r3, r2
 8006a52:	f8de 2000 	ldr.w	r2, [lr]
 8006a56:	b280      	uxth	r0, r0
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	1a12      	subs	r2, r2, r0
 8006a5c:	445a      	add	r2, fp
 8006a5e:	f8de 0000 	ldr.w	r0, [lr]
 8006a62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a70:	b292      	uxth	r2, r2
 8006a72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a76:	45e1      	cmp	r9, ip
 8006a78:	f84e 2b04 	str.w	r2, [lr], #4
 8006a7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a80:	d2de      	bcs.n	8006a40 <quorem+0x42>
 8006a82:	9b00      	ldr	r3, [sp, #0]
 8006a84:	58eb      	ldr	r3, [r5, r3]
 8006a86:	b92b      	cbnz	r3, 8006a94 <quorem+0x96>
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	3b04      	subs	r3, #4
 8006a8c:	429d      	cmp	r5, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	d32f      	bcc.n	8006af2 <quorem+0xf4>
 8006a92:	613c      	str	r4, [r7, #16]
 8006a94:	4638      	mov	r0, r7
 8006a96:	f001 f979 	bl	8007d8c <__mcmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	db25      	blt.n	8006aea <quorem+0xec>
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	f858 2b04 	ldr.w	r2, [r8], #4
 8006aa6:	f8d1 c000 	ldr.w	ip, [r1]
 8006aaa:	fa1f fe82 	uxth.w	lr, r2
 8006aae:	fa1f f38c 	uxth.w	r3, ip
 8006ab2:	eba3 030e 	sub.w	r3, r3, lr
 8006ab6:	4403      	add	r3, r0
 8006ab8:	0c12      	lsrs	r2, r2, #16
 8006aba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006abe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ac8:	45c1      	cmp	r9, r8
 8006aca:	f841 3b04 	str.w	r3, [r1], #4
 8006ace:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ad2:	d2e6      	bcs.n	8006aa2 <quorem+0xa4>
 8006ad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006adc:	b922      	cbnz	r2, 8006ae8 <quorem+0xea>
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	429d      	cmp	r5, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	d30b      	bcc.n	8006afe <quorem+0x100>
 8006ae6:	613c      	str	r4, [r7, #16]
 8006ae8:	3601      	adds	r6, #1
 8006aea:	4630      	mov	r0, r6
 8006aec:	b003      	add	sp, #12
 8006aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	3b04      	subs	r3, #4
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	d1cb      	bne.n	8006a92 <quorem+0x94>
 8006afa:	3c01      	subs	r4, #1
 8006afc:	e7c6      	b.n	8006a8c <quorem+0x8e>
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	3b04      	subs	r3, #4
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d1ef      	bne.n	8006ae6 <quorem+0xe8>
 8006b06:	3c01      	subs	r4, #1
 8006b08:	e7ea      	b.n	8006ae0 <quorem+0xe2>
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e7ee      	b.n	8006aec <quorem+0xee>
	...

08006b10 <_dtoa_r>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	69c7      	ldr	r7, [r0, #28]
 8006b16:	b099      	sub	sp, #100	@ 0x64
 8006b18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b1c:	ec55 4b10 	vmov	r4, r5, d0
 8006b20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006b22:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b24:	4683      	mov	fp, r0
 8006b26:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b2a:	b97f      	cbnz	r7, 8006b4c <_dtoa_r+0x3c>
 8006b2c:	2010      	movs	r0, #16
 8006b2e:	f000 fdfd 	bl	800772c <malloc>
 8006b32:	4602      	mov	r2, r0
 8006b34:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b38:	b920      	cbnz	r0, 8006b44 <_dtoa_r+0x34>
 8006b3a:	4ba7      	ldr	r3, [pc, #668]	@ (8006dd8 <_dtoa_r+0x2c8>)
 8006b3c:	21ef      	movs	r1, #239	@ 0xef
 8006b3e:	48a7      	ldr	r0, [pc, #668]	@ (8006ddc <_dtoa_r+0x2cc>)
 8006b40:	f001 fc40 	bl	80083c4 <__assert_func>
 8006b44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b48:	6007      	str	r7, [r0, #0]
 8006b4a:	60c7      	str	r7, [r0, #12]
 8006b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	b159      	cbz	r1, 8006b6c <_dtoa_r+0x5c>
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	604a      	str	r2, [r1, #4]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4093      	lsls	r3, r2
 8006b5c:	608b      	str	r3, [r1, #8]
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f000 feda 	bl	8007918 <_Bfree>
 8006b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	1e2b      	subs	r3, r5, #0
 8006b6e:	bfb9      	ittee	lt
 8006b70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b74:	9303      	strlt	r3, [sp, #12]
 8006b76:	2300      	movge	r3, #0
 8006b78:	6033      	strge	r3, [r6, #0]
 8006b7a:	9f03      	ldr	r7, [sp, #12]
 8006b7c:	4b98      	ldr	r3, [pc, #608]	@ (8006de0 <_dtoa_r+0x2d0>)
 8006b7e:	bfbc      	itt	lt
 8006b80:	2201      	movlt	r2, #1
 8006b82:	6032      	strlt	r2, [r6, #0]
 8006b84:	43bb      	bics	r3, r7
 8006b86:	d112      	bne.n	8006bae <_dtoa_r+0x9e>
 8006b88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b94:	4323      	orrs	r3, r4
 8006b96:	f000 854d 	beq.w	8007634 <_dtoa_r+0xb24>
 8006b9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006df4 <_dtoa_r+0x2e4>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 854f 	beq.w	8007644 <_dtoa_r+0xb34>
 8006ba6:	f10a 0303 	add.w	r3, sl, #3
 8006baa:	f000 bd49 	b.w	8007640 <_dtoa_r+0xb30>
 8006bae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	ec51 0b17 	vmov	r0, r1, d7
 8006bb8:	2300      	movs	r3, #0
 8006bba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006bbe:	f7f9 ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bc2:	4680      	mov	r8, r0
 8006bc4:	b158      	cbz	r0, 8006bde <_dtoa_r+0xce>
 8006bc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006bc8:	2301      	movs	r3, #1
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bce:	b113      	cbz	r3, 8006bd6 <_dtoa_r+0xc6>
 8006bd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006bd2:	4b84      	ldr	r3, [pc, #528]	@ (8006de4 <_dtoa_r+0x2d4>)
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006df8 <_dtoa_r+0x2e8>
 8006bda:	f000 bd33 	b.w	8007644 <_dtoa_r+0xb34>
 8006bde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006be2:	aa16      	add	r2, sp, #88	@ 0x58
 8006be4:	a917      	add	r1, sp, #92	@ 0x5c
 8006be6:	4658      	mov	r0, fp
 8006be8:	f001 f980 	bl	8007eec <__d2b>
 8006bec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	2e00      	cmp	r6, #0
 8006bf4:	d077      	beq.n	8006ce6 <_dtoa_r+0x1d6>
 8006bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c10:	4619      	mov	r1, r3
 8006c12:	2200      	movs	r2, #0
 8006c14:	4b74      	ldr	r3, [pc, #464]	@ (8006de8 <_dtoa_r+0x2d8>)
 8006c16:	f7f9 fb3f 	bl	8000298 <__aeabi_dsub>
 8006c1a:	a369      	add	r3, pc, #420	@ (adr r3, 8006dc0 <_dtoa_r+0x2b0>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fcf2 	bl	8000608 <__aeabi_dmul>
 8006c24:	a368      	add	r3, pc, #416	@ (adr r3, 8006dc8 <_dtoa_r+0x2b8>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f7f9 fb37 	bl	800029c <__adddf3>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4630      	mov	r0, r6
 8006c32:	460d      	mov	r5, r1
 8006c34:	f7f9 fc7e 	bl	8000534 <__aeabi_i2d>
 8006c38:	a365      	add	r3, pc, #404	@ (adr r3, 8006dd0 <_dtoa_r+0x2c0>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fce3 	bl	8000608 <__aeabi_dmul>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fb27 	bl	800029c <__adddf3>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460d      	mov	r5, r1
 8006c52:	f7f9 ff89 	bl	8000b68 <__aeabi_d2iz>
 8006c56:	2200      	movs	r2, #0
 8006c58:	4607      	mov	r7, r0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 ff44 	bl	8000aec <__aeabi_dcmplt>
 8006c64:	b140      	cbz	r0, 8006c78 <_dtoa_r+0x168>
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7f9 fc64 	bl	8000534 <__aeabi_i2d>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	462b      	mov	r3, r5
 8006c70:	f7f9 ff32 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c74:	b900      	cbnz	r0, 8006c78 <_dtoa_r+0x168>
 8006c76:	3f01      	subs	r7, #1
 8006c78:	2f16      	cmp	r7, #22
 8006c7a:	d851      	bhi.n	8006d20 <_dtoa_r+0x210>
 8006c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006dec <_dtoa_r+0x2dc>)
 8006c7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c8a:	f7f9 ff2f 	bl	8000aec <__aeabi_dcmplt>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d048      	beq.n	8006d24 <_dtoa_r+0x214>
 8006c92:	3f01      	subs	r7, #1
 8006c94:	2300      	movs	r3, #0
 8006c96:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c9a:	1b9b      	subs	r3, r3, r6
 8006c9c:	1e5a      	subs	r2, r3, #1
 8006c9e:	bf44      	itt	mi
 8006ca0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ca4:	2300      	movmi	r3, #0
 8006ca6:	9208      	str	r2, [sp, #32]
 8006ca8:	bf54      	ite	pl
 8006caa:	f04f 0800 	movpl.w	r8, #0
 8006cae:	9308      	strmi	r3, [sp, #32]
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	db39      	blt.n	8006d28 <_dtoa_r+0x218>
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006cb8:	443b      	add	r3, r7
 8006cba:	9308      	str	r3, [sp, #32]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d864      	bhi.n	8006d90 <_dtoa_r+0x280>
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	bfc4      	itt	gt
 8006cca:	3b04      	subgt	r3, #4
 8006ccc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd0:	f1a3 0302 	sub.w	r3, r3, #2
 8006cd4:	bfcc      	ite	gt
 8006cd6:	2400      	movgt	r4, #0
 8006cd8:	2401      	movle	r4, #1
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d863      	bhi.n	8006da6 <_dtoa_r+0x296>
 8006cde:	e8df f003 	tbb	[pc, r3]
 8006ce2:	372a      	.short	0x372a
 8006ce4:	5535      	.short	0x5535
 8006ce6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006cea:	441e      	add	r6, r3
 8006cec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	bfc1      	itttt	gt
 8006cf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cf8:	409f      	lslgt	r7, r3
 8006cfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006cfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d02:	bfd6      	itet	le
 8006d04:	f1c3 0320 	rsble	r3, r3, #32
 8006d08:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d0c:	fa04 f003 	lslle.w	r0, r4, r3
 8006d10:	f7f9 fc00 	bl	8000514 <__aeabi_ui2d>
 8006d14:	2201      	movs	r2, #1
 8006d16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d1a:	3e01      	subs	r6, #1
 8006d1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006d1e:	e777      	b.n	8006c10 <_dtoa_r+0x100>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7b8      	b.n	8006c96 <_dtoa_r+0x186>
 8006d24:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d26:	e7b7      	b.n	8006c98 <_dtoa_r+0x188>
 8006d28:	427b      	negs	r3, r7
 8006d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	eba8 0807 	sub.w	r8, r8, r7
 8006d32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d34:	e7c4      	b.n	8006cc0 <_dtoa_r+0x1b0>
 8006d36:	2300      	movs	r3, #0
 8006d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dc35      	bgt.n	8006dac <_dtoa_r+0x29c>
 8006d40:	2301      	movs	r3, #1
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	9307      	str	r3, [sp, #28]
 8006d46:	461a      	mov	r2, r3
 8006d48:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d4a:	e00b      	b.n	8006d64 <_dtoa_r+0x254>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e7f3      	b.n	8006d38 <_dtoa_r+0x228>
 8006d50:	2300      	movs	r3, #0
 8006d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	bfb8      	it	lt
 8006d62:	2301      	movlt	r3, #1
 8006d64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	f102 0514 	add.w	r5, r2, #20
 8006d70:	429d      	cmp	r5, r3
 8006d72:	d91f      	bls.n	8006db4 <_dtoa_r+0x2a4>
 8006d74:	6041      	str	r1, [r0, #4]
 8006d76:	4658      	mov	r0, fp
 8006d78:	f000 fd8e 	bl	8007898 <_Balloc>
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d13c      	bne.n	8006dfc <_dtoa_r+0x2ec>
 8006d82:	4b1b      	ldr	r3, [pc, #108]	@ (8006df0 <_dtoa_r+0x2e0>)
 8006d84:	4602      	mov	r2, r0
 8006d86:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d8a:	e6d8      	b.n	8006b3e <_dtoa_r+0x2e>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e7e0      	b.n	8006d52 <_dtoa_r+0x242>
 8006d90:	2401      	movs	r4, #1
 8006d92:	2300      	movs	r3, #0
 8006d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2312      	movs	r3, #18
 8006da4:	e7d0      	b.n	8006d48 <_dtoa_r+0x238>
 8006da6:	2301      	movs	r3, #1
 8006da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006daa:	e7f5      	b.n	8006d98 <_dtoa_r+0x288>
 8006dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	9307      	str	r3, [sp, #28]
 8006db2:	e7d7      	b.n	8006d64 <_dtoa_r+0x254>
 8006db4:	3101      	adds	r1, #1
 8006db6:	0052      	lsls	r2, r2, #1
 8006db8:	e7d8      	b.n	8006d6c <_dtoa_r+0x25c>
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w
 8006dc0:	636f4361 	.word	0x636f4361
 8006dc4:	3fd287a7 	.word	0x3fd287a7
 8006dc8:	8b60c8b3 	.word	0x8b60c8b3
 8006dcc:	3fc68a28 	.word	0x3fc68a28
 8006dd0:	509f79fb 	.word	0x509f79fb
 8006dd4:	3fd34413 	.word	0x3fd34413
 8006dd8:	080092f9 	.word	0x080092f9
 8006ddc:	08009310 	.word	0x08009310
 8006de0:	7ff00000 	.word	0x7ff00000
 8006de4:	080092c9 	.word	0x080092c9
 8006de8:	3ff80000 	.word	0x3ff80000
 8006dec:	08009408 	.word	0x08009408
 8006df0:	08009368 	.word	0x08009368
 8006df4:	080092f5 	.word	0x080092f5
 8006df8:	080092c8 	.word	0x080092c8
 8006dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e00:	6018      	str	r0, [r3, #0]
 8006e02:	9b07      	ldr	r3, [sp, #28]
 8006e04:	2b0e      	cmp	r3, #14
 8006e06:	f200 80a4 	bhi.w	8006f52 <_dtoa_r+0x442>
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	f000 80a1 	beq.w	8006f52 <_dtoa_r+0x442>
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	dd33      	ble.n	8006e7c <_dtoa_r+0x36c>
 8006e14:	4bad      	ldr	r3, [pc, #692]	@ (80070cc <_dtoa_r+0x5bc>)
 8006e16:	f007 020f 	and.w	r2, r7, #15
 8006e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e1e:	ed93 7b00 	vldr	d7, [r3]
 8006e22:	05f8      	lsls	r0, r7, #23
 8006e24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e2c:	d516      	bpl.n	8006e5c <_dtoa_r+0x34c>
 8006e2e:	4ba8      	ldr	r3, [pc, #672]	@ (80070d0 <_dtoa_r+0x5c0>)
 8006e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e38:	f7f9 fd10 	bl	800085c <__aeabi_ddiv>
 8006e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e40:	f004 040f 	and.w	r4, r4, #15
 8006e44:	2603      	movs	r6, #3
 8006e46:	4da2      	ldr	r5, [pc, #648]	@ (80070d0 <_dtoa_r+0x5c0>)
 8006e48:	b954      	cbnz	r4, 8006e60 <_dtoa_r+0x350>
 8006e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e52:	f7f9 fd03 	bl	800085c <__aeabi_ddiv>
 8006e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5a:	e028      	b.n	8006eae <_dtoa_r+0x39e>
 8006e5c:	2602      	movs	r6, #2
 8006e5e:	e7f2      	b.n	8006e46 <_dtoa_r+0x336>
 8006e60:	07e1      	lsls	r1, r4, #31
 8006e62:	d508      	bpl.n	8006e76 <_dtoa_r+0x366>
 8006e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e6c:	f7f9 fbcc 	bl	8000608 <__aeabi_dmul>
 8006e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e74:	3601      	adds	r6, #1
 8006e76:	1064      	asrs	r4, r4, #1
 8006e78:	3508      	adds	r5, #8
 8006e7a:	e7e5      	b.n	8006e48 <_dtoa_r+0x338>
 8006e7c:	f000 80d2 	beq.w	8007024 <_dtoa_r+0x514>
 8006e80:	427c      	negs	r4, r7
 8006e82:	4b92      	ldr	r3, [pc, #584]	@ (80070cc <_dtoa_r+0x5bc>)
 8006e84:	4d92      	ldr	r5, [pc, #584]	@ (80070d0 <_dtoa_r+0x5c0>)
 8006e86:	f004 020f 	and.w	r2, r4, #15
 8006e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e96:	f7f9 fbb7 	bl	8000608 <__aeabi_dmul>
 8006e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e9e:	1124      	asrs	r4, r4, #4
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2602      	movs	r6, #2
 8006ea4:	2c00      	cmp	r4, #0
 8006ea6:	f040 80b2 	bne.w	800700e <_dtoa_r+0x4fe>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1d3      	bne.n	8006e56 <_dtoa_r+0x346>
 8006eae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006eb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80b7 	beq.w	8007028 <_dtoa_r+0x518>
 8006eba:	4b86      	ldr	r3, [pc, #536]	@ (80070d4 <_dtoa_r+0x5c4>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fe13 	bl	8000aec <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f000 80ae 	beq.w	8007028 <_dtoa_r+0x518>
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80aa 	beq.w	8007028 <_dtoa_r+0x518>
 8006ed4:	9b00      	ldr	r3, [sp, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd37      	ble.n	8006f4a <_dtoa_r+0x43a>
 8006eda:	1e7b      	subs	r3, r7, #1
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80070d8 <_dtoa_r+0x5c8>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f7f9 fb8f 	bl	8000608 <__aeabi_dmul>
 8006eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eee:	9c00      	ldr	r4, [sp, #0]
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7f9 fb1e 	bl	8000534 <__aeabi_i2d>
 8006ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006efc:	f7f9 fb84 	bl	8000608 <__aeabi_dmul>
 8006f00:	4b76      	ldr	r3, [pc, #472]	@ (80070dc <_dtoa_r+0x5cc>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	f7f9 f9ca 	bl	800029c <__adddf3>
 8006f08:	4605      	mov	r5, r0
 8006f0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f0e:	2c00      	cmp	r4, #0
 8006f10:	f040 808d 	bne.w	800702e <_dtoa_r+0x51e>
 8006f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f18:	4b71      	ldr	r3, [pc, #452]	@ (80070e0 <_dtoa_r+0x5d0>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f7f9 f9bc 	bl	8000298 <__aeabi_dsub>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4633      	mov	r3, r6
 8006f2c:	f7f9 fdfc 	bl	8000b28 <__aeabi_dcmpgt>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f040 828b 	bne.w	800744c <_dtoa_r+0x93c>
 8006f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f40:	f7f9 fdd4 	bl	8000aec <__aeabi_dcmplt>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f040 8128 	bne.w	800719a <_dtoa_r+0x68a>
 8006f4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f2c0 815a 	blt.w	800720e <_dtoa_r+0x6fe>
 8006f5a:	2f0e      	cmp	r7, #14
 8006f5c:	f300 8157 	bgt.w	800720e <_dtoa_r+0x6fe>
 8006f60:	4b5a      	ldr	r3, [pc, #360]	@ (80070cc <_dtoa_r+0x5bc>)
 8006f62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f66:	ed93 7b00 	vldr	d7, [r3]
 8006f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	ed8d 7b00 	vstr	d7, [sp]
 8006f72:	da03      	bge.n	8006f7c <_dtoa_r+0x46c>
 8006f74:	9b07      	ldr	r3, [sp, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f340 8101 	ble.w	800717e <_dtoa_r+0x66e>
 8006f7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f80:	4656      	mov	r6, sl
 8006f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f86:	4620      	mov	r0, r4
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7f9 fc67 	bl	800085c <__aeabi_ddiv>
 8006f8e:	f7f9 fdeb 	bl	8000b68 <__aeabi_d2iz>
 8006f92:	4680      	mov	r8, r0
 8006f94:	f7f9 face 	bl	8000534 <__aeabi_i2d>
 8006f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f9c:	f7f9 fb34 	bl	8000608 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006fac:	f7f9 f974 	bl	8000298 <__aeabi_dsub>
 8006fb0:	f806 4b01 	strb.w	r4, [r6], #1
 8006fb4:	9d07      	ldr	r5, [sp, #28]
 8006fb6:	eba6 040a 	sub.w	r4, r6, sl
 8006fba:	42a5      	cmp	r5, r4
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	f040 8117 	bne.w	80071f2 <_dtoa_r+0x6e2>
 8006fc4:	f7f9 f96a 	bl	800029c <__adddf3>
 8006fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fcc:	4604      	mov	r4, r0
 8006fce:	460d      	mov	r5, r1
 8006fd0:	f7f9 fdaa 	bl	8000b28 <__aeabi_dcmpgt>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	f040 80f9 	bne.w	80071cc <_dtoa_r+0x6bc>
 8006fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fe6:	b118      	cbz	r0, 8006ff0 <_dtoa_r+0x4e0>
 8006fe8:	f018 0f01 	tst.w	r8, #1
 8006fec:	f040 80ee 	bne.w	80071cc <_dtoa_r+0x6bc>
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4658      	mov	r0, fp
 8006ff4:	f000 fc90 	bl	8007918 <_Bfree>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	7033      	strb	r3, [r6, #0]
 8006ffc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ffe:	3701      	adds	r7, #1
 8007000:	601f      	str	r7, [r3, #0]
 8007002:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 831d 	beq.w	8007644 <_dtoa_r+0xb34>
 800700a:	601e      	str	r6, [r3, #0]
 800700c:	e31a      	b.n	8007644 <_dtoa_r+0xb34>
 800700e:	07e2      	lsls	r2, r4, #31
 8007010:	d505      	bpl.n	800701e <_dtoa_r+0x50e>
 8007012:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007016:	f7f9 faf7 	bl	8000608 <__aeabi_dmul>
 800701a:	3601      	adds	r6, #1
 800701c:	2301      	movs	r3, #1
 800701e:	1064      	asrs	r4, r4, #1
 8007020:	3508      	adds	r5, #8
 8007022:	e73f      	b.n	8006ea4 <_dtoa_r+0x394>
 8007024:	2602      	movs	r6, #2
 8007026:	e742      	b.n	8006eae <_dtoa_r+0x39e>
 8007028:	9c07      	ldr	r4, [sp, #28]
 800702a:	9704      	str	r7, [sp, #16]
 800702c:	e761      	b.n	8006ef2 <_dtoa_r+0x3e2>
 800702e:	4b27      	ldr	r3, [pc, #156]	@ (80070cc <_dtoa_r+0x5bc>)
 8007030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007036:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800703a:	4454      	add	r4, sl
 800703c:	2900      	cmp	r1, #0
 800703e:	d053      	beq.n	80070e8 <_dtoa_r+0x5d8>
 8007040:	4928      	ldr	r1, [pc, #160]	@ (80070e4 <_dtoa_r+0x5d4>)
 8007042:	2000      	movs	r0, #0
 8007044:	f7f9 fc0a 	bl	800085c <__aeabi_ddiv>
 8007048:	4633      	mov	r3, r6
 800704a:	462a      	mov	r2, r5
 800704c:	f7f9 f924 	bl	8000298 <__aeabi_dsub>
 8007050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007054:	4656      	mov	r6, sl
 8007056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705a:	f7f9 fd85 	bl	8000b68 <__aeabi_d2iz>
 800705e:	4605      	mov	r5, r0
 8007060:	f7f9 fa68 	bl	8000534 <__aeabi_i2d>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706c:	f7f9 f914 	bl	8000298 <__aeabi_dsub>
 8007070:	3530      	adds	r5, #48	@ 0x30
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800707a:	f806 5b01 	strb.w	r5, [r6], #1
 800707e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007082:	f7f9 fd33 	bl	8000aec <__aeabi_dcmplt>
 8007086:	2800      	cmp	r0, #0
 8007088:	d171      	bne.n	800716e <_dtoa_r+0x65e>
 800708a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708e:	4911      	ldr	r1, [pc, #68]	@ (80070d4 <_dtoa_r+0x5c4>)
 8007090:	2000      	movs	r0, #0
 8007092:	f7f9 f901 	bl	8000298 <__aeabi_dsub>
 8007096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800709a:	f7f9 fd27 	bl	8000aec <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f040 8095 	bne.w	80071ce <_dtoa_r+0x6be>
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	f43f af50 	beq.w	8006f4a <_dtoa_r+0x43a>
 80070aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070ae:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <_dtoa_r+0x5c8>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	f7f9 faa9 	bl	8000608 <__aeabi_dmul>
 80070b6:	4b08      	ldr	r3, [pc, #32]	@ (80070d8 <_dtoa_r+0x5c8>)
 80070b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070bc:	2200      	movs	r2, #0
 80070be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c2:	f7f9 faa1 	bl	8000608 <__aeabi_dmul>
 80070c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ca:	e7c4      	b.n	8007056 <_dtoa_r+0x546>
 80070cc:	08009408 	.word	0x08009408
 80070d0:	080093e0 	.word	0x080093e0
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	40240000 	.word	0x40240000
 80070dc:	401c0000 	.word	0x401c0000
 80070e0:	40140000 	.word	0x40140000
 80070e4:	3fe00000 	.word	0x3fe00000
 80070e8:	4631      	mov	r1, r6
 80070ea:	4628      	mov	r0, r5
 80070ec:	f7f9 fa8c 	bl	8000608 <__aeabi_dmul>
 80070f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80070f6:	4656      	mov	r6, sl
 80070f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070fc:	f7f9 fd34 	bl	8000b68 <__aeabi_d2iz>
 8007100:	4605      	mov	r5, r0
 8007102:	f7f9 fa17 	bl	8000534 <__aeabi_i2d>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800710e:	f7f9 f8c3 	bl	8000298 <__aeabi_dsub>
 8007112:	3530      	adds	r5, #48	@ 0x30
 8007114:	f806 5b01 	strb.w	r5, [r6], #1
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	42a6      	cmp	r6, r4
 800711e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	d124      	bne.n	8007172 <_dtoa_r+0x662>
 8007128:	4bac      	ldr	r3, [pc, #688]	@ (80073dc <_dtoa_r+0x8cc>)
 800712a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800712e:	f7f9 f8b5 	bl	800029c <__adddf3>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800713a:	f7f9 fcf5 	bl	8000b28 <__aeabi_dcmpgt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d145      	bne.n	80071ce <_dtoa_r+0x6be>
 8007142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007146:	49a5      	ldr	r1, [pc, #660]	@ (80073dc <_dtoa_r+0x8cc>)
 8007148:	2000      	movs	r0, #0
 800714a:	f7f9 f8a5 	bl	8000298 <__aeabi_dsub>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007156:	f7f9 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f aef5 	beq.w	8006f4a <_dtoa_r+0x43a>
 8007160:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007162:	1e73      	subs	r3, r6, #1
 8007164:	9315      	str	r3, [sp, #84]	@ 0x54
 8007166:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800716a:	2b30      	cmp	r3, #48	@ 0x30
 800716c:	d0f8      	beq.n	8007160 <_dtoa_r+0x650>
 800716e:	9f04      	ldr	r7, [sp, #16]
 8007170:	e73e      	b.n	8006ff0 <_dtoa_r+0x4e0>
 8007172:	4b9b      	ldr	r3, [pc, #620]	@ (80073e0 <_dtoa_r+0x8d0>)
 8007174:	f7f9 fa48 	bl	8000608 <__aeabi_dmul>
 8007178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800717c:	e7bc      	b.n	80070f8 <_dtoa_r+0x5e8>
 800717e:	d10c      	bne.n	800719a <_dtoa_r+0x68a>
 8007180:	4b98      	ldr	r3, [pc, #608]	@ (80073e4 <_dtoa_r+0x8d4>)
 8007182:	2200      	movs	r2, #0
 8007184:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007188:	f7f9 fa3e 	bl	8000608 <__aeabi_dmul>
 800718c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007190:	f7f9 fcc0 	bl	8000b14 <__aeabi_dcmpge>
 8007194:	2800      	cmp	r0, #0
 8007196:	f000 8157 	beq.w	8007448 <_dtoa_r+0x938>
 800719a:	2400      	movs	r4, #0
 800719c:	4625      	mov	r5, r4
 800719e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071a0:	43db      	mvns	r3, r3
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	4656      	mov	r6, sl
 80071a6:	2700      	movs	r7, #0
 80071a8:	4621      	mov	r1, r4
 80071aa:	4658      	mov	r0, fp
 80071ac:	f000 fbb4 	bl	8007918 <_Bfree>
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	d0dc      	beq.n	800716e <_dtoa_r+0x65e>
 80071b4:	b12f      	cbz	r7, 80071c2 <_dtoa_r+0x6b2>
 80071b6:	42af      	cmp	r7, r5
 80071b8:	d003      	beq.n	80071c2 <_dtoa_r+0x6b2>
 80071ba:	4639      	mov	r1, r7
 80071bc:	4658      	mov	r0, fp
 80071be:	f000 fbab 	bl	8007918 <_Bfree>
 80071c2:	4629      	mov	r1, r5
 80071c4:	4658      	mov	r0, fp
 80071c6:	f000 fba7 	bl	8007918 <_Bfree>
 80071ca:	e7d0      	b.n	800716e <_dtoa_r+0x65e>
 80071cc:	9704      	str	r7, [sp, #16]
 80071ce:	4633      	mov	r3, r6
 80071d0:	461e      	mov	r6, r3
 80071d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071d6:	2a39      	cmp	r2, #57	@ 0x39
 80071d8:	d107      	bne.n	80071ea <_dtoa_r+0x6da>
 80071da:	459a      	cmp	sl, r3
 80071dc:	d1f8      	bne.n	80071d0 <_dtoa_r+0x6c0>
 80071de:	9a04      	ldr	r2, [sp, #16]
 80071e0:	3201      	adds	r2, #1
 80071e2:	9204      	str	r2, [sp, #16]
 80071e4:	2230      	movs	r2, #48	@ 0x30
 80071e6:	f88a 2000 	strb.w	r2, [sl]
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	3201      	adds	r2, #1
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e7bd      	b.n	800716e <_dtoa_r+0x65e>
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <_dtoa_r+0x8d0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	f7f9 fa07 	bl	8000608 <__aeabi_dmul>
 80071fa:	2200      	movs	r2, #0
 80071fc:	2300      	movs	r3, #0
 80071fe:	4604      	mov	r4, r0
 8007200:	460d      	mov	r5, r1
 8007202:	f7f9 fc69 	bl	8000ad8 <__aeabi_dcmpeq>
 8007206:	2800      	cmp	r0, #0
 8007208:	f43f aebb 	beq.w	8006f82 <_dtoa_r+0x472>
 800720c:	e6f0      	b.n	8006ff0 <_dtoa_r+0x4e0>
 800720e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007210:	2a00      	cmp	r2, #0
 8007212:	f000 80db 	beq.w	80073cc <_dtoa_r+0x8bc>
 8007216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007218:	2a01      	cmp	r2, #1
 800721a:	f300 80bf 	bgt.w	800739c <_dtoa_r+0x88c>
 800721e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007220:	2a00      	cmp	r2, #0
 8007222:	f000 80b7 	beq.w	8007394 <_dtoa_r+0x884>
 8007226:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800722a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800722c:	4646      	mov	r6, r8
 800722e:	9a08      	ldr	r2, [sp, #32]
 8007230:	2101      	movs	r1, #1
 8007232:	441a      	add	r2, r3
 8007234:	4658      	mov	r0, fp
 8007236:	4498      	add	r8, r3
 8007238:	9208      	str	r2, [sp, #32]
 800723a:	f000 fc21 	bl	8007a80 <__i2b>
 800723e:	4605      	mov	r5, r0
 8007240:	b15e      	cbz	r6, 800725a <_dtoa_r+0x74a>
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd08      	ble.n	800725a <_dtoa_r+0x74a>
 8007248:	42b3      	cmp	r3, r6
 800724a:	9a08      	ldr	r2, [sp, #32]
 800724c:	bfa8      	it	ge
 800724e:	4633      	movge	r3, r6
 8007250:	eba8 0803 	sub.w	r8, r8, r3
 8007254:	1af6      	subs	r6, r6, r3
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	9308      	str	r3, [sp, #32]
 800725a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800725c:	b1f3      	cbz	r3, 800729c <_dtoa_r+0x78c>
 800725e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80b7 	beq.w	80073d4 <_dtoa_r+0x8c4>
 8007266:	b18c      	cbz	r4, 800728c <_dtoa_r+0x77c>
 8007268:	4629      	mov	r1, r5
 800726a:	4622      	mov	r2, r4
 800726c:	4658      	mov	r0, fp
 800726e:	f000 fcc7 	bl	8007c00 <__pow5mult>
 8007272:	464a      	mov	r2, r9
 8007274:	4601      	mov	r1, r0
 8007276:	4605      	mov	r5, r0
 8007278:	4658      	mov	r0, fp
 800727a:	f000 fc17 	bl	8007aac <__multiply>
 800727e:	4649      	mov	r1, r9
 8007280:	9004      	str	r0, [sp, #16]
 8007282:	4658      	mov	r0, fp
 8007284:	f000 fb48 	bl	8007918 <_Bfree>
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	4699      	mov	r9, r3
 800728c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728e:	1b1a      	subs	r2, r3, r4
 8007290:	d004      	beq.n	800729c <_dtoa_r+0x78c>
 8007292:	4649      	mov	r1, r9
 8007294:	4658      	mov	r0, fp
 8007296:	f000 fcb3 	bl	8007c00 <__pow5mult>
 800729a:	4681      	mov	r9, r0
 800729c:	2101      	movs	r1, #1
 800729e:	4658      	mov	r0, fp
 80072a0:	f000 fbee 	bl	8007a80 <__i2b>
 80072a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072a6:	4604      	mov	r4, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 81cf 	beq.w	800764c <_dtoa_r+0xb3c>
 80072ae:	461a      	mov	r2, r3
 80072b0:	4601      	mov	r1, r0
 80072b2:	4658      	mov	r0, fp
 80072b4:	f000 fca4 	bl	8007c00 <__pow5mult>
 80072b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	4604      	mov	r4, r0
 80072be:	f300 8095 	bgt.w	80073ec <_dtoa_r+0x8dc>
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8087 	bne.w	80073d8 <_dtoa_r+0x8c8>
 80072ca:	9b03      	ldr	r3, [sp, #12]
 80072cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 8089 	bne.w	80073e8 <_dtoa_r+0x8d8>
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072dc:	0d1b      	lsrs	r3, r3, #20
 80072de:	051b      	lsls	r3, r3, #20
 80072e0:	b12b      	cbz	r3, 80072ee <_dtoa_r+0x7de>
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	3301      	adds	r3, #1
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	f108 0801 	add.w	r8, r8, #1
 80072ec:	2301      	movs	r3, #1
 80072ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 81b0 	beq.w	8007658 <_dtoa_r+0xb48>
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072fe:	6918      	ldr	r0, [r3, #16]
 8007300:	f000 fb72 	bl	80079e8 <__hi0bits>
 8007304:	f1c0 0020 	rsb	r0, r0, #32
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	4418      	add	r0, r3
 800730c:	f010 001f 	ands.w	r0, r0, #31
 8007310:	d077      	beq.n	8007402 <_dtoa_r+0x8f2>
 8007312:	f1c0 0320 	rsb	r3, r0, #32
 8007316:	2b04      	cmp	r3, #4
 8007318:	dd6b      	ble.n	80073f2 <_dtoa_r+0x8e2>
 800731a:	9b08      	ldr	r3, [sp, #32]
 800731c:	f1c0 001c 	rsb	r0, r0, #28
 8007320:	4403      	add	r3, r0
 8007322:	4480      	add	r8, r0
 8007324:	4406      	add	r6, r0
 8007326:	9308      	str	r3, [sp, #32]
 8007328:	f1b8 0f00 	cmp.w	r8, #0
 800732c:	dd05      	ble.n	800733a <_dtoa_r+0x82a>
 800732e:	4649      	mov	r1, r9
 8007330:	4642      	mov	r2, r8
 8007332:	4658      	mov	r0, fp
 8007334:	f000 fcbe 	bl	8007cb4 <__lshift>
 8007338:	4681      	mov	r9, r0
 800733a:	9b08      	ldr	r3, [sp, #32]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd05      	ble.n	800734c <_dtoa_r+0x83c>
 8007340:	4621      	mov	r1, r4
 8007342:	461a      	mov	r2, r3
 8007344:	4658      	mov	r0, fp
 8007346:	f000 fcb5 	bl	8007cb4 <__lshift>
 800734a:	4604      	mov	r4, r0
 800734c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800734e:	2b00      	cmp	r3, #0
 8007350:	d059      	beq.n	8007406 <_dtoa_r+0x8f6>
 8007352:	4621      	mov	r1, r4
 8007354:	4648      	mov	r0, r9
 8007356:	f000 fd19 	bl	8007d8c <__mcmp>
 800735a:	2800      	cmp	r0, #0
 800735c:	da53      	bge.n	8007406 <_dtoa_r+0x8f6>
 800735e:	1e7b      	subs	r3, r7, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	4649      	mov	r1, r9
 8007364:	2300      	movs	r3, #0
 8007366:	220a      	movs	r2, #10
 8007368:	4658      	mov	r0, fp
 800736a:	f000 faf7 	bl	800795c <__multadd>
 800736e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007370:	4681      	mov	r9, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8172 	beq.w	800765c <_dtoa_r+0xb4c>
 8007378:	2300      	movs	r3, #0
 800737a:	4629      	mov	r1, r5
 800737c:	220a      	movs	r2, #10
 800737e:	4658      	mov	r0, fp
 8007380:	f000 faec 	bl	800795c <__multadd>
 8007384:	9b00      	ldr	r3, [sp, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	4605      	mov	r5, r0
 800738a:	dc67      	bgt.n	800745c <_dtoa_r+0x94c>
 800738c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738e:	2b02      	cmp	r3, #2
 8007390:	dc41      	bgt.n	8007416 <_dtoa_r+0x906>
 8007392:	e063      	b.n	800745c <_dtoa_r+0x94c>
 8007394:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800739a:	e746      	b.n	800722a <_dtoa_r+0x71a>
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	1e5c      	subs	r4, r3, #1
 80073a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	bfbf      	itttt	lt
 80073a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80073a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80073aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80073ac:	1ae3      	sublt	r3, r4, r3
 80073ae:	bfb4      	ite	lt
 80073b0:	18d2      	addlt	r2, r2, r3
 80073b2:	1b1c      	subge	r4, r3, r4
 80073b4:	9b07      	ldr	r3, [sp, #28]
 80073b6:	bfbc      	itt	lt
 80073b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80073ba:	2400      	movlt	r4, #0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bfb5      	itete	lt
 80073c0:	eba8 0603 	sublt.w	r6, r8, r3
 80073c4:	9b07      	ldrge	r3, [sp, #28]
 80073c6:	2300      	movlt	r3, #0
 80073c8:	4646      	movge	r6, r8
 80073ca:	e730      	b.n	800722e <_dtoa_r+0x71e>
 80073cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073d0:	4646      	mov	r6, r8
 80073d2:	e735      	b.n	8007240 <_dtoa_r+0x730>
 80073d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073d6:	e75c      	b.n	8007292 <_dtoa_r+0x782>
 80073d8:	2300      	movs	r3, #0
 80073da:	e788      	b.n	80072ee <_dtoa_r+0x7de>
 80073dc:	3fe00000 	.word	0x3fe00000
 80073e0:	40240000 	.word	0x40240000
 80073e4:	40140000 	.word	0x40140000
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	e780      	b.n	80072ee <_dtoa_r+0x7de>
 80073ec:	2300      	movs	r3, #0
 80073ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f0:	e782      	b.n	80072f8 <_dtoa_r+0x7e8>
 80073f2:	d099      	beq.n	8007328 <_dtoa_r+0x818>
 80073f4:	9a08      	ldr	r2, [sp, #32]
 80073f6:	331c      	adds	r3, #28
 80073f8:	441a      	add	r2, r3
 80073fa:	4498      	add	r8, r3
 80073fc:	441e      	add	r6, r3
 80073fe:	9208      	str	r2, [sp, #32]
 8007400:	e792      	b.n	8007328 <_dtoa_r+0x818>
 8007402:	4603      	mov	r3, r0
 8007404:	e7f6      	b.n	80073f4 <_dtoa_r+0x8e4>
 8007406:	9b07      	ldr	r3, [sp, #28]
 8007408:	9704      	str	r7, [sp, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dc20      	bgt.n	8007450 <_dtoa_r+0x940>
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007412:	2b02      	cmp	r3, #2
 8007414:	dd1e      	ble.n	8007454 <_dtoa_r+0x944>
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f aec0 	bne.w	800719e <_dtoa_r+0x68e>
 800741e:	4621      	mov	r1, r4
 8007420:	2205      	movs	r2, #5
 8007422:	4658      	mov	r0, fp
 8007424:	f000 fa9a 	bl	800795c <__multadd>
 8007428:	4601      	mov	r1, r0
 800742a:	4604      	mov	r4, r0
 800742c:	4648      	mov	r0, r9
 800742e:	f000 fcad 	bl	8007d8c <__mcmp>
 8007432:	2800      	cmp	r0, #0
 8007434:	f77f aeb3 	ble.w	800719e <_dtoa_r+0x68e>
 8007438:	4656      	mov	r6, sl
 800743a:	2331      	movs	r3, #49	@ 0x31
 800743c:	f806 3b01 	strb.w	r3, [r6], #1
 8007440:	9b04      	ldr	r3, [sp, #16]
 8007442:	3301      	adds	r3, #1
 8007444:	9304      	str	r3, [sp, #16]
 8007446:	e6ae      	b.n	80071a6 <_dtoa_r+0x696>
 8007448:	9c07      	ldr	r4, [sp, #28]
 800744a:	9704      	str	r7, [sp, #16]
 800744c:	4625      	mov	r5, r4
 800744e:	e7f3      	b.n	8007438 <_dtoa_r+0x928>
 8007450:	9b07      	ldr	r3, [sp, #28]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8104 	beq.w	8007664 <_dtoa_r+0xb54>
 800745c:	2e00      	cmp	r6, #0
 800745e:	dd05      	ble.n	800746c <_dtoa_r+0x95c>
 8007460:	4629      	mov	r1, r5
 8007462:	4632      	mov	r2, r6
 8007464:	4658      	mov	r0, fp
 8007466:	f000 fc25 	bl	8007cb4 <__lshift>
 800746a:	4605      	mov	r5, r0
 800746c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d05a      	beq.n	8007528 <_dtoa_r+0xa18>
 8007472:	6869      	ldr	r1, [r5, #4]
 8007474:	4658      	mov	r0, fp
 8007476:	f000 fa0f 	bl	8007898 <_Balloc>
 800747a:	4606      	mov	r6, r0
 800747c:	b928      	cbnz	r0, 800748a <_dtoa_r+0x97a>
 800747e:	4b84      	ldr	r3, [pc, #528]	@ (8007690 <_dtoa_r+0xb80>)
 8007480:	4602      	mov	r2, r0
 8007482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007486:	f7ff bb5a 	b.w	8006b3e <_dtoa_r+0x2e>
 800748a:	692a      	ldr	r2, [r5, #16]
 800748c:	3202      	adds	r2, #2
 800748e:	0092      	lsls	r2, r2, #2
 8007490:	f105 010c 	add.w	r1, r5, #12
 8007494:	300c      	adds	r0, #12
 8007496:	f7ff faa4 	bl	80069e2 <memcpy>
 800749a:	2201      	movs	r2, #1
 800749c:	4631      	mov	r1, r6
 800749e:	4658      	mov	r0, fp
 80074a0:	f000 fc08 	bl	8007cb4 <__lshift>
 80074a4:	f10a 0301 	add.w	r3, sl, #1
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	9b00      	ldr	r3, [sp, #0]
 80074ac:	4453      	add	r3, sl
 80074ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b0:	9b02      	ldr	r3, [sp, #8]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	462f      	mov	r7, r5
 80074b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ba:	4605      	mov	r5, r0
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	4621      	mov	r1, r4
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4648      	mov	r0, r9
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	f7ff fa9a 	bl	80069fe <quorem>
 80074ca:	4639      	mov	r1, r7
 80074cc:	9002      	str	r0, [sp, #8]
 80074ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074d2:	4648      	mov	r0, r9
 80074d4:	f000 fc5a 	bl	8007d8c <__mcmp>
 80074d8:	462a      	mov	r2, r5
 80074da:	9008      	str	r0, [sp, #32]
 80074dc:	4621      	mov	r1, r4
 80074de:	4658      	mov	r0, fp
 80074e0:	f000 fc70 	bl	8007dc4 <__mdiff>
 80074e4:	68c2      	ldr	r2, [r0, #12]
 80074e6:	4606      	mov	r6, r0
 80074e8:	bb02      	cbnz	r2, 800752c <_dtoa_r+0xa1c>
 80074ea:	4601      	mov	r1, r0
 80074ec:	4648      	mov	r0, r9
 80074ee:	f000 fc4d 	bl	8007d8c <__mcmp>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4631      	mov	r1, r6
 80074f6:	4658      	mov	r0, fp
 80074f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074fa:	f000 fa0d 	bl	8007918 <_Bfree>
 80074fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007502:	9e07      	ldr	r6, [sp, #28]
 8007504:	ea43 0102 	orr.w	r1, r3, r2
 8007508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750a:	4319      	orrs	r1, r3
 800750c:	d110      	bne.n	8007530 <_dtoa_r+0xa20>
 800750e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007512:	d029      	beq.n	8007568 <_dtoa_r+0xa58>
 8007514:	9b08      	ldr	r3, [sp, #32]
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd02      	ble.n	8007520 <_dtoa_r+0xa10>
 800751a:	9b02      	ldr	r3, [sp, #8]
 800751c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	f883 8000 	strb.w	r8, [r3]
 8007526:	e63f      	b.n	80071a8 <_dtoa_r+0x698>
 8007528:	4628      	mov	r0, r5
 800752a:	e7bb      	b.n	80074a4 <_dtoa_r+0x994>
 800752c:	2201      	movs	r2, #1
 800752e:	e7e1      	b.n	80074f4 <_dtoa_r+0x9e4>
 8007530:	9b08      	ldr	r3, [sp, #32]
 8007532:	2b00      	cmp	r3, #0
 8007534:	db04      	blt.n	8007540 <_dtoa_r+0xa30>
 8007536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007538:	430b      	orrs	r3, r1
 800753a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800753c:	430b      	orrs	r3, r1
 800753e:	d120      	bne.n	8007582 <_dtoa_r+0xa72>
 8007540:	2a00      	cmp	r2, #0
 8007542:	dded      	ble.n	8007520 <_dtoa_r+0xa10>
 8007544:	4649      	mov	r1, r9
 8007546:	2201      	movs	r2, #1
 8007548:	4658      	mov	r0, fp
 800754a:	f000 fbb3 	bl	8007cb4 <__lshift>
 800754e:	4621      	mov	r1, r4
 8007550:	4681      	mov	r9, r0
 8007552:	f000 fc1b 	bl	8007d8c <__mcmp>
 8007556:	2800      	cmp	r0, #0
 8007558:	dc03      	bgt.n	8007562 <_dtoa_r+0xa52>
 800755a:	d1e1      	bne.n	8007520 <_dtoa_r+0xa10>
 800755c:	f018 0f01 	tst.w	r8, #1
 8007560:	d0de      	beq.n	8007520 <_dtoa_r+0xa10>
 8007562:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007566:	d1d8      	bne.n	800751a <_dtoa_r+0xa0a>
 8007568:	9a00      	ldr	r2, [sp, #0]
 800756a:	2339      	movs	r3, #57	@ 0x39
 800756c:	7013      	strb	r3, [r2, #0]
 800756e:	4633      	mov	r3, r6
 8007570:	461e      	mov	r6, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007578:	2a39      	cmp	r2, #57	@ 0x39
 800757a:	d052      	beq.n	8007622 <_dtoa_r+0xb12>
 800757c:	3201      	adds	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e612      	b.n	80071a8 <_dtoa_r+0x698>
 8007582:	2a00      	cmp	r2, #0
 8007584:	dd07      	ble.n	8007596 <_dtoa_r+0xa86>
 8007586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800758a:	d0ed      	beq.n	8007568 <_dtoa_r+0xa58>
 800758c:	9a00      	ldr	r2, [sp, #0]
 800758e:	f108 0301 	add.w	r3, r8, #1
 8007592:	7013      	strb	r3, [r2, #0]
 8007594:	e608      	b.n	80071a8 <_dtoa_r+0x698>
 8007596:	9b07      	ldr	r3, [sp, #28]
 8007598:	9a07      	ldr	r2, [sp, #28]
 800759a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800759e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d028      	beq.n	80075f6 <_dtoa_r+0xae6>
 80075a4:	4649      	mov	r1, r9
 80075a6:	2300      	movs	r3, #0
 80075a8:	220a      	movs	r2, #10
 80075aa:	4658      	mov	r0, fp
 80075ac:	f000 f9d6 	bl	800795c <__multadd>
 80075b0:	42af      	cmp	r7, r5
 80075b2:	4681      	mov	r9, r0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	f04f 020a 	mov.w	r2, #10
 80075bc:	4639      	mov	r1, r7
 80075be:	4658      	mov	r0, fp
 80075c0:	d107      	bne.n	80075d2 <_dtoa_r+0xac2>
 80075c2:	f000 f9cb 	bl	800795c <__multadd>
 80075c6:	4607      	mov	r7, r0
 80075c8:	4605      	mov	r5, r0
 80075ca:	9b07      	ldr	r3, [sp, #28]
 80075cc:	3301      	adds	r3, #1
 80075ce:	9307      	str	r3, [sp, #28]
 80075d0:	e774      	b.n	80074bc <_dtoa_r+0x9ac>
 80075d2:	f000 f9c3 	bl	800795c <__multadd>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4607      	mov	r7, r0
 80075da:	2300      	movs	r3, #0
 80075dc:	220a      	movs	r2, #10
 80075de:	4658      	mov	r0, fp
 80075e0:	f000 f9bc 	bl	800795c <__multadd>
 80075e4:	4605      	mov	r5, r0
 80075e6:	e7f0      	b.n	80075ca <_dtoa_r+0xaba>
 80075e8:	9b00      	ldr	r3, [sp, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bfcc      	ite	gt
 80075ee:	461e      	movgt	r6, r3
 80075f0:	2601      	movle	r6, #1
 80075f2:	4456      	add	r6, sl
 80075f4:	2700      	movs	r7, #0
 80075f6:	4649      	mov	r1, r9
 80075f8:	2201      	movs	r2, #1
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fb5a 	bl	8007cb4 <__lshift>
 8007600:	4621      	mov	r1, r4
 8007602:	4681      	mov	r9, r0
 8007604:	f000 fbc2 	bl	8007d8c <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	dcb0      	bgt.n	800756e <_dtoa_r+0xa5e>
 800760c:	d102      	bne.n	8007614 <_dtoa_r+0xb04>
 800760e:	f018 0f01 	tst.w	r8, #1
 8007612:	d1ac      	bne.n	800756e <_dtoa_r+0xa5e>
 8007614:	4633      	mov	r3, r6
 8007616:	461e      	mov	r6, r3
 8007618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800761c:	2a30      	cmp	r2, #48	@ 0x30
 800761e:	d0fa      	beq.n	8007616 <_dtoa_r+0xb06>
 8007620:	e5c2      	b.n	80071a8 <_dtoa_r+0x698>
 8007622:	459a      	cmp	sl, r3
 8007624:	d1a4      	bne.n	8007570 <_dtoa_r+0xa60>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	3301      	adds	r3, #1
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	2331      	movs	r3, #49	@ 0x31
 800762e:	f88a 3000 	strb.w	r3, [sl]
 8007632:	e5b9      	b.n	80071a8 <_dtoa_r+0x698>
 8007634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007636:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007694 <_dtoa_r+0xb84>
 800763a:	b11b      	cbz	r3, 8007644 <_dtoa_r+0xb34>
 800763c:	f10a 0308 	add.w	r3, sl, #8
 8007640:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	4650      	mov	r0, sl
 8007646:	b019      	add	sp, #100	@ 0x64
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764e:	2b01      	cmp	r3, #1
 8007650:	f77f ae37 	ble.w	80072c2 <_dtoa_r+0x7b2>
 8007654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007656:	930a      	str	r3, [sp, #40]	@ 0x28
 8007658:	2001      	movs	r0, #1
 800765a:	e655      	b.n	8007308 <_dtoa_r+0x7f8>
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f77f aed6 	ble.w	8007410 <_dtoa_r+0x900>
 8007664:	4656      	mov	r6, sl
 8007666:	4621      	mov	r1, r4
 8007668:	4648      	mov	r0, r9
 800766a:	f7ff f9c8 	bl	80069fe <quorem>
 800766e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007672:	f806 8b01 	strb.w	r8, [r6], #1
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	eba6 020a 	sub.w	r2, r6, sl
 800767c:	4293      	cmp	r3, r2
 800767e:	ddb3      	ble.n	80075e8 <_dtoa_r+0xad8>
 8007680:	4649      	mov	r1, r9
 8007682:	2300      	movs	r3, #0
 8007684:	220a      	movs	r2, #10
 8007686:	4658      	mov	r0, fp
 8007688:	f000 f968 	bl	800795c <__multadd>
 800768c:	4681      	mov	r9, r0
 800768e:	e7ea      	b.n	8007666 <_dtoa_r+0xb56>
 8007690:	08009368 	.word	0x08009368
 8007694:	080092ec 	.word	0x080092ec

08007698 <_free_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4605      	mov	r5, r0
 800769c:	2900      	cmp	r1, #0
 800769e:	d041      	beq.n	8007724 <_free_r+0x8c>
 80076a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a4:	1f0c      	subs	r4, r1, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bfb8      	it	lt
 80076aa:	18e4      	addlt	r4, r4, r3
 80076ac:	f000 f8e8 	bl	8007880 <__malloc_lock>
 80076b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007728 <_free_r+0x90>)
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	b933      	cbnz	r3, 80076c4 <_free_r+0x2c>
 80076b6:	6063      	str	r3, [r4, #4]
 80076b8:	6014      	str	r4, [r2, #0]
 80076ba:	4628      	mov	r0, r5
 80076bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c0:	f000 b8e4 	b.w	800788c <__malloc_unlock>
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d908      	bls.n	80076da <_free_r+0x42>
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	1821      	adds	r1, r4, r0
 80076cc:	428b      	cmp	r3, r1
 80076ce:	bf01      	itttt	eq
 80076d0:	6819      	ldreq	r1, [r3, #0]
 80076d2:	685b      	ldreq	r3, [r3, #4]
 80076d4:	1809      	addeq	r1, r1, r0
 80076d6:	6021      	streq	r1, [r4, #0]
 80076d8:	e7ed      	b.n	80076b6 <_free_r+0x1e>
 80076da:	461a      	mov	r2, r3
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	b10b      	cbz	r3, 80076e4 <_free_r+0x4c>
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d9fa      	bls.n	80076da <_free_r+0x42>
 80076e4:	6811      	ldr	r1, [r2, #0]
 80076e6:	1850      	adds	r0, r2, r1
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d10b      	bne.n	8007704 <_free_r+0x6c>
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	4401      	add	r1, r0
 80076f0:	1850      	adds	r0, r2, r1
 80076f2:	4283      	cmp	r3, r0
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	d1e0      	bne.n	80076ba <_free_r+0x22>
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	6053      	str	r3, [r2, #4]
 80076fe:	4408      	add	r0, r1
 8007700:	6010      	str	r0, [r2, #0]
 8007702:	e7da      	b.n	80076ba <_free_r+0x22>
 8007704:	d902      	bls.n	800770c <_free_r+0x74>
 8007706:	230c      	movs	r3, #12
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	e7d6      	b.n	80076ba <_free_r+0x22>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	1821      	adds	r1, r4, r0
 8007710:	428b      	cmp	r3, r1
 8007712:	bf04      	itt	eq
 8007714:	6819      	ldreq	r1, [r3, #0]
 8007716:	685b      	ldreq	r3, [r3, #4]
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	bf04      	itt	eq
 800771c:	1809      	addeq	r1, r1, r0
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	6054      	str	r4, [r2, #4]
 8007722:	e7ca      	b.n	80076ba <_free_r+0x22>
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	bf00      	nop
 8007728:	2000099c 	.word	0x2000099c

0800772c <malloc>:
 800772c:	4b02      	ldr	r3, [pc, #8]	@ (8007738 <malloc+0xc>)
 800772e:	4601      	mov	r1, r0
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	f000 b825 	b.w	8007780 <_malloc_r>
 8007736:	bf00      	nop
 8007738:	20000020 	.word	0x20000020

0800773c <sbrk_aligned>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4e0f      	ldr	r6, [pc, #60]	@ (800777c <sbrk_aligned+0x40>)
 8007740:	460c      	mov	r4, r1
 8007742:	6831      	ldr	r1, [r6, #0]
 8007744:	4605      	mov	r5, r0
 8007746:	b911      	cbnz	r1, 800774e <sbrk_aligned+0x12>
 8007748:	f000 fe2c 	bl	80083a4 <_sbrk_r>
 800774c:	6030      	str	r0, [r6, #0]
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 fe27 	bl	80083a4 <_sbrk_r>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d103      	bne.n	8007762 <sbrk_aligned+0x26>
 800775a:	f04f 34ff 	mov.w	r4, #4294967295
 800775e:	4620      	mov	r0, r4
 8007760:	bd70      	pop	{r4, r5, r6, pc}
 8007762:	1cc4      	adds	r4, r0, #3
 8007764:	f024 0403 	bic.w	r4, r4, #3
 8007768:	42a0      	cmp	r0, r4
 800776a:	d0f8      	beq.n	800775e <sbrk_aligned+0x22>
 800776c:	1a21      	subs	r1, r4, r0
 800776e:	4628      	mov	r0, r5
 8007770:	f000 fe18 	bl	80083a4 <_sbrk_r>
 8007774:	3001      	adds	r0, #1
 8007776:	d1f2      	bne.n	800775e <sbrk_aligned+0x22>
 8007778:	e7ef      	b.n	800775a <sbrk_aligned+0x1e>
 800777a:	bf00      	nop
 800777c:	20000998 	.word	0x20000998

08007780 <_malloc_r>:
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	1ccd      	adds	r5, r1, #3
 8007786:	f025 0503 	bic.w	r5, r5, #3
 800778a:	3508      	adds	r5, #8
 800778c:	2d0c      	cmp	r5, #12
 800778e:	bf38      	it	cc
 8007790:	250c      	movcc	r5, #12
 8007792:	2d00      	cmp	r5, #0
 8007794:	4606      	mov	r6, r0
 8007796:	db01      	blt.n	800779c <_malloc_r+0x1c>
 8007798:	42a9      	cmp	r1, r5
 800779a:	d904      	bls.n	80077a6 <_malloc_r+0x26>
 800779c:	230c      	movs	r3, #12
 800779e:	6033      	str	r3, [r6, #0]
 80077a0:	2000      	movs	r0, #0
 80077a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800787c <_malloc_r+0xfc>
 80077aa:	f000 f869 	bl	8007880 <__malloc_lock>
 80077ae:	f8d8 3000 	ldr.w	r3, [r8]
 80077b2:	461c      	mov	r4, r3
 80077b4:	bb44      	cbnz	r4, 8007808 <_malloc_r+0x88>
 80077b6:	4629      	mov	r1, r5
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7ff ffbf 	bl	800773c <sbrk_aligned>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	4604      	mov	r4, r0
 80077c2:	d158      	bne.n	8007876 <_malloc_r+0xf6>
 80077c4:	f8d8 4000 	ldr.w	r4, [r8]
 80077c8:	4627      	mov	r7, r4
 80077ca:	2f00      	cmp	r7, #0
 80077cc:	d143      	bne.n	8007856 <_malloc_r+0xd6>
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	d04b      	beq.n	800786a <_malloc_r+0xea>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	4639      	mov	r1, r7
 80077d6:	4630      	mov	r0, r6
 80077d8:	eb04 0903 	add.w	r9, r4, r3
 80077dc:	f000 fde2 	bl	80083a4 <_sbrk_r>
 80077e0:	4581      	cmp	r9, r0
 80077e2:	d142      	bne.n	800786a <_malloc_r+0xea>
 80077e4:	6821      	ldr	r1, [r4, #0]
 80077e6:	1a6d      	subs	r5, r5, r1
 80077e8:	4629      	mov	r1, r5
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ffa6 	bl	800773c <sbrk_aligned>
 80077f0:	3001      	adds	r0, #1
 80077f2:	d03a      	beq.n	800786a <_malloc_r+0xea>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	442b      	add	r3, r5
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	f8d8 3000 	ldr.w	r3, [r8]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	bb62      	cbnz	r2, 800785c <_malloc_r+0xdc>
 8007802:	f8c8 7000 	str.w	r7, [r8]
 8007806:	e00f      	b.n	8007828 <_malloc_r+0xa8>
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	1b52      	subs	r2, r2, r5
 800780c:	d420      	bmi.n	8007850 <_malloc_r+0xd0>
 800780e:	2a0b      	cmp	r2, #11
 8007810:	d917      	bls.n	8007842 <_malloc_r+0xc2>
 8007812:	1961      	adds	r1, r4, r5
 8007814:	42a3      	cmp	r3, r4
 8007816:	6025      	str	r5, [r4, #0]
 8007818:	bf18      	it	ne
 800781a:	6059      	strne	r1, [r3, #4]
 800781c:	6863      	ldr	r3, [r4, #4]
 800781e:	bf08      	it	eq
 8007820:	f8c8 1000 	streq.w	r1, [r8]
 8007824:	5162      	str	r2, [r4, r5]
 8007826:	604b      	str	r3, [r1, #4]
 8007828:	4630      	mov	r0, r6
 800782a:	f000 f82f 	bl	800788c <__malloc_unlock>
 800782e:	f104 000b 	add.w	r0, r4, #11
 8007832:	1d23      	adds	r3, r4, #4
 8007834:	f020 0007 	bic.w	r0, r0, #7
 8007838:	1ac2      	subs	r2, r0, r3
 800783a:	bf1c      	itt	ne
 800783c:	1a1b      	subne	r3, r3, r0
 800783e:	50a3      	strne	r3, [r4, r2]
 8007840:	e7af      	b.n	80077a2 <_malloc_r+0x22>
 8007842:	6862      	ldr	r2, [r4, #4]
 8007844:	42a3      	cmp	r3, r4
 8007846:	bf0c      	ite	eq
 8007848:	f8c8 2000 	streq.w	r2, [r8]
 800784c:	605a      	strne	r2, [r3, #4]
 800784e:	e7eb      	b.n	8007828 <_malloc_r+0xa8>
 8007850:	4623      	mov	r3, r4
 8007852:	6864      	ldr	r4, [r4, #4]
 8007854:	e7ae      	b.n	80077b4 <_malloc_r+0x34>
 8007856:	463c      	mov	r4, r7
 8007858:	687f      	ldr	r7, [r7, #4]
 800785a:	e7b6      	b.n	80077ca <_malloc_r+0x4a>
 800785c:	461a      	mov	r2, r3
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	42a3      	cmp	r3, r4
 8007862:	d1fb      	bne.n	800785c <_malloc_r+0xdc>
 8007864:	2300      	movs	r3, #0
 8007866:	6053      	str	r3, [r2, #4]
 8007868:	e7de      	b.n	8007828 <_malloc_r+0xa8>
 800786a:	230c      	movs	r3, #12
 800786c:	6033      	str	r3, [r6, #0]
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f80c 	bl	800788c <__malloc_unlock>
 8007874:	e794      	b.n	80077a0 <_malloc_r+0x20>
 8007876:	6005      	str	r5, [r0, #0]
 8007878:	e7d6      	b.n	8007828 <_malloc_r+0xa8>
 800787a:	bf00      	nop
 800787c:	2000099c 	.word	0x2000099c

08007880 <__malloc_lock>:
 8007880:	4801      	ldr	r0, [pc, #4]	@ (8007888 <__malloc_lock+0x8>)
 8007882:	f7ff b8ac 	b.w	80069de <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	20000994 	.word	0x20000994

0800788c <__malloc_unlock>:
 800788c:	4801      	ldr	r0, [pc, #4]	@ (8007894 <__malloc_unlock+0x8>)
 800788e:	f7ff b8a7 	b.w	80069e0 <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	20000994 	.word	0x20000994

08007898 <_Balloc>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	69c6      	ldr	r6, [r0, #28]
 800789c:	4604      	mov	r4, r0
 800789e:	460d      	mov	r5, r1
 80078a0:	b976      	cbnz	r6, 80078c0 <_Balloc+0x28>
 80078a2:	2010      	movs	r0, #16
 80078a4:	f7ff ff42 	bl	800772c <malloc>
 80078a8:	4602      	mov	r2, r0
 80078aa:	61e0      	str	r0, [r4, #28]
 80078ac:	b920      	cbnz	r0, 80078b8 <_Balloc+0x20>
 80078ae:	4b18      	ldr	r3, [pc, #96]	@ (8007910 <_Balloc+0x78>)
 80078b0:	4818      	ldr	r0, [pc, #96]	@ (8007914 <_Balloc+0x7c>)
 80078b2:	216b      	movs	r1, #107	@ 0x6b
 80078b4:	f000 fd86 	bl	80083c4 <__assert_func>
 80078b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078bc:	6006      	str	r6, [r0, #0]
 80078be:	60c6      	str	r6, [r0, #12]
 80078c0:	69e6      	ldr	r6, [r4, #28]
 80078c2:	68f3      	ldr	r3, [r6, #12]
 80078c4:	b183      	cbz	r3, 80078e8 <_Balloc+0x50>
 80078c6:	69e3      	ldr	r3, [r4, #28]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078ce:	b9b8      	cbnz	r0, 8007900 <_Balloc+0x68>
 80078d0:	2101      	movs	r1, #1
 80078d2:	fa01 f605 	lsl.w	r6, r1, r5
 80078d6:	1d72      	adds	r2, r6, #5
 80078d8:	0092      	lsls	r2, r2, #2
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fd90 	bl	8008400 <_calloc_r>
 80078e0:	b160      	cbz	r0, 80078fc <_Balloc+0x64>
 80078e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078e6:	e00e      	b.n	8007906 <_Balloc+0x6e>
 80078e8:	2221      	movs	r2, #33	@ 0x21
 80078ea:	2104      	movs	r1, #4
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fd87 	bl	8008400 <_calloc_r>
 80078f2:	69e3      	ldr	r3, [r4, #28]
 80078f4:	60f0      	str	r0, [r6, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e4      	bne.n	80078c6 <_Balloc+0x2e>
 80078fc:	2000      	movs	r0, #0
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	6802      	ldr	r2, [r0, #0]
 8007902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007906:	2300      	movs	r3, #0
 8007908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800790c:	e7f7      	b.n	80078fe <_Balloc+0x66>
 800790e:	bf00      	nop
 8007910:	080092f9 	.word	0x080092f9
 8007914:	08009379 	.word	0x08009379

08007918 <_Bfree>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	69c6      	ldr	r6, [r0, #28]
 800791c:	4605      	mov	r5, r0
 800791e:	460c      	mov	r4, r1
 8007920:	b976      	cbnz	r6, 8007940 <_Bfree+0x28>
 8007922:	2010      	movs	r0, #16
 8007924:	f7ff ff02 	bl	800772c <malloc>
 8007928:	4602      	mov	r2, r0
 800792a:	61e8      	str	r0, [r5, #28]
 800792c:	b920      	cbnz	r0, 8007938 <_Bfree+0x20>
 800792e:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <_Bfree+0x3c>)
 8007930:	4809      	ldr	r0, [pc, #36]	@ (8007958 <_Bfree+0x40>)
 8007932:	218f      	movs	r1, #143	@ 0x8f
 8007934:	f000 fd46 	bl	80083c4 <__assert_func>
 8007938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800793c:	6006      	str	r6, [r0, #0]
 800793e:	60c6      	str	r6, [r0, #12]
 8007940:	b13c      	cbz	r4, 8007952 <_Bfree+0x3a>
 8007942:	69eb      	ldr	r3, [r5, #28]
 8007944:	6862      	ldr	r2, [r4, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800794c:	6021      	str	r1, [r4, #0]
 800794e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	080092f9 	.word	0x080092f9
 8007958:	08009379 	.word	0x08009379

0800795c <__multadd>:
 800795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007960:	690d      	ldr	r5, [r1, #16]
 8007962:	4607      	mov	r7, r0
 8007964:	460c      	mov	r4, r1
 8007966:	461e      	mov	r6, r3
 8007968:	f101 0c14 	add.w	ip, r1, #20
 800796c:	2000      	movs	r0, #0
 800796e:	f8dc 3000 	ldr.w	r3, [ip]
 8007972:	b299      	uxth	r1, r3
 8007974:	fb02 6101 	mla	r1, r2, r1, r6
 8007978:	0c1e      	lsrs	r6, r3, #16
 800797a:	0c0b      	lsrs	r3, r1, #16
 800797c:	fb02 3306 	mla	r3, r2, r6, r3
 8007980:	b289      	uxth	r1, r1
 8007982:	3001      	adds	r0, #1
 8007984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007988:	4285      	cmp	r5, r0
 800798a:	f84c 1b04 	str.w	r1, [ip], #4
 800798e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007992:	dcec      	bgt.n	800796e <__multadd+0x12>
 8007994:	b30e      	cbz	r6, 80079da <__multadd+0x7e>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	42ab      	cmp	r3, r5
 800799a:	dc19      	bgt.n	80079d0 <__multadd+0x74>
 800799c:	6861      	ldr	r1, [r4, #4]
 800799e:	4638      	mov	r0, r7
 80079a0:	3101      	adds	r1, #1
 80079a2:	f7ff ff79 	bl	8007898 <_Balloc>
 80079a6:	4680      	mov	r8, r0
 80079a8:	b928      	cbnz	r0, 80079b6 <__multadd+0x5a>
 80079aa:	4602      	mov	r2, r0
 80079ac:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <__multadd+0x84>)
 80079ae:	480d      	ldr	r0, [pc, #52]	@ (80079e4 <__multadd+0x88>)
 80079b0:	21ba      	movs	r1, #186	@ 0xba
 80079b2:	f000 fd07 	bl	80083c4 <__assert_func>
 80079b6:	6922      	ldr	r2, [r4, #16]
 80079b8:	3202      	adds	r2, #2
 80079ba:	f104 010c 	add.w	r1, r4, #12
 80079be:	0092      	lsls	r2, r2, #2
 80079c0:	300c      	adds	r0, #12
 80079c2:	f7ff f80e 	bl	80069e2 <memcpy>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ffa5 	bl	8007918 <_Bfree>
 80079ce:	4644      	mov	r4, r8
 80079d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079d4:	3501      	adds	r5, #1
 80079d6:	615e      	str	r6, [r3, #20]
 80079d8:	6125      	str	r5, [r4, #16]
 80079da:	4620      	mov	r0, r4
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	08009368 	.word	0x08009368
 80079e4:	08009379 	.word	0x08009379

080079e8 <__hi0bits>:
 80079e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079ec:	4603      	mov	r3, r0
 80079ee:	bf36      	itet	cc
 80079f0:	0403      	lslcc	r3, r0, #16
 80079f2:	2000      	movcs	r0, #0
 80079f4:	2010      	movcc	r0, #16
 80079f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079fa:	bf3c      	itt	cc
 80079fc:	021b      	lslcc	r3, r3, #8
 80079fe:	3008      	addcc	r0, #8
 8007a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a04:	bf3c      	itt	cc
 8007a06:	011b      	lslcc	r3, r3, #4
 8007a08:	3004      	addcc	r0, #4
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0e:	bf3c      	itt	cc
 8007a10:	009b      	lslcc	r3, r3, #2
 8007a12:	3002      	addcc	r0, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db05      	blt.n	8007a24 <__hi0bits+0x3c>
 8007a18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a1c:	f100 0001 	add.w	r0, r0, #1
 8007a20:	bf08      	it	eq
 8007a22:	2020      	moveq	r0, #32
 8007a24:	4770      	bx	lr

08007a26 <__lo0bits>:
 8007a26:	6803      	ldr	r3, [r0, #0]
 8007a28:	4602      	mov	r2, r0
 8007a2a:	f013 0007 	ands.w	r0, r3, #7
 8007a2e:	d00b      	beq.n	8007a48 <__lo0bits+0x22>
 8007a30:	07d9      	lsls	r1, r3, #31
 8007a32:	d421      	bmi.n	8007a78 <__lo0bits+0x52>
 8007a34:	0798      	lsls	r0, r3, #30
 8007a36:	bf49      	itett	mi
 8007a38:	085b      	lsrmi	r3, r3, #1
 8007a3a:	089b      	lsrpl	r3, r3, #2
 8007a3c:	2001      	movmi	r0, #1
 8007a3e:	6013      	strmi	r3, [r2, #0]
 8007a40:	bf5c      	itt	pl
 8007a42:	6013      	strpl	r3, [r2, #0]
 8007a44:	2002      	movpl	r0, #2
 8007a46:	4770      	bx	lr
 8007a48:	b299      	uxth	r1, r3
 8007a4a:	b909      	cbnz	r1, 8007a50 <__lo0bits+0x2a>
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	2010      	movs	r0, #16
 8007a50:	b2d9      	uxtb	r1, r3
 8007a52:	b909      	cbnz	r1, 8007a58 <__lo0bits+0x32>
 8007a54:	3008      	adds	r0, #8
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	0719      	lsls	r1, r3, #28
 8007a5a:	bf04      	itt	eq
 8007a5c:	091b      	lsreq	r3, r3, #4
 8007a5e:	3004      	addeq	r0, #4
 8007a60:	0799      	lsls	r1, r3, #30
 8007a62:	bf04      	itt	eq
 8007a64:	089b      	lsreq	r3, r3, #2
 8007a66:	3002      	addeq	r0, #2
 8007a68:	07d9      	lsls	r1, r3, #31
 8007a6a:	d403      	bmi.n	8007a74 <__lo0bits+0x4e>
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	f100 0001 	add.w	r0, r0, #1
 8007a72:	d003      	beq.n	8007a7c <__lo0bits+0x56>
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	4770      	bx	lr
 8007a78:	2000      	movs	r0, #0
 8007a7a:	4770      	bx	lr
 8007a7c:	2020      	movs	r0, #32
 8007a7e:	4770      	bx	lr

08007a80 <__i2b>:
 8007a80:	b510      	push	{r4, lr}
 8007a82:	460c      	mov	r4, r1
 8007a84:	2101      	movs	r1, #1
 8007a86:	f7ff ff07 	bl	8007898 <_Balloc>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	b928      	cbnz	r0, 8007a9a <__i2b+0x1a>
 8007a8e:	4b05      	ldr	r3, [pc, #20]	@ (8007aa4 <__i2b+0x24>)
 8007a90:	4805      	ldr	r0, [pc, #20]	@ (8007aa8 <__i2b+0x28>)
 8007a92:	f240 1145 	movw	r1, #325	@ 0x145
 8007a96:	f000 fc95 	bl	80083c4 <__assert_func>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	6144      	str	r4, [r0, #20]
 8007a9e:	6103      	str	r3, [r0, #16]
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	08009368 	.word	0x08009368
 8007aa8:	08009379 	.word	0x08009379

08007aac <__multiply>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	690a      	ldr	r2, [r1, #16]
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	bfa8      	it	ge
 8007aba:	4623      	movge	r3, r4
 8007abc:	460f      	mov	r7, r1
 8007abe:	bfa4      	itt	ge
 8007ac0:	460c      	movge	r4, r1
 8007ac2:	461f      	movge	r7, r3
 8007ac4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ac8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007acc:	68a3      	ldr	r3, [r4, #8]
 8007ace:	6861      	ldr	r1, [r4, #4]
 8007ad0:	eb0a 0609 	add.w	r6, sl, r9
 8007ad4:	42b3      	cmp	r3, r6
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	bfb8      	it	lt
 8007ada:	3101      	addlt	r1, #1
 8007adc:	f7ff fedc 	bl	8007898 <_Balloc>
 8007ae0:	b930      	cbnz	r0, 8007af0 <__multiply+0x44>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b44      	ldr	r3, [pc, #272]	@ (8007bf8 <__multiply+0x14c>)
 8007ae6:	4845      	ldr	r0, [pc, #276]	@ (8007bfc <__multiply+0x150>)
 8007ae8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007aec:	f000 fc6a 	bl	80083c4 <__assert_func>
 8007af0:	f100 0514 	add.w	r5, r0, #20
 8007af4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007af8:	462b      	mov	r3, r5
 8007afa:	2200      	movs	r2, #0
 8007afc:	4543      	cmp	r3, r8
 8007afe:	d321      	bcc.n	8007b44 <__multiply+0x98>
 8007b00:	f107 0114 	add.w	r1, r7, #20
 8007b04:	f104 0214 	add.w	r2, r4, #20
 8007b08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b10:	9302      	str	r3, [sp, #8]
 8007b12:	1b13      	subs	r3, r2, r4
 8007b14:	3b15      	subs	r3, #21
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	f104 0715 	add.w	r7, r4, #21
 8007b20:	42ba      	cmp	r2, r7
 8007b22:	bf38      	it	cc
 8007b24:	2304      	movcc	r3, #4
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	d80c      	bhi.n	8007b4a <__multiply+0x9e>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	dd03      	ble.n	8007b3c <__multiply+0x90>
 8007b34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d05b      	beq.n	8007bf4 <__multiply+0x148>
 8007b3c:	6106      	str	r6, [r0, #16]
 8007b3e:	b005      	add	sp, #20
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	f843 2b04 	str.w	r2, [r3], #4
 8007b48:	e7d8      	b.n	8007afc <__multiply+0x50>
 8007b4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b4e:	f1ba 0f00 	cmp.w	sl, #0
 8007b52:	d024      	beq.n	8007b9e <__multiply+0xf2>
 8007b54:	f104 0e14 	add.w	lr, r4, #20
 8007b58:	46a9      	mov	r9, r5
 8007b5a:	f04f 0c00 	mov.w	ip, #0
 8007b5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b62:	f8d9 3000 	ldr.w	r3, [r9]
 8007b66:	fa1f fb87 	uxth.w	fp, r7
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b74:	f8d9 7000 	ldr.w	r7, [r9]
 8007b78:	4463      	add	r3, ip
 8007b7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b8c:	4572      	cmp	r2, lr
 8007b8e:	f849 3b04 	str.w	r3, [r9], #4
 8007b92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b96:	d8e2      	bhi.n	8007b5e <__multiply+0xb2>
 8007b98:	9b01      	ldr	r3, [sp, #4]
 8007b9a:	f845 c003 	str.w	ip, [r5, r3]
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ba4:	3104      	adds	r1, #4
 8007ba6:	f1b9 0f00 	cmp.w	r9, #0
 8007baa:	d021      	beq.n	8007bf0 <__multiply+0x144>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	f104 0c14 	add.w	ip, r4, #20
 8007bb2:	46ae      	mov	lr, r5
 8007bb4:	f04f 0a00 	mov.w	sl, #0
 8007bb8:	f8bc b000 	ldrh.w	fp, [ip]
 8007bbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007bc0:	fb09 770b 	mla	r7, r9, fp, r7
 8007bc4:	4457      	add	r7, sl
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bcc:	f84e 3b04 	str.w	r3, [lr], #4
 8007bd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd8:	f8be 3000 	ldrh.w	r3, [lr]
 8007bdc:	fb09 330a 	mla	r3, r9, sl, r3
 8007be0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007be4:	4562      	cmp	r2, ip
 8007be6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bea:	d8e5      	bhi.n	8007bb8 <__multiply+0x10c>
 8007bec:	9f01      	ldr	r7, [sp, #4]
 8007bee:	51eb      	str	r3, [r5, r7]
 8007bf0:	3504      	adds	r5, #4
 8007bf2:	e799      	b.n	8007b28 <__multiply+0x7c>
 8007bf4:	3e01      	subs	r6, #1
 8007bf6:	e79b      	b.n	8007b30 <__multiply+0x84>
 8007bf8:	08009368 	.word	0x08009368
 8007bfc:	08009379 	.word	0x08009379

08007c00 <__pow5mult>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	4615      	mov	r5, r2
 8007c06:	f012 0203 	ands.w	r2, r2, #3
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	460e      	mov	r6, r1
 8007c0e:	d007      	beq.n	8007c20 <__pow5mult+0x20>
 8007c10:	4c25      	ldr	r4, [pc, #148]	@ (8007ca8 <__pow5mult+0xa8>)
 8007c12:	3a01      	subs	r2, #1
 8007c14:	2300      	movs	r3, #0
 8007c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c1a:	f7ff fe9f 	bl	800795c <__multadd>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	10ad      	asrs	r5, r5, #2
 8007c22:	d03d      	beq.n	8007ca0 <__pow5mult+0xa0>
 8007c24:	69fc      	ldr	r4, [r7, #28]
 8007c26:	b97c      	cbnz	r4, 8007c48 <__pow5mult+0x48>
 8007c28:	2010      	movs	r0, #16
 8007c2a:	f7ff fd7f 	bl	800772c <malloc>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	61f8      	str	r0, [r7, #28]
 8007c32:	b928      	cbnz	r0, 8007c40 <__pow5mult+0x40>
 8007c34:	4b1d      	ldr	r3, [pc, #116]	@ (8007cac <__pow5mult+0xac>)
 8007c36:	481e      	ldr	r0, [pc, #120]	@ (8007cb0 <__pow5mult+0xb0>)
 8007c38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c3c:	f000 fbc2 	bl	80083c4 <__assert_func>
 8007c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c44:	6004      	str	r4, [r0, #0]
 8007c46:	60c4      	str	r4, [r0, #12]
 8007c48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c50:	b94c      	cbnz	r4, 8007c66 <__pow5mult+0x66>
 8007c52:	f240 2171 	movw	r1, #625	@ 0x271
 8007c56:	4638      	mov	r0, r7
 8007c58:	f7ff ff12 	bl	8007a80 <__i2b>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c62:	4604      	mov	r4, r0
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	f04f 0900 	mov.w	r9, #0
 8007c6a:	07eb      	lsls	r3, r5, #31
 8007c6c:	d50a      	bpl.n	8007c84 <__pow5mult+0x84>
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4622      	mov	r2, r4
 8007c72:	4638      	mov	r0, r7
 8007c74:	f7ff ff1a 	bl	8007aac <__multiply>
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f7ff fe4b 	bl	8007918 <_Bfree>
 8007c82:	4646      	mov	r6, r8
 8007c84:	106d      	asrs	r5, r5, #1
 8007c86:	d00b      	beq.n	8007ca0 <__pow5mult+0xa0>
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	b938      	cbnz	r0, 8007c9c <__pow5mult+0x9c>
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff ff0b 	bl	8007aac <__multiply>
 8007c96:	6020      	str	r0, [r4, #0]
 8007c98:	f8c0 9000 	str.w	r9, [r0]
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	e7e4      	b.n	8007c6a <__pow5mult+0x6a>
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	bf00      	nop
 8007ca8:	080093d4 	.word	0x080093d4
 8007cac:	080092f9 	.word	0x080092f9
 8007cb0:	08009379 	.word	0x08009379

08007cb4 <__lshift>:
 8007cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	6849      	ldr	r1, [r1, #4]
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cc2:	68a3      	ldr	r3, [r4, #8]
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	4691      	mov	r9, r2
 8007cc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ccc:	f108 0601 	add.w	r6, r8, #1
 8007cd0:	42b3      	cmp	r3, r6
 8007cd2:	db0b      	blt.n	8007cec <__lshift+0x38>
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	f7ff fddf 	bl	8007898 <_Balloc>
 8007cda:	4605      	mov	r5, r0
 8007cdc:	b948      	cbnz	r0, 8007cf2 <__lshift+0x3e>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	4b28      	ldr	r3, [pc, #160]	@ (8007d84 <__lshift+0xd0>)
 8007ce2:	4829      	ldr	r0, [pc, #164]	@ (8007d88 <__lshift+0xd4>)
 8007ce4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ce8:	f000 fb6c 	bl	80083c4 <__assert_func>
 8007cec:	3101      	adds	r1, #1
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__lshift+0x1c>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f100 0114 	add.w	r1, r0, #20
 8007cf8:	f100 0210 	add.w	r2, r0, #16
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	4553      	cmp	r3, sl
 8007d00:	db33      	blt.n	8007d6a <__lshift+0xb6>
 8007d02:	6920      	ldr	r0, [r4, #16]
 8007d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d08:	f104 0314 	add.w	r3, r4, #20
 8007d0c:	f019 091f 	ands.w	r9, r9, #31
 8007d10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d18:	d02b      	beq.n	8007d72 <__lshift+0xbe>
 8007d1a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d1e:	468a      	mov	sl, r1
 8007d20:	2200      	movs	r2, #0
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	fa00 f009 	lsl.w	r0, r0, r9
 8007d28:	4310      	orrs	r0, r2
 8007d2a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d32:	459c      	cmp	ip, r3
 8007d34:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d38:	d8f3      	bhi.n	8007d22 <__lshift+0x6e>
 8007d3a:	ebac 0304 	sub.w	r3, ip, r4
 8007d3e:	3b15      	subs	r3, #21
 8007d40:	f023 0303 	bic.w	r3, r3, #3
 8007d44:	3304      	adds	r3, #4
 8007d46:	f104 0015 	add.w	r0, r4, #21
 8007d4a:	4584      	cmp	ip, r0
 8007d4c:	bf38      	it	cc
 8007d4e:	2304      	movcc	r3, #4
 8007d50:	50ca      	str	r2, [r1, r3]
 8007d52:	b10a      	cbz	r2, 8007d58 <__lshift+0xa4>
 8007d54:	f108 0602 	add.w	r6, r8, #2
 8007d58:	3e01      	subs	r6, #1
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	612e      	str	r6, [r5, #16]
 8007d5e:	4621      	mov	r1, r4
 8007d60:	f7ff fdda 	bl	8007918 <_Bfree>
 8007d64:	4628      	mov	r0, r5
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d6e:	3301      	adds	r3, #1
 8007d70:	e7c5      	b.n	8007cfe <__lshift+0x4a>
 8007d72:	3904      	subs	r1, #4
 8007d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d7c:	459c      	cmp	ip, r3
 8007d7e:	d8f9      	bhi.n	8007d74 <__lshift+0xc0>
 8007d80:	e7ea      	b.n	8007d58 <__lshift+0xa4>
 8007d82:	bf00      	nop
 8007d84:	08009368 	.word	0x08009368
 8007d88:	08009379 	.word	0x08009379

08007d8c <__mcmp>:
 8007d8c:	690a      	ldr	r2, [r1, #16]
 8007d8e:	4603      	mov	r3, r0
 8007d90:	6900      	ldr	r0, [r0, #16]
 8007d92:	1a80      	subs	r0, r0, r2
 8007d94:	b530      	push	{r4, r5, lr}
 8007d96:	d10e      	bne.n	8007db6 <__mcmp+0x2a>
 8007d98:	3314      	adds	r3, #20
 8007d9a:	3114      	adds	r1, #20
 8007d9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007da0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007da4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007da8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dac:	4295      	cmp	r5, r2
 8007dae:	d003      	beq.n	8007db8 <__mcmp+0x2c>
 8007db0:	d205      	bcs.n	8007dbe <__mcmp+0x32>
 8007db2:	f04f 30ff 	mov.w	r0, #4294967295
 8007db6:	bd30      	pop	{r4, r5, pc}
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	d3f3      	bcc.n	8007da4 <__mcmp+0x18>
 8007dbc:	e7fb      	b.n	8007db6 <__mcmp+0x2a>
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e7f9      	b.n	8007db6 <__mcmp+0x2a>
	...

08007dc4 <__mdiff>:
 8007dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	4689      	mov	r9, r1
 8007dca:	4606      	mov	r6, r0
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4648      	mov	r0, r9
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	f7ff ffdb 	bl	8007d8c <__mcmp>
 8007dd6:	1e05      	subs	r5, r0, #0
 8007dd8:	d112      	bne.n	8007e00 <__mdiff+0x3c>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f7ff fd5b 	bl	8007898 <_Balloc>
 8007de2:	4602      	mov	r2, r0
 8007de4:	b928      	cbnz	r0, 8007df2 <__mdiff+0x2e>
 8007de6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ee4 <__mdiff+0x120>)
 8007de8:	f240 2137 	movw	r1, #567	@ 0x237
 8007dec:	483e      	ldr	r0, [pc, #248]	@ (8007ee8 <__mdiff+0x124>)
 8007dee:	f000 fae9 	bl	80083c4 <__assert_func>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007df8:	4610      	mov	r0, r2
 8007dfa:	b003      	add	sp, #12
 8007dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e00:	bfbc      	itt	lt
 8007e02:	464b      	movlt	r3, r9
 8007e04:	46a1      	movlt	r9, r4
 8007e06:	4630      	mov	r0, r6
 8007e08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e0c:	bfba      	itte	lt
 8007e0e:	461c      	movlt	r4, r3
 8007e10:	2501      	movlt	r5, #1
 8007e12:	2500      	movge	r5, #0
 8007e14:	f7ff fd40 	bl	8007898 <_Balloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	b918      	cbnz	r0, 8007e24 <__mdiff+0x60>
 8007e1c:	4b31      	ldr	r3, [pc, #196]	@ (8007ee4 <__mdiff+0x120>)
 8007e1e:	f240 2145 	movw	r1, #581	@ 0x245
 8007e22:	e7e3      	b.n	8007dec <__mdiff+0x28>
 8007e24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e28:	6926      	ldr	r6, [r4, #16]
 8007e2a:	60c5      	str	r5, [r0, #12]
 8007e2c:	f109 0310 	add.w	r3, r9, #16
 8007e30:	f109 0514 	add.w	r5, r9, #20
 8007e34:	f104 0e14 	add.w	lr, r4, #20
 8007e38:	f100 0b14 	add.w	fp, r0, #20
 8007e3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	46d9      	mov	r9, fp
 8007e48:	f04f 0c00 	mov.w	ip, #0
 8007e4c:	9b01      	ldr	r3, [sp, #4]
 8007e4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	fa1f f38a 	uxth.w	r3, sl
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	b283      	uxth	r3, r0
 8007e60:	1acb      	subs	r3, r1, r3
 8007e62:	0c00      	lsrs	r0, r0, #16
 8007e64:	4463      	add	r3, ip
 8007e66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e74:	4576      	cmp	r6, lr
 8007e76:	f849 3b04 	str.w	r3, [r9], #4
 8007e7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e7e:	d8e5      	bhi.n	8007e4c <__mdiff+0x88>
 8007e80:	1b33      	subs	r3, r6, r4
 8007e82:	3b15      	subs	r3, #21
 8007e84:	f023 0303 	bic.w	r3, r3, #3
 8007e88:	3415      	adds	r4, #21
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	42a6      	cmp	r6, r4
 8007e8e:	bf38      	it	cc
 8007e90:	2304      	movcc	r3, #4
 8007e92:	441d      	add	r5, r3
 8007e94:	445b      	add	r3, fp
 8007e96:	461e      	mov	r6, r3
 8007e98:	462c      	mov	r4, r5
 8007e9a:	4544      	cmp	r4, r8
 8007e9c:	d30e      	bcc.n	8007ebc <__mdiff+0xf8>
 8007e9e:	f108 0103 	add.w	r1, r8, #3
 8007ea2:	1b49      	subs	r1, r1, r5
 8007ea4:	f021 0103 	bic.w	r1, r1, #3
 8007ea8:	3d03      	subs	r5, #3
 8007eaa:	45a8      	cmp	r8, r5
 8007eac:	bf38      	it	cc
 8007eae:	2100      	movcc	r1, #0
 8007eb0:	440b      	add	r3, r1
 8007eb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eb6:	b191      	cbz	r1, 8007ede <__mdiff+0x11a>
 8007eb8:	6117      	str	r7, [r2, #16]
 8007eba:	e79d      	b.n	8007df8 <__mdiff+0x34>
 8007ebc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ec0:	46e6      	mov	lr, ip
 8007ec2:	0c08      	lsrs	r0, r1, #16
 8007ec4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ec8:	4471      	add	r1, lr
 8007eca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ece:	b289      	uxth	r1, r1
 8007ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ed4:	f846 1b04 	str.w	r1, [r6], #4
 8007ed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007edc:	e7dd      	b.n	8007e9a <__mdiff+0xd6>
 8007ede:	3f01      	subs	r7, #1
 8007ee0:	e7e7      	b.n	8007eb2 <__mdiff+0xee>
 8007ee2:	bf00      	nop
 8007ee4:	08009368 	.word	0x08009368
 8007ee8:	08009379 	.word	0x08009379

08007eec <__d2b>:
 8007eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	ec59 8b10 	vmov	r8, r9, d0
 8007ef8:	4616      	mov	r6, r2
 8007efa:	f7ff fccd 	bl	8007898 <_Balloc>
 8007efe:	4604      	mov	r4, r0
 8007f00:	b930      	cbnz	r0, 8007f10 <__d2b+0x24>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b23      	ldr	r3, [pc, #140]	@ (8007f94 <__d2b+0xa8>)
 8007f06:	4824      	ldr	r0, [pc, #144]	@ (8007f98 <__d2b+0xac>)
 8007f08:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f0c:	f000 fa5a 	bl	80083c4 <__assert_func>
 8007f10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f18:	b10d      	cbz	r5, 8007f1e <__d2b+0x32>
 8007f1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	f1b8 0300 	subs.w	r3, r8, #0
 8007f24:	d023      	beq.n	8007f6e <__d2b+0x82>
 8007f26:	4668      	mov	r0, sp
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	f7ff fd7c 	bl	8007a26 <__lo0bits>
 8007f2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f32:	b1d0      	cbz	r0, 8007f6a <__d2b+0x7e>
 8007f34:	f1c0 0320 	rsb	r3, r0, #32
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	40c2      	lsrs	r2, r0
 8007f40:	6163      	str	r3, [r4, #20]
 8007f42:	9201      	str	r2, [sp, #4]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	61a3      	str	r3, [r4, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2201      	moveq	r2, #1
 8007f4e:	2202      	movne	r2, #2
 8007f50:	6122      	str	r2, [r4, #16]
 8007f52:	b1a5      	cbz	r5, 8007f7e <__d2b+0x92>
 8007f54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f58:	4405      	add	r5, r0
 8007f5a:	603d      	str	r5, [r7, #0]
 8007f5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f60:	6030      	str	r0, [r6, #0]
 8007f62:	4620      	mov	r0, r4
 8007f64:	b003      	add	sp, #12
 8007f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	6161      	str	r1, [r4, #20]
 8007f6c:	e7ea      	b.n	8007f44 <__d2b+0x58>
 8007f6e:	a801      	add	r0, sp, #4
 8007f70:	f7ff fd59 	bl	8007a26 <__lo0bits>
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	6163      	str	r3, [r4, #20]
 8007f78:	3020      	adds	r0, #32
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	e7e8      	b.n	8007f50 <__d2b+0x64>
 8007f7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f86:	6038      	str	r0, [r7, #0]
 8007f88:	6918      	ldr	r0, [r3, #16]
 8007f8a:	f7ff fd2d 	bl	80079e8 <__hi0bits>
 8007f8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f92:	e7e5      	b.n	8007f60 <__d2b+0x74>
 8007f94:	08009368 	.word	0x08009368
 8007f98:	08009379 	.word	0x08009379

08007f9c <__ssputs_r>:
 8007f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	688e      	ldr	r6, [r1, #8]
 8007fa2:	461f      	mov	r7, r3
 8007fa4:	42be      	cmp	r6, r7
 8007fa6:	680b      	ldr	r3, [r1, #0]
 8007fa8:	4682      	mov	sl, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4690      	mov	r8, r2
 8007fae:	d82d      	bhi.n	800800c <__ssputs_r+0x70>
 8007fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fb8:	d026      	beq.n	8008008 <__ssputs_r+0x6c>
 8007fba:	6965      	ldr	r5, [r4, #20]
 8007fbc:	6909      	ldr	r1, [r1, #16]
 8007fbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fc2:	eba3 0901 	sub.w	r9, r3, r1
 8007fc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fca:	1c7b      	adds	r3, r7, #1
 8007fcc:	444b      	add	r3, r9
 8007fce:	106d      	asrs	r5, r5, #1
 8007fd0:	429d      	cmp	r5, r3
 8007fd2:	bf38      	it	cc
 8007fd4:	461d      	movcc	r5, r3
 8007fd6:	0553      	lsls	r3, r2, #21
 8007fd8:	d527      	bpl.n	800802a <__ssputs_r+0x8e>
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f7ff fbd0 	bl	8007780 <_malloc_r>
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	b360      	cbz	r0, 800803e <__ssputs_r+0xa2>
 8007fe4:	6921      	ldr	r1, [r4, #16]
 8007fe6:	464a      	mov	r2, r9
 8007fe8:	f7fe fcfb 	bl	80069e2 <memcpy>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	6126      	str	r6, [r4, #16]
 8007ffa:	6165      	str	r5, [r4, #20]
 8007ffc:	444e      	add	r6, r9
 8007ffe:	eba5 0509 	sub.w	r5, r5, r9
 8008002:	6026      	str	r6, [r4, #0]
 8008004:	60a5      	str	r5, [r4, #8]
 8008006:	463e      	mov	r6, r7
 8008008:	42be      	cmp	r6, r7
 800800a:	d900      	bls.n	800800e <__ssputs_r+0x72>
 800800c:	463e      	mov	r6, r7
 800800e:	6820      	ldr	r0, [r4, #0]
 8008010:	4632      	mov	r2, r6
 8008012:	4641      	mov	r1, r8
 8008014:	f7fe fc4b 	bl	80068ae <memmove>
 8008018:	68a3      	ldr	r3, [r4, #8]
 800801a:	1b9b      	subs	r3, r3, r6
 800801c:	60a3      	str	r3, [r4, #8]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	4433      	add	r3, r6
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802a:	462a      	mov	r2, r5
 800802c:	f000 fa0e 	bl	800844c <_realloc_r>
 8008030:	4606      	mov	r6, r0
 8008032:	2800      	cmp	r0, #0
 8008034:	d1e0      	bne.n	8007ff8 <__ssputs_r+0x5c>
 8008036:	6921      	ldr	r1, [r4, #16]
 8008038:	4650      	mov	r0, sl
 800803a:	f7ff fb2d 	bl	8007698 <_free_r>
 800803e:	230c      	movs	r3, #12
 8008040:	f8ca 3000 	str.w	r3, [sl]
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	e7e9      	b.n	8008026 <__ssputs_r+0x8a>
	...

08008054 <_svfiprintf_r>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	4698      	mov	r8, r3
 800805a:	898b      	ldrh	r3, [r1, #12]
 800805c:	061b      	lsls	r3, r3, #24
 800805e:	b09d      	sub	sp, #116	@ 0x74
 8008060:	4607      	mov	r7, r0
 8008062:	460d      	mov	r5, r1
 8008064:	4614      	mov	r4, r2
 8008066:	d510      	bpl.n	800808a <_svfiprintf_r+0x36>
 8008068:	690b      	ldr	r3, [r1, #16]
 800806a:	b973      	cbnz	r3, 800808a <_svfiprintf_r+0x36>
 800806c:	2140      	movs	r1, #64	@ 0x40
 800806e:	f7ff fb87 	bl	8007780 <_malloc_r>
 8008072:	6028      	str	r0, [r5, #0]
 8008074:	6128      	str	r0, [r5, #16]
 8008076:	b930      	cbnz	r0, 8008086 <_svfiprintf_r+0x32>
 8008078:	230c      	movs	r3, #12
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	b01d      	add	sp, #116	@ 0x74
 8008082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008086:	2340      	movs	r3, #64	@ 0x40
 8008088:	616b      	str	r3, [r5, #20]
 800808a:	2300      	movs	r3, #0
 800808c:	9309      	str	r3, [sp, #36]	@ 0x24
 800808e:	2320      	movs	r3, #32
 8008090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008094:	f8cd 800c 	str.w	r8, [sp, #12]
 8008098:	2330      	movs	r3, #48	@ 0x30
 800809a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008238 <_svfiprintf_r+0x1e4>
 800809e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080a2:	f04f 0901 	mov.w	r9, #1
 80080a6:	4623      	mov	r3, r4
 80080a8:	469a      	mov	sl, r3
 80080aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ae:	b10a      	cbz	r2, 80080b4 <_svfiprintf_r+0x60>
 80080b0:	2a25      	cmp	r2, #37	@ 0x25
 80080b2:	d1f9      	bne.n	80080a8 <_svfiprintf_r+0x54>
 80080b4:	ebba 0b04 	subs.w	fp, sl, r4
 80080b8:	d00b      	beq.n	80080d2 <_svfiprintf_r+0x7e>
 80080ba:	465b      	mov	r3, fp
 80080bc:	4622      	mov	r2, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7ff ff6b 	bl	8007f9c <__ssputs_r>
 80080c6:	3001      	adds	r0, #1
 80080c8:	f000 80a7 	beq.w	800821a <_svfiprintf_r+0x1c6>
 80080cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ce:	445a      	add	r2, fp
 80080d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80080d2:	f89a 3000 	ldrb.w	r3, [sl]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 809f 	beq.w	800821a <_svfiprintf_r+0x1c6>
 80080dc:	2300      	movs	r3, #0
 80080de:	f04f 32ff 	mov.w	r2, #4294967295
 80080e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e6:	f10a 0a01 	add.w	sl, sl, #1
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80080f4:	4654      	mov	r4, sl
 80080f6:	2205      	movs	r2, #5
 80080f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fc:	484e      	ldr	r0, [pc, #312]	@ (8008238 <_svfiprintf_r+0x1e4>)
 80080fe:	f7f8 f86f 	bl	80001e0 <memchr>
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	b9d8      	cbnz	r0, 800813e <_svfiprintf_r+0xea>
 8008106:	06d0      	lsls	r0, r2, #27
 8008108:	bf44      	itt	mi
 800810a:	2320      	movmi	r3, #32
 800810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008110:	0711      	lsls	r1, r2, #28
 8008112:	bf44      	itt	mi
 8008114:	232b      	movmi	r3, #43	@ 0x2b
 8008116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800811a:	f89a 3000 	ldrb.w	r3, [sl]
 800811e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008120:	d015      	beq.n	800814e <_svfiprintf_r+0xfa>
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	4654      	mov	r4, sl
 8008126:	2000      	movs	r0, #0
 8008128:	f04f 0c0a 	mov.w	ip, #10
 800812c:	4621      	mov	r1, r4
 800812e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008132:	3b30      	subs	r3, #48	@ 0x30
 8008134:	2b09      	cmp	r3, #9
 8008136:	d94b      	bls.n	80081d0 <_svfiprintf_r+0x17c>
 8008138:	b1b0      	cbz	r0, 8008168 <_svfiprintf_r+0x114>
 800813a:	9207      	str	r2, [sp, #28]
 800813c:	e014      	b.n	8008168 <_svfiprintf_r+0x114>
 800813e:	eba0 0308 	sub.w	r3, r0, r8
 8008142:	fa09 f303 	lsl.w	r3, r9, r3
 8008146:	4313      	orrs	r3, r2
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	46a2      	mov	sl, r4
 800814c:	e7d2      	b.n	80080f4 <_svfiprintf_r+0xa0>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	1d19      	adds	r1, r3, #4
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	9103      	str	r1, [sp, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfbb      	ittet	lt
 800815a:	425b      	neglt	r3, r3
 800815c:	f042 0202 	orrlt.w	r2, r2, #2
 8008160:	9307      	strge	r3, [sp, #28]
 8008162:	9307      	strlt	r3, [sp, #28]
 8008164:	bfb8      	it	lt
 8008166:	9204      	strlt	r2, [sp, #16]
 8008168:	7823      	ldrb	r3, [r4, #0]
 800816a:	2b2e      	cmp	r3, #46	@ 0x2e
 800816c:	d10a      	bne.n	8008184 <_svfiprintf_r+0x130>
 800816e:	7863      	ldrb	r3, [r4, #1]
 8008170:	2b2a      	cmp	r3, #42	@ 0x2a
 8008172:	d132      	bne.n	80081da <_svfiprintf_r+0x186>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	1d1a      	adds	r2, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	9203      	str	r2, [sp, #12]
 800817c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008180:	3402      	adds	r4, #2
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008248 <_svfiprintf_r+0x1f4>
 8008188:	7821      	ldrb	r1, [r4, #0]
 800818a:	2203      	movs	r2, #3
 800818c:	4650      	mov	r0, sl
 800818e:	f7f8 f827 	bl	80001e0 <memchr>
 8008192:	b138      	cbz	r0, 80081a4 <_svfiprintf_r+0x150>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	eba0 000a 	sub.w	r0, r0, sl
 800819a:	2240      	movs	r2, #64	@ 0x40
 800819c:	4082      	lsls	r2, r0
 800819e:	4313      	orrs	r3, r2
 80081a0:	3401      	adds	r4, #1
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	4824      	ldr	r0, [pc, #144]	@ (800823c <_svfiprintf_r+0x1e8>)
 80081aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ae:	2206      	movs	r2, #6
 80081b0:	f7f8 f816 	bl	80001e0 <memchr>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d036      	beq.n	8008226 <_svfiprintf_r+0x1d2>
 80081b8:	4b21      	ldr	r3, [pc, #132]	@ (8008240 <_svfiprintf_r+0x1ec>)
 80081ba:	bb1b      	cbnz	r3, 8008204 <_svfiprintf_r+0x1b0>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	3307      	adds	r3, #7
 80081c0:	f023 0307 	bic.w	r3, r3, #7
 80081c4:	3308      	adds	r3, #8
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ca:	4433      	add	r3, r6
 80081cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ce:	e76a      	b.n	80080a6 <_svfiprintf_r+0x52>
 80081d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d4:	460c      	mov	r4, r1
 80081d6:	2001      	movs	r0, #1
 80081d8:	e7a8      	b.n	800812c <_svfiprintf_r+0xd8>
 80081da:	2300      	movs	r3, #0
 80081dc:	3401      	adds	r4, #1
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	4619      	mov	r1, r3
 80081e2:	f04f 0c0a 	mov.w	ip, #10
 80081e6:	4620      	mov	r0, r4
 80081e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ec:	3a30      	subs	r2, #48	@ 0x30
 80081ee:	2a09      	cmp	r2, #9
 80081f0:	d903      	bls.n	80081fa <_svfiprintf_r+0x1a6>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0c6      	beq.n	8008184 <_svfiprintf_r+0x130>
 80081f6:	9105      	str	r1, [sp, #20]
 80081f8:	e7c4      	b.n	8008184 <_svfiprintf_r+0x130>
 80081fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80081fe:	4604      	mov	r4, r0
 8008200:	2301      	movs	r3, #1
 8008202:	e7f0      	b.n	80081e6 <_svfiprintf_r+0x192>
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	462a      	mov	r2, r5
 800820a:	4b0e      	ldr	r3, [pc, #56]	@ (8008244 <_svfiprintf_r+0x1f0>)
 800820c:	a904      	add	r1, sp, #16
 800820e:	4638      	mov	r0, r7
 8008210:	f7fd fe70 	bl	8005ef4 <_printf_float>
 8008214:	1c42      	adds	r2, r0, #1
 8008216:	4606      	mov	r6, r0
 8008218:	d1d6      	bne.n	80081c8 <_svfiprintf_r+0x174>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	065b      	lsls	r3, r3, #25
 800821e:	f53f af2d 	bmi.w	800807c <_svfiprintf_r+0x28>
 8008222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008224:	e72c      	b.n	8008080 <_svfiprintf_r+0x2c>
 8008226:	ab03      	add	r3, sp, #12
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	462a      	mov	r2, r5
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <_svfiprintf_r+0x1f0>)
 800822e:	a904      	add	r1, sp, #16
 8008230:	4638      	mov	r0, r7
 8008232:	f7fe f8f7 	bl	8006424 <_printf_i>
 8008236:	e7ed      	b.n	8008214 <_svfiprintf_r+0x1c0>
 8008238:	080094d0 	.word	0x080094d0
 800823c:	080094da 	.word	0x080094da
 8008240:	08005ef5 	.word	0x08005ef5
 8008244:	08007f9d 	.word	0x08007f9d
 8008248:	080094d6 	.word	0x080094d6

0800824c <__sflush_r>:
 800824c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	0716      	lsls	r6, r2, #28
 8008256:	4605      	mov	r5, r0
 8008258:	460c      	mov	r4, r1
 800825a:	d454      	bmi.n	8008306 <__sflush_r+0xba>
 800825c:	684b      	ldr	r3, [r1, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	dc02      	bgt.n	8008268 <__sflush_r+0x1c>
 8008262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	dd48      	ble.n	80082fa <__sflush_r+0xae>
 8008268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800826a:	2e00      	cmp	r6, #0
 800826c:	d045      	beq.n	80082fa <__sflush_r+0xae>
 800826e:	2300      	movs	r3, #0
 8008270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008274:	682f      	ldr	r7, [r5, #0]
 8008276:	6a21      	ldr	r1, [r4, #32]
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	d030      	beq.n	80082de <__sflush_r+0x92>
 800827c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	0759      	lsls	r1, r3, #29
 8008282:	d505      	bpl.n	8008290 <__sflush_r+0x44>
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	1ad2      	subs	r2, r2, r3
 8008288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800828a:	b10b      	cbz	r3, 8008290 <__sflush_r+0x44>
 800828c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800828e:	1ad2      	subs	r2, r2, r3
 8008290:	2300      	movs	r3, #0
 8008292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008294:	6a21      	ldr	r1, [r4, #32]
 8008296:	4628      	mov	r0, r5
 8008298:	47b0      	blx	r6
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	d106      	bne.n	80082ae <__sflush_r+0x62>
 80082a0:	6829      	ldr	r1, [r5, #0]
 80082a2:	291d      	cmp	r1, #29
 80082a4:	d82b      	bhi.n	80082fe <__sflush_r+0xb2>
 80082a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008350 <__sflush_r+0x104>)
 80082a8:	410a      	asrs	r2, r1
 80082aa:	07d6      	lsls	r6, r2, #31
 80082ac:	d427      	bmi.n	80082fe <__sflush_r+0xb2>
 80082ae:	2200      	movs	r2, #0
 80082b0:	6062      	str	r2, [r4, #4]
 80082b2:	04d9      	lsls	r1, r3, #19
 80082b4:	6922      	ldr	r2, [r4, #16]
 80082b6:	6022      	str	r2, [r4, #0]
 80082b8:	d504      	bpl.n	80082c4 <__sflush_r+0x78>
 80082ba:	1c42      	adds	r2, r0, #1
 80082bc:	d101      	bne.n	80082c2 <__sflush_r+0x76>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	b903      	cbnz	r3, 80082c4 <__sflush_r+0x78>
 80082c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80082c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082c6:	602f      	str	r7, [r5, #0]
 80082c8:	b1b9      	cbz	r1, 80082fa <__sflush_r+0xae>
 80082ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ce:	4299      	cmp	r1, r3
 80082d0:	d002      	beq.n	80082d8 <__sflush_r+0x8c>
 80082d2:	4628      	mov	r0, r5
 80082d4:	f7ff f9e0 	bl	8007698 <_free_r>
 80082d8:	2300      	movs	r3, #0
 80082da:	6363      	str	r3, [r4, #52]	@ 0x34
 80082dc:	e00d      	b.n	80082fa <__sflush_r+0xae>
 80082de:	2301      	movs	r3, #1
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b0      	blx	r6
 80082e4:	4602      	mov	r2, r0
 80082e6:	1c50      	adds	r0, r2, #1
 80082e8:	d1c9      	bne.n	800827e <__sflush_r+0x32>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0c6      	beq.n	800827e <__sflush_r+0x32>
 80082f0:	2b1d      	cmp	r3, #29
 80082f2:	d001      	beq.n	80082f8 <__sflush_r+0xac>
 80082f4:	2b16      	cmp	r3, #22
 80082f6:	d11e      	bne.n	8008336 <__sflush_r+0xea>
 80082f8:	602f      	str	r7, [r5, #0]
 80082fa:	2000      	movs	r0, #0
 80082fc:	e022      	b.n	8008344 <__sflush_r+0xf8>
 80082fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008302:	b21b      	sxth	r3, r3
 8008304:	e01b      	b.n	800833e <__sflush_r+0xf2>
 8008306:	690f      	ldr	r7, [r1, #16]
 8008308:	2f00      	cmp	r7, #0
 800830a:	d0f6      	beq.n	80082fa <__sflush_r+0xae>
 800830c:	0793      	lsls	r3, r2, #30
 800830e:	680e      	ldr	r6, [r1, #0]
 8008310:	bf08      	it	eq
 8008312:	694b      	ldreq	r3, [r1, #20]
 8008314:	600f      	str	r7, [r1, #0]
 8008316:	bf18      	it	ne
 8008318:	2300      	movne	r3, #0
 800831a:	eba6 0807 	sub.w	r8, r6, r7
 800831e:	608b      	str	r3, [r1, #8]
 8008320:	f1b8 0f00 	cmp.w	r8, #0
 8008324:	dde9      	ble.n	80082fa <__sflush_r+0xae>
 8008326:	6a21      	ldr	r1, [r4, #32]
 8008328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800832a:	4643      	mov	r3, r8
 800832c:	463a      	mov	r2, r7
 800832e:	4628      	mov	r0, r5
 8008330:	47b0      	blx	r6
 8008332:	2800      	cmp	r0, #0
 8008334:	dc08      	bgt.n	8008348 <__sflush_r+0xfc>
 8008336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008348:	4407      	add	r7, r0
 800834a:	eba8 0800 	sub.w	r8, r8, r0
 800834e:	e7e7      	b.n	8008320 <__sflush_r+0xd4>
 8008350:	dfbffffe 	.word	0xdfbffffe

08008354 <_fflush_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	690b      	ldr	r3, [r1, #16]
 8008358:	4605      	mov	r5, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b913      	cbnz	r3, 8008364 <_fflush_r+0x10>
 800835e:	2500      	movs	r5, #0
 8008360:	4628      	mov	r0, r5
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	b118      	cbz	r0, 800836e <_fflush_r+0x1a>
 8008366:	6a03      	ldr	r3, [r0, #32]
 8008368:	b90b      	cbnz	r3, 800836e <_fflush_r+0x1a>
 800836a:	f7fe fa07 	bl	800677c <__sinit>
 800836e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f3      	beq.n	800835e <_fflush_r+0xa>
 8008376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008378:	07d0      	lsls	r0, r2, #31
 800837a:	d404      	bmi.n	8008386 <_fflush_r+0x32>
 800837c:	0599      	lsls	r1, r3, #22
 800837e:	d402      	bmi.n	8008386 <_fflush_r+0x32>
 8008380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008382:	f7fe fb2c 	bl	80069de <__retarget_lock_acquire_recursive>
 8008386:	4628      	mov	r0, r5
 8008388:	4621      	mov	r1, r4
 800838a:	f7ff ff5f 	bl	800824c <__sflush_r>
 800838e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008390:	07da      	lsls	r2, r3, #31
 8008392:	4605      	mov	r5, r0
 8008394:	d4e4      	bmi.n	8008360 <_fflush_r+0xc>
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	059b      	lsls	r3, r3, #22
 800839a:	d4e1      	bmi.n	8008360 <_fflush_r+0xc>
 800839c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800839e:	f7fe fb1f 	bl	80069e0 <__retarget_lock_release_recursive>
 80083a2:	e7dd      	b.n	8008360 <_fflush_r+0xc>

080083a4 <_sbrk_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d06      	ldr	r5, [pc, #24]	@ (80083c0 <_sbrk_r+0x1c>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	602b      	str	r3, [r5, #0]
 80083b0:	f7f9 fe64 	bl	800207c <_sbrk>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_sbrk_r+0x1a>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_sbrk_r+0x1a>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	20000990 	.word	0x20000990

080083c4 <__assert_func>:
 80083c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083c6:	4614      	mov	r4, r2
 80083c8:	461a      	mov	r2, r3
 80083ca:	4b09      	ldr	r3, [pc, #36]	@ (80083f0 <__assert_func+0x2c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4605      	mov	r5, r0
 80083d0:	68d8      	ldr	r0, [r3, #12]
 80083d2:	b954      	cbnz	r4, 80083ea <__assert_func+0x26>
 80083d4:	4b07      	ldr	r3, [pc, #28]	@ (80083f4 <__assert_func+0x30>)
 80083d6:	461c      	mov	r4, r3
 80083d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083dc:	9100      	str	r1, [sp, #0]
 80083de:	462b      	mov	r3, r5
 80083e0:	4905      	ldr	r1, [pc, #20]	@ (80083f8 <__assert_func+0x34>)
 80083e2:	f000 f86f 	bl	80084c4 <fiprintf>
 80083e6:	f000 f87f 	bl	80084e8 <abort>
 80083ea:	4b04      	ldr	r3, [pc, #16]	@ (80083fc <__assert_func+0x38>)
 80083ec:	e7f4      	b.n	80083d8 <__assert_func+0x14>
 80083ee:	bf00      	nop
 80083f0:	20000020 	.word	0x20000020
 80083f4:	08009526 	.word	0x08009526
 80083f8:	080094f8 	.word	0x080094f8
 80083fc:	080094eb 	.word	0x080094eb

08008400 <_calloc_r>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	fba1 5402 	umull	r5, r4, r1, r2
 8008406:	b93c      	cbnz	r4, 8008418 <_calloc_r+0x18>
 8008408:	4629      	mov	r1, r5
 800840a:	f7ff f9b9 	bl	8007780 <_malloc_r>
 800840e:	4606      	mov	r6, r0
 8008410:	b928      	cbnz	r0, 800841e <_calloc_r+0x1e>
 8008412:	2600      	movs	r6, #0
 8008414:	4630      	mov	r0, r6
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	220c      	movs	r2, #12
 800841a:	6002      	str	r2, [r0, #0]
 800841c:	e7f9      	b.n	8008412 <_calloc_r+0x12>
 800841e:	462a      	mov	r2, r5
 8008420:	4621      	mov	r1, r4
 8008422:	f7fe fa5e 	bl	80068e2 <memset>
 8008426:	e7f5      	b.n	8008414 <_calloc_r+0x14>

08008428 <__ascii_mbtowc>:
 8008428:	b082      	sub	sp, #8
 800842a:	b901      	cbnz	r1, 800842e <__ascii_mbtowc+0x6>
 800842c:	a901      	add	r1, sp, #4
 800842e:	b142      	cbz	r2, 8008442 <__ascii_mbtowc+0x1a>
 8008430:	b14b      	cbz	r3, 8008446 <__ascii_mbtowc+0x1e>
 8008432:	7813      	ldrb	r3, [r2, #0]
 8008434:	600b      	str	r3, [r1, #0]
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	1e10      	subs	r0, r2, #0
 800843a:	bf18      	it	ne
 800843c:	2001      	movne	r0, #1
 800843e:	b002      	add	sp, #8
 8008440:	4770      	bx	lr
 8008442:	4610      	mov	r0, r2
 8008444:	e7fb      	b.n	800843e <__ascii_mbtowc+0x16>
 8008446:	f06f 0001 	mvn.w	r0, #1
 800844a:	e7f8      	b.n	800843e <__ascii_mbtowc+0x16>

0800844c <_realloc_r>:
 800844c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008450:	4680      	mov	r8, r0
 8008452:	4615      	mov	r5, r2
 8008454:	460c      	mov	r4, r1
 8008456:	b921      	cbnz	r1, 8008462 <_realloc_r+0x16>
 8008458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845c:	4611      	mov	r1, r2
 800845e:	f7ff b98f 	b.w	8007780 <_malloc_r>
 8008462:	b92a      	cbnz	r2, 8008470 <_realloc_r+0x24>
 8008464:	f7ff f918 	bl	8007698 <_free_r>
 8008468:	2400      	movs	r4, #0
 800846a:	4620      	mov	r0, r4
 800846c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008470:	f000 f841 	bl	80084f6 <_malloc_usable_size_r>
 8008474:	4285      	cmp	r5, r0
 8008476:	4606      	mov	r6, r0
 8008478:	d802      	bhi.n	8008480 <_realloc_r+0x34>
 800847a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800847e:	d8f4      	bhi.n	800846a <_realloc_r+0x1e>
 8008480:	4629      	mov	r1, r5
 8008482:	4640      	mov	r0, r8
 8008484:	f7ff f97c 	bl	8007780 <_malloc_r>
 8008488:	4607      	mov	r7, r0
 800848a:	2800      	cmp	r0, #0
 800848c:	d0ec      	beq.n	8008468 <_realloc_r+0x1c>
 800848e:	42b5      	cmp	r5, r6
 8008490:	462a      	mov	r2, r5
 8008492:	4621      	mov	r1, r4
 8008494:	bf28      	it	cs
 8008496:	4632      	movcs	r2, r6
 8008498:	f7fe faa3 	bl	80069e2 <memcpy>
 800849c:	4621      	mov	r1, r4
 800849e:	4640      	mov	r0, r8
 80084a0:	f7ff f8fa 	bl	8007698 <_free_r>
 80084a4:	463c      	mov	r4, r7
 80084a6:	e7e0      	b.n	800846a <_realloc_r+0x1e>

080084a8 <__ascii_wctomb>:
 80084a8:	4603      	mov	r3, r0
 80084aa:	4608      	mov	r0, r1
 80084ac:	b141      	cbz	r1, 80084c0 <__ascii_wctomb+0x18>
 80084ae:	2aff      	cmp	r2, #255	@ 0xff
 80084b0:	d904      	bls.n	80084bc <__ascii_wctomb+0x14>
 80084b2:	228a      	movs	r2, #138	@ 0x8a
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ba:	4770      	bx	lr
 80084bc:	700a      	strb	r2, [r1, #0]
 80084be:	2001      	movs	r0, #1
 80084c0:	4770      	bx	lr
	...

080084c4 <fiprintf>:
 80084c4:	b40e      	push	{r1, r2, r3}
 80084c6:	b503      	push	{r0, r1, lr}
 80084c8:	4601      	mov	r1, r0
 80084ca:	ab03      	add	r3, sp, #12
 80084cc:	4805      	ldr	r0, [pc, #20]	@ (80084e4 <fiprintf+0x20>)
 80084ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d2:	6800      	ldr	r0, [r0, #0]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	f000 f83f 	bl	8008558 <_vfiprintf_r>
 80084da:	b002      	add	sp, #8
 80084dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e0:	b003      	add	sp, #12
 80084e2:	4770      	bx	lr
 80084e4:	20000020 	.word	0x20000020

080084e8 <abort>:
 80084e8:	b508      	push	{r3, lr}
 80084ea:	2006      	movs	r0, #6
 80084ec:	f000 fa08 	bl	8008900 <raise>
 80084f0:	2001      	movs	r0, #1
 80084f2:	f7f9 fd4b 	bl	8001f8c <_exit>

080084f6 <_malloc_usable_size_r>:
 80084f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fa:	1f18      	subs	r0, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bfbc      	itt	lt
 8008500:	580b      	ldrlt	r3, [r1, r0]
 8008502:	18c0      	addlt	r0, r0, r3
 8008504:	4770      	bx	lr

08008506 <__sfputc_r>:
 8008506:	6893      	ldr	r3, [r2, #8]
 8008508:	3b01      	subs	r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	b410      	push	{r4}
 800850e:	6093      	str	r3, [r2, #8]
 8008510:	da08      	bge.n	8008524 <__sfputc_r+0x1e>
 8008512:	6994      	ldr	r4, [r2, #24]
 8008514:	42a3      	cmp	r3, r4
 8008516:	db01      	blt.n	800851c <__sfputc_r+0x16>
 8008518:	290a      	cmp	r1, #10
 800851a:	d103      	bne.n	8008524 <__sfputc_r+0x1e>
 800851c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008520:	f000 b932 	b.w	8008788 <__swbuf_r>
 8008524:	6813      	ldr	r3, [r2, #0]
 8008526:	1c58      	adds	r0, r3, #1
 8008528:	6010      	str	r0, [r2, #0]
 800852a:	7019      	strb	r1, [r3, #0]
 800852c:	4608      	mov	r0, r1
 800852e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008532:	4770      	bx	lr

08008534 <__sfputs_r>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	4606      	mov	r6, r0
 8008538:	460f      	mov	r7, r1
 800853a:	4614      	mov	r4, r2
 800853c:	18d5      	adds	r5, r2, r3
 800853e:	42ac      	cmp	r4, r5
 8008540:	d101      	bne.n	8008546 <__sfputs_r+0x12>
 8008542:	2000      	movs	r0, #0
 8008544:	e007      	b.n	8008556 <__sfputs_r+0x22>
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	463a      	mov	r2, r7
 800854c:	4630      	mov	r0, r6
 800854e:	f7ff ffda 	bl	8008506 <__sfputc_r>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	d1f3      	bne.n	800853e <__sfputs_r+0xa>
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008558 <_vfiprintf_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	460d      	mov	r5, r1
 800855e:	b09d      	sub	sp, #116	@ 0x74
 8008560:	4614      	mov	r4, r2
 8008562:	4698      	mov	r8, r3
 8008564:	4606      	mov	r6, r0
 8008566:	b118      	cbz	r0, 8008570 <_vfiprintf_r+0x18>
 8008568:	6a03      	ldr	r3, [r0, #32]
 800856a:	b90b      	cbnz	r3, 8008570 <_vfiprintf_r+0x18>
 800856c:	f7fe f906 	bl	800677c <__sinit>
 8008570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008572:	07d9      	lsls	r1, r3, #31
 8008574:	d405      	bmi.n	8008582 <_vfiprintf_r+0x2a>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	059a      	lsls	r2, r3, #22
 800857a:	d402      	bmi.n	8008582 <_vfiprintf_r+0x2a>
 800857c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857e:	f7fe fa2e 	bl	80069de <__retarget_lock_acquire_recursive>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	071b      	lsls	r3, r3, #28
 8008586:	d501      	bpl.n	800858c <_vfiprintf_r+0x34>
 8008588:	692b      	ldr	r3, [r5, #16]
 800858a:	b99b      	cbnz	r3, 80085b4 <_vfiprintf_r+0x5c>
 800858c:	4629      	mov	r1, r5
 800858e:	4630      	mov	r0, r6
 8008590:	f000 f938 	bl	8008804 <__swsetup_r>
 8008594:	b170      	cbz	r0, 80085b4 <_vfiprintf_r+0x5c>
 8008596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008598:	07dc      	lsls	r4, r3, #31
 800859a:	d504      	bpl.n	80085a6 <_vfiprintf_r+0x4e>
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	b01d      	add	sp, #116	@ 0x74
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	89ab      	ldrh	r3, [r5, #12]
 80085a8:	0598      	lsls	r0, r3, #22
 80085aa:	d4f7      	bmi.n	800859c <_vfiprintf_r+0x44>
 80085ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ae:	f7fe fa17 	bl	80069e0 <__retarget_lock_release_recursive>
 80085b2:	e7f3      	b.n	800859c <_vfiprintf_r+0x44>
 80085b4:	2300      	movs	r3, #0
 80085b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b8:	2320      	movs	r3, #32
 80085ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085be:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c2:	2330      	movs	r3, #48	@ 0x30
 80085c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008774 <_vfiprintf_r+0x21c>
 80085c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085cc:	f04f 0901 	mov.w	r9, #1
 80085d0:	4623      	mov	r3, r4
 80085d2:	469a      	mov	sl, r3
 80085d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d8:	b10a      	cbz	r2, 80085de <_vfiprintf_r+0x86>
 80085da:	2a25      	cmp	r2, #37	@ 0x25
 80085dc:	d1f9      	bne.n	80085d2 <_vfiprintf_r+0x7a>
 80085de:	ebba 0b04 	subs.w	fp, sl, r4
 80085e2:	d00b      	beq.n	80085fc <_vfiprintf_r+0xa4>
 80085e4:	465b      	mov	r3, fp
 80085e6:	4622      	mov	r2, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff ffa2 	bl	8008534 <__sfputs_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	f000 80a7 	beq.w	8008744 <_vfiprintf_r+0x1ec>
 80085f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085f8:	445a      	add	r2, fp
 80085fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80085fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 809f 	beq.w	8008744 <_vfiprintf_r+0x1ec>
 8008606:	2300      	movs	r3, #0
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008610:	f10a 0a01 	add.w	sl, sl, #1
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800861c:	931a      	str	r3, [sp, #104]	@ 0x68
 800861e:	4654      	mov	r4, sl
 8008620:	2205      	movs	r2, #5
 8008622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008626:	4853      	ldr	r0, [pc, #332]	@ (8008774 <_vfiprintf_r+0x21c>)
 8008628:	f7f7 fdda 	bl	80001e0 <memchr>
 800862c:	9a04      	ldr	r2, [sp, #16]
 800862e:	b9d8      	cbnz	r0, 8008668 <_vfiprintf_r+0x110>
 8008630:	06d1      	lsls	r1, r2, #27
 8008632:	bf44      	itt	mi
 8008634:	2320      	movmi	r3, #32
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800863a:	0713      	lsls	r3, r2, #28
 800863c:	bf44      	itt	mi
 800863e:	232b      	movmi	r3, #43	@ 0x2b
 8008640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008644:	f89a 3000 	ldrb.w	r3, [sl]
 8008648:	2b2a      	cmp	r3, #42	@ 0x2a
 800864a:	d015      	beq.n	8008678 <_vfiprintf_r+0x120>
 800864c:	9a07      	ldr	r2, [sp, #28]
 800864e:	4654      	mov	r4, sl
 8008650:	2000      	movs	r0, #0
 8008652:	f04f 0c0a 	mov.w	ip, #10
 8008656:	4621      	mov	r1, r4
 8008658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865c:	3b30      	subs	r3, #48	@ 0x30
 800865e:	2b09      	cmp	r3, #9
 8008660:	d94b      	bls.n	80086fa <_vfiprintf_r+0x1a2>
 8008662:	b1b0      	cbz	r0, 8008692 <_vfiprintf_r+0x13a>
 8008664:	9207      	str	r2, [sp, #28]
 8008666:	e014      	b.n	8008692 <_vfiprintf_r+0x13a>
 8008668:	eba0 0308 	sub.w	r3, r0, r8
 800866c:	fa09 f303 	lsl.w	r3, r9, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	46a2      	mov	sl, r4
 8008676:	e7d2      	b.n	800861e <_vfiprintf_r+0xc6>
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	1d19      	adds	r1, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	9103      	str	r1, [sp, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfbb      	ittet	lt
 8008684:	425b      	neglt	r3, r3
 8008686:	f042 0202 	orrlt.w	r2, r2, #2
 800868a:	9307      	strge	r3, [sp, #28]
 800868c:	9307      	strlt	r3, [sp, #28]
 800868e:	bfb8      	it	lt
 8008690:	9204      	strlt	r2, [sp, #16]
 8008692:	7823      	ldrb	r3, [r4, #0]
 8008694:	2b2e      	cmp	r3, #46	@ 0x2e
 8008696:	d10a      	bne.n	80086ae <_vfiprintf_r+0x156>
 8008698:	7863      	ldrb	r3, [r4, #1]
 800869a:	2b2a      	cmp	r3, #42	@ 0x2a
 800869c:	d132      	bne.n	8008704 <_vfiprintf_r+0x1ac>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	9203      	str	r2, [sp, #12]
 80086a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086aa:	3402      	adds	r4, #2
 80086ac:	9305      	str	r3, [sp, #20]
 80086ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008784 <_vfiprintf_r+0x22c>
 80086b2:	7821      	ldrb	r1, [r4, #0]
 80086b4:	2203      	movs	r2, #3
 80086b6:	4650      	mov	r0, sl
 80086b8:	f7f7 fd92 	bl	80001e0 <memchr>
 80086bc:	b138      	cbz	r0, 80086ce <_vfiprintf_r+0x176>
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	eba0 000a 	sub.w	r0, r0, sl
 80086c4:	2240      	movs	r2, #64	@ 0x40
 80086c6:	4082      	lsls	r2, r0
 80086c8:	4313      	orrs	r3, r2
 80086ca:	3401      	adds	r4, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d2:	4829      	ldr	r0, [pc, #164]	@ (8008778 <_vfiprintf_r+0x220>)
 80086d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086d8:	2206      	movs	r2, #6
 80086da:	f7f7 fd81 	bl	80001e0 <memchr>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d03f      	beq.n	8008762 <_vfiprintf_r+0x20a>
 80086e2:	4b26      	ldr	r3, [pc, #152]	@ (800877c <_vfiprintf_r+0x224>)
 80086e4:	bb1b      	cbnz	r3, 800872e <_vfiprintf_r+0x1d6>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	3307      	adds	r3, #7
 80086ea:	f023 0307 	bic.w	r3, r3, #7
 80086ee:	3308      	adds	r3, #8
 80086f0:	9303      	str	r3, [sp, #12]
 80086f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f4:	443b      	add	r3, r7
 80086f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f8:	e76a      	b.n	80085d0 <_vfiprintf_r+0x78>
 80086fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fe:	460c      	mov	r4, r1
 8008700:	2001      	movs	r0, #1
 8008702:	e7a8      	b.n	8008656 <_vfiprintf_r+0xfe>
 8008704:	2300      	movs	r3, #0
 8008706:	3401      	adds	r4, #1
 8008708:	9305      	str	r3, [sp, #20]
 800870a:	4619      	mov	r1, r3
 800870c:	f04f 0c0a 	mov.w	ip, #10
 8008710:	4620      	mov	r0, r4
 8008712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008716:	3a30      	subs	r2, #48	@ 0x30
 8008718:	2a09      	cmp	r2, #9
 800871a:	d903      	bls.n	8008724 <_vfiprintf_r+0x1cc>
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0c6      	beq.n	80086ae <_vfiprintf_r+0x156>
 8008720:	9105      	str	r1, [sp, #20]
 8008722:	e7c4      	b.n	80086ae <_vfiprintf_r+0x156>
 8008724:	fb0c 2101 	mla	r1, ip, r1, r2
 8008728:	4604      	mov	r4, r0
 800872a:	2301      	movs	r3, #1
 800872c:	e7f0      	b.n	8008710 <_vfiprintf_r+0x1b8>
 800872e:	ab03      	add	r3, sp, #12
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	462a      	mov	r2, r5
 8008734:	4b12      	ldr	r3, [pc, #72]	@ (8008780 <_vfiprintf_r+0x228>)
 8008736:	a904      	add	r1, sp, #16
 8008738:	4630      	mov	r0, r6
 800873a:	f7fd fbdb 	bl	8005ef4 <_printf_float>
 800873e:	4607      	mov	r7, r0
 8008740:	1c78      	adds	r0, r7, #1
 8008742:	d1d6      	bne.n	80086f2 <_vfiprintf_r+0x19a>
 8008744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008746:	07d9      	lsls	r1, r3, #31
 8008748:	d405      	bmi.n	8008756 <_vfiprintf_r+0x1fe>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	059a      	lsls	r2, r3, #22
 800874e:	d402      	bmi.n	8008756 <_vfiprintf_r+0x1fe>
 8008750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008752:	f7fe f945 	bl	80069e0 <__retarget_lock_release_recursive>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	065b      	lsls	r3, r3, #25
 800875a:	f53f af1f 	bmi.w	800859c <_vfiprintf_r+0x44>
 800875e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008760:	e71e      	b.n	80085a0 <_vfiprintf_r+0x48>
 8008762:	ab03      	add	r3, sp, #12
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	462a      	mov	r2, r5
 8008768:	4b05      	ldr	r3, [pc, #20]	@ (8008780 <_vfiprintf_r+0x228>)
 800876a:	a904      	add	r1, sp, #16
 800876c:	4630      	mov	r0, r6
 800876e:	f7fd fe59 	bl	8006424 <_printf_i>
 8008772:	e7e4      	b.n	800873e <_vfiprintf_r+0x1e6>
 8008774:	080094d0 	.word	0x080094d0
 8008778:	080094da 	.word	0x080094da
 800877c:	08005ef5 	.word	0x08005ef5
 8008780:	08008535 	.word	0x08008535
 8008784:	080094d6 	.word	0x080094d6

08008788 <__swbuf_r>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	460e      	mov	r6, r1
 800878c:	4614      	mov	r4, r2
 800878e:	4605      	mov	r5, r0
 8008790:	b118      	cbz	r0, 800879a <__swbuf_r+0x12>
 8008792:	6a03      	ldr	r3, [r0, #32]
 8008794:	b90b      	cbnz	r3, 800879a <__swbuf_r+0x12>
 8008796:	f7fd fff1 	bl	800677c <__sinit>
 800879a:	69a3      	ldr	r3, [r4, #24]
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	071a      	lsls	r2, r3, #28
 80087a2:	d501      	bpl.n	80087a8 <__swbuf_r+0x20>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	b943      	cbnz	r3, 80087ba <__swbuf_r+0x32>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f82a 	bl	8008804 <__swsetup_r>
 80087b0:	b118      	cbz	r0, 80087ba <__swbuf_r+0x32>
 80087b2:	f04f 37ff 	mov.w	r7, #4294967295
 80087b6:	4638      	mov	r0, r7
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	1a98      	subs	r0, r3, r2
 80087c0:	6963      	ldr	r3, [r4, #20]
 80087c2:	b2f6      	uxtb	r6, r6
 80087c4:	4283      	cmp	r3, r0
 80087c6:	4637      	mov	r7, r6
 80087c8:	dc05      	bgt.n	80087d6 <__swbuf_r+0x4e>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7ff fdc1 	bl	8008354 <_fflush_r>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d1ed      	bne.n	80087b2 <__swbuf_r+0x2a>
 80087d6:	68a3      	ldr	r3, [r4, #8]
 80087d8:	3b01      	subs	r3, #1
 80087da:	60a3      	str	r3, [r4, #8]
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	701e      	strb	r6, [r3, #0]
 80087e4:	6962      	ldr	r2, [r4, #20]
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d004      	beq.n	80087f6 <__swbuf_r+0x6e>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	07db      	lsls	r3, r3, #31
 80087f0:	d5e1      	bpl.n	80087b6 <__swbuf_r+0x2e>
 80087f2:	2e0a      	cmp	r6, #10
 80087f4:	d1df      	bne.n	80087b6 <__swbuf_r+0x2e>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7ff fdab 	bl	8008354 <_fflush_r>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0d9      	beq.n	80087b6 <__swbuf_r+0x2e>
 8008802:	e7d6      	b.n	80087b2 <__swbuf_r+0x2a>

08008804 <__swsetup_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4b29      	ldr	r3, [pc, #164]	@ (80088ac <__swsetup_r+0xa8>)
 8008808:	4605      	mov	r5, r0
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	460c      	mov	r4, r1
 800880e:	b118      	cbz	r0, 8008818 <__swsetup_r+0x14>
 8008810:	6a03      	ldr	r3, [r0, #32]
 8008812:	b90b      	cbnz	r3, 8008818 <__swsetup_r+0x14>
 8008814:	f7fd ffb2 	bl	800677c <__sinit>
 8008818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881c:	0719      	lsls	r1, r3, #28
 800881e:	d422      	bmi.n	8008866 <__swsetup_r+0x62>
 8008820:	06da      	lsls	r2, r3, #27
 8008822:	d407      	bmi.n	8008834 <__swsetup_r+0x30>
 8008824:	2209      	movs	r2, #9
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	e033      	b.n	800889c <__swsetup_r+0x98>
 8008834:	0758      	lsls	r0, r3, #29
 8008836:	d512      	bpl.n	800885e <__swsetup_r+0x5a>
 8008838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883a:	b141      	cbz	r1, 800884e <__swsetup_r+0x4a>
 800883c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__swsetup_r+0x46>
 8008844:	4628      	mov	r0, r5
 8008846:	f7fe ff27 	bl	8007698 <_free_r>
 800884a:	2300      	movs	r3, #0
 800884c:	6363      	str	r3, [r4, #52]	@ 0x34
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	2300      	movs	r3, #0
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	b94b      	cbnz	r3, 800887e <__swsetup_r+0x7a>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008874:	d003      	beq.n	800887e <__swsetup_r+0x7a>
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 f883 	bl	8008984 <__smakebuf_r>
 800887e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008882:	f013 0201 	ands.w	r2, r3, #1
 8008886:	d00a      	beq.n	800889e <__swsetup_r+0x9a>
 8008888:	2200      	movs	r2, #0
 800888a:	60a2      	str	r2, [r4, #8]
 800888c:	6962      	ldr	r2, [r4, #20]
 800888e:	4252      	negs	r2, r2
 8008890:	61a2      	str	r2, [r4, #24]
 8008892:	6922      	ldr	r2, [r4, #16]
 8008894:	b942      	cbnz	r2, 80088a8 <__swsetup_r+0xa4>
 8008896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800889a:	d1c5      	bne.n	8008828 <__swsetup_r+0x24>
 800889c:	bd38      	pop	{r3, r4, r5, pc}
 800889e:	0799      	lsls	r1, r3, #30
 80088a0:	bf58      	it	pl
 80088a2:	6962      	ldrpl	r2, [r4, #20]
 80088a4:	60a2      	str	r2, [r4, #8]
 80088a6:	e7f4      	b.n	8008892 <__swsetup_r+0x8e>
 80088a8:	2000      	movs	r0, #0
 80088aa:	e7f7      	b.n	800889c <__swsetup_r+0x98>
 80088ac:	20000020 	.word	0x20000020

080088b0 <_raise_r>:
 80088b0:	291f      	cmp	r1, #31
 80088b2:	b538      	push	{r3, r4, r5, lr}
 80088b4:	4605      	mov	r5, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	d904      	bls.n	80088c4 <_raise_r+0x14>
 80088ba:	2316      	movs	r3, #22
 80088bc:	6003      	str	r3, [r0, #0]
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088c6:	b112      	cbz	r2, 80088ce <_raise_r+0x1e>
 80088c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088cc:	b94b      	cbnz	r3, 80088e2 <_raise_r+0x32>
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 f830 	bl	8008934 <_getpid_r>
 80088d4:	4622      	mov	r2, r4
 80088d6:	4601      	mov	r1, r0
 80088d8:	4628      	mov	r0, r5
 80088da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088de:	f000 b817 	b.w	8008910 <_kill_r>
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d00a      	beq.n	80088fc <_raise_r+0x4c>
 80088e6:	1c59      	adds	r1, r3, #1
 80088e8:	d103      	bne.n	80088f2 <_raise_r+0x42>
 80088ea:	2316      	movs	r3, #22
 80088ec:	6003      	str	r3, [r0, #0]
 80088ee:	2001      	movs	r0, #1
 80088f0:	e7e7      	b.n	80088c2 <_raise_r+0x12>
 80088f2:	2100      	movs	r1, #0
 80088f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088f8:	4620      	mov	r0, r4
 80088fa:	4798      	blx	r3
 80088fc:	2000      	movs	r0, #0
 80088fe:	e7e0      	b.n	80088c2 <_raise_r+0x12>

08008900 <raise>:
 8008900:	4b02      	ldr	r3, [pc, #8]	@ (800890c <raise+0xc>)
 8008902:	4601      	mov	r1, r0
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	f7ff bfd3 	b.w	80088b0 <_raise_r>
 800890a:	bf00      	nop
 800890c:	20000020 	.word	0x20000020

08008910 <_kill_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	@ (8008930 <_kill_r+0x20>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	4611      	mov	r1, r2
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	f7f9 fb25 	bl	8001f6c <_kill>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d102      	bne.n	800892c <_kill_r+0x1c>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	b103      	cbz	r3, 800892c <_kill_r+0x1c>
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	bd38      	pop	{r3, r4, r5, pc}
 800892e:	bf00      	nop
 8008930:	20000990 	.word	0x20000990

08008934 <_getpid_r>:
 8008934:	f7f9 bb12 	b.w	8001f5c <_getpid>

08008938 <__swhatbuf_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008940:	2900      	cmp	r1, #0
 8008942:	b096      	sub	sp, #88	@ 0x58
 8008944:	4615      	mov	r5, r2
 8008946:	461e      	mov	r6, r3
 8008948:	da0d      	bge.n	8008966 <__swhatbuf_r+0x2e>
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008950:	f04f 0100 	mov.w	r1, #0
 8008954:	bf14      	ite	ne
 8008956:	2340      	movne	r3, #64	@ 0x40
 8008958:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800895c:	2000      	movs	r0, #0
 800895e:	6031      	str	r1, [r6, #0]
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	b016      	add	sp, #88	@ 0x58
 8008964:	bd70      	pop	{r4, r5, r6, pc}
 8008966:	466a      	mov	r2, sp
 8008968:	f000 f848 	bl	80089fc <_fstat_r>
 800896c:	2800      	cmp	r0, #0
 800896e:	dbec      	blt.n	800894a <__swhatbuf_r+0x12>
 8008970:	9901      	ldr	r1, [sp, #4]
 8008972:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008976:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800897a:	4259      	negs	r1, r3
 800897c:	4159      	adcs	r1, r3
 800897e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008982:	e7eb      	b.n	800895c <__swhatbuf_r+0x24>

08008984 <__smakebuf_r>:
 8008984:	898b      	ldrh	r3, [r1, #12]
 8008986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008988:	079d      	lsls	r5, r3, #30
 800898a:	4606      	mov	r6, r0
 800898c:	460c      	mov	r4, r1
 800898e:	d507      	bpl.n	80089a0 <__smakebuf_r+0x1c>
 8008990:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	6123      	str	r3, [r4, #16]
 8008998:	2301      	movs	r3, #1
 800899a:	6163      	str	r3, [r4, #20]
 800899c:	b003      	add	sp, #12
 800899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a0:	ab01      	add	r3, sp, #4
 80089a2:	466a      	mov	r2, sp
 80089a4:	f7ff ffc8 	bl	8008938 <__swhatbuf_r>
 80089a8:	9f00      	ldr	r7, [sp, #0]
 80089aa:	4605      	mov	r5, r0
 80089ac:	4639      	mov	r1, r7
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7fe fee6 	bl	8007780 <_malloc_r>
 80089b4:	b948      	cbnz	r0, 80089ca <__smakebuf_r+0x46>
 80089b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ba:	059a      	lsls	r2, r3, #22
 80089bc:	d4ee      	bmi.n	800899c <__smakebuf_r+0x18>
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	f043 0302 	orr.w	r3, r3, #2
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	e7e2      	b.n	8008990 <__smakebuf_r+0xc>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	6020      	str	r0, [r4, #0]
 80089ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	9b01      	ldr	r3, [sp, #4]
 80089d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089da:	b15b      	cbz	r3, 80089f4 <__smakebuf_r+0x70>
 80089dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e0:	4630      	mov	r0, r6
 80089e2:	f000 f81d 	bl	8008a20 <_isatty_r>
 80089e6:	b128      	cbz	r0, 80089f4 <__smakebuf_r+0x70>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	431d      	orrs	r5, r3
 80089f8:	81a5      	strh	r5, [r4, #12]
 80089fa:	e7cf      	b.n	800899c <__smakebuf_r+0x18>

080089fc <_fstat_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d07      	ldr	r5, [pc, #28]	@ (8008a1c <_fstat_r+0x20>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	4611      	mov	r1, r2
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	f7f9 fb0f 	bl	800202c <_fstat>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d102      	bne.n	8008a18 <_fstat_r+0x1c>
 8008a12:	682b      	ldr	r3, [r5, #0]
 8008a14:	b103      	cbz	r3, 8008a18 <_fstat_r+0x1c>
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	bd38      	pop	{r3, r4, r5, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000990 	.word	0x20000990

08008a20 <_isatty_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d06      	ldr	r5, [pc, #24]	@ (8008a3c <_isatty_r+0x1c>)
 8008a24:	2300      	movs	r3, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	602b      	str	r3, [r5, #0]
 8008a2c:	f7f9 fb0e 	bl	800204c <_isatty>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_isatty_r+0x1a>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_isatty_r+0x1a>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	20000990 	.word	0x20000990

08008a40 <_init>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	bf00      	nop
 8008a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	469e      	mov	lr, r3
 8008a4a:	4770      	bx	lr

08008a4c <_fini>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	bf00      	nop
 8008a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a52:	bc08      	pop	{r3}
 8008a54:	469e      	mov	lr, r3
 8008a56:	4770      	bx	lr
